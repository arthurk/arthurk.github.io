<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
    <title>Arthur Koziel</title>
    <subtitle>Recent Blog Posts</subtitle>
    <link href="https://www.arthurkoziel.com/feed.xml" rel="self" type="application/atom+xml"/>
    <link href="https://www.arthurkoziel.com"/>
    <updated>2023-12-07T00:00:00+00:00</updated>
    <id>https://www.arthurkoziel.com/feed.xml</id>
    <entry xml:lang="en">
        <title>JSON Schemas in Neovim</title>
        <published>2023-12-07T00:00:00+00:00</published>
        <updated>2023-12-07T00:00:00+00:00</updated>
        <author>
          <name>Arthur Koziel</name>
        </author>
        <link rel="alternate" href="https://www.arthurkoziel.com/json-schemas-in-neovim/" type="text/html"/>
        <id>https://www.arthurkoziel.com/json-schemas-in-neovim/</id>
        
        <content type="html">&lt;p&gt;In this post I&#x27;ll describe how to setup JSON schemas in Neovim.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;www.arthurkoziel.com&#x2F;json-schemas-in-neovim&#x2F;k8s-deployment-autocomplete.png&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Basically, a &lt;a href=&quot;https:&#x2F;&#x2F;json-schema.org&#x2F;&quot;&gt;JSON Schema&lt;&#x2F;a&gt; describes the structure of data in a document. Most commonly these are YAML, JSON and sometimes TOML documents. For example we can make sure our GitHub Actions Workflow YAML file is valid (has all required fields, etc.) while writing it in our editor.&lt;&#x2F;p&gt;
&lt;p&gt;Most schemas can be found in the &lt;a href=&quot;https:&#x2F;&#x2F;www.schemastore.org&#x2F;json&#x2F;&quot;&gt;JSON Schema Store&lt;&#x2F;a&gt;. Since YAML&#x2F;JSON&#x2F;TOML are the most common formats in the &lt;a href=&quot;https:&#x2F;&#x2F;www.schemastore.org&#x2F;api&#x2F;json&#x2F;catalog.json&quot;&gt;catalog&lt;&#x2F;a&gt;, I&#x27;ll show how to use those in this blog post. However I&#x27;ll mostly focus on YAML files since that&#x27;s what I&#x27;m using the most.&lt;&#x2F;p&gt;
&lt;p&gt;In the following sections I&#x27;ll go through each file format and show how to setup the LSP client config using &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;neovim&#x2F;nvim-lspconfig&quot;&gt;neovim&#x2F;nvim-lspconfig&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;yaml&quot;&gt;YAML&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;www.arthurkoziel.com&#x2F;json-schemas-in-neovim&#x2F;gha-workflow-error.png&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;There are (at least) 3 plugins which are related to JSON schemas for YAML files:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;redhat-developer&#x2F;yaml-language-server&quot;&gt;yaml-language-server&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;b0o&#x2F;SchemaStore.nvim&quot;&gt;b0o&#x2F;SchemaStore.nvim&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;someone-stole-my-name&#x2F;yaml-companion.nvim&quot;&gt;someone-stole-my-name&#x2F;yaml-companion.nvim&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;In the following sections I&#x27;ll describe them and show example configurations.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;yaml-language-server&quot;&gt;yaml-language-server&lt;&#x2F;h3&gt;
&lt;p&gt;For LSP-support, we most likely have the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;redhat-developer&#x2F;yaml-language-server&quot;&gt;yaml-language-server&lt;&#x2F;a&gt; installed. Support for JSON schemas, and fetching them from the schema store, is built-in and enabled by default.&lt;&#x2F;p&gt;
&lt;p&gt;Every time the language-server is started, it will fetch the &lt;a href=&quot;https:&#x2F;&#x2F;www.schemastore.org&#x2F;api&#x2F;json&#x2F;catalog.json&quot;&gt;catalog&lt;&#x2F;a&gt; (around 300kb) and try to match a schema by filename. Each entry in the catalog, has a &lt;code&gt;fileMatch&lt;&#x2F;code&gt; property that will be checked. For example for a file named &lt;code&gt;kustomization.yaml&lt;&#x2F;code&gt; it will load the JSON Schema for &lt;a href=&quot;https:&#x2F;&#x2F;json.schemastore.org&#x2F;kustomization.json&quot;&gt;kustomize files&lt;&#x2F;a&gt; since it matches the pattern &lt;code&gt;[&amp;quot;kustomization.yaml&amp;quot;, &amp;quot;kustomization.yml&amp;quot;]&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;In my experience, using the default settings with the whole schema store catalog is not a good idea, as some of the entries have very generic filenames. For example a &lt;code&gt;template.yaml&lt;&#x2F;code&gt; file will load the schema for &lt;code&gt;AWS CloudFormation Serverless Application Model&lt;&#x2F;code&gt;, for a YAML file inside a &lt;code&gt;test_data&#x2F;&lt;&#x2F;code&gt; directory it will load the &lt;code&gt;Drupal info file&lt;&#x2F;code&gt; schema, and for a &lt;code&gt;plugin.yml&lt;&#x2F;code&gt; file a &lt;code&gt;PocketMine plugin manifest file&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;This will often lead to situations where we have a file with a name like &lt;code&gt;template.yaml&lt;&#x2F;code&gt; that has nothing to do with AWS SAM and our editor will be full of errors. To avoid this, it&#x27;s best to only use a subset of the catalog. The following example disables the schema store support and only uses 3 schemas:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;lua&quot; style=&quot;background-color:#282a36;color:#f8f8f2;&quot; class=&quot;language-lua &quot;&gt;&lt;code class=&quot;language-lua&quot; data-lang=&quot;lua&quot;&gt;&lt;span style=&quot;color:#8be9fd;&quot;&gt;require&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;#39;lspconfig&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;yamlls&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50fa7b;&quot;&gt;setup &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;settings &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;yaml &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;validate &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bd93f9;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6272a4;&quot;&gt;-- disable the schema store
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;schemaStore &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;enable &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bd93f9;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;url &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6272a4;&quot;&gt;-- manually select schemas
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;schemas &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;#39;https:&#x2F;&#x2F;json.schemastore.org&#x2F;kustomization.json&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;] = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;#39;kustomization.{yml,yaml}&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;#39;https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;docker&#x2F;compose&#x2F;master&#x2F;compose&#x2F;config&#x2F;compose_spec.json&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;] = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;#39;docker-compose*.{yml,yaml}&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;        [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;datreeio&#x2F;CRDs-catalog&#x2F;main&#x2F;argoproj.io&#x2F;application_v1alpha1.json&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;argocd-application.yaml&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Most of the values can be copied from the &lt;a href=&quot;https:&#x2F;&#x2F;www.schemastore.org&#x2F;api&#x2F;json&#x2F;catalog.json&quot;&gt;catalog&lt;&#x2F;a&gt;, and additional schemas for Kubernetes can be found in &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;datreeio&#x2F;CRDs-catalog&quot;&gt;datreeio&#x2F;CRDs-catalog&lt;&#x2F;a&gt;. It takes more time to setup but the result is better than having to deal with errors because the wrong schema was loaded.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;schemastore-nvim&quot;&gt;SchemaStore.nvim&lt;&#x2F;h3&gt;
&lt;p&gt;The &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;b0o&#x2F;SchemaStore.nvim&quot;&gt;SchemaStore.nvim&lt;&#x2F;a&gt; plugin was initially written for the json-language-server but support for the yaml-language-server has been added later on.&lt;&#x2F;p&gt;
&lt;p&gt;Compared to the yamlls built-in support it makes it easy to select, ignore or replace specific schemas from store catalog. The code example from above, which includes 2 schemas from the store catalog and adds one extra schema from outside of it, could be rewritten as:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;lua&quot; style=&quot;background-color:#282a36;color:#f8f8f2;&quot; class=&quot;language-lua &quot;&gt;&lt;code class=&quot;language-lua&quot; data-lang=&quot;lua&quot;&gt;&lt;span style=&quot;color:#8be9fd;&quot;&gt;require&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;#39;lspconfig&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;yamlls&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50fa7b;&quot;&gt;setup &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;settings &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;yaml &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;schemaStore &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;enable &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bd93f9;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;url &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;schemas &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8be9fd;&quot;&gt;require&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;#39;schemastore&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;yaml&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50fa7b;&quot;&gt;schemas &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6272a4;&quot;&gt;-- select subset from the JSON schema catalog
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;select &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;#39;kustomization.yaml&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;#39;docker-compose.yml&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6272a4;&quot;&gt;-- additional schemas (not in the catalog)
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;extra &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;url &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;#39;https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;datreeio&#x2F;CRDs-catalog&#x2F;main&#x2F;argoproj.io&#x2F;application_v1alpha1.json&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;name &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;#39;Argo CD Application&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;fileMatch &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;#39;argocd-application.yaml&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Each item in the &lt;code&gt;select&lt;&#x2F;code&gt; attribute has to match the &lt;code&gt;name&lt;&#x2F;code&gt; attribute in the catalog. The file name pattern that will be matched can not be changed.&lt;&#x2F;p&gt;
&lt;p&gt;Choosing between the yamlls built-in schema store support and the SchemaStore.nvim is personal preferrence. Both work great.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;yaml-companion-nvim&quot;&gt;yaml-companion.nvim&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;www.arthurkoziel.com&#x2F;json-schemas-in-neovim&#x2F;yaml-telescope-picker.png&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;The yaml-companion plugin is more like a &amp;quot;frontend&amp;quot; for JSON schemas. It comes with a Telescope picker that lets us manually choose the schema for the current buffer, enhances the auto-completion by showing descriptions and has good support for Kubernetes resources (see Kubernetes section below).&lt;&#x2F;p&gt;
&lt;p&gt;In the following example, we use the yamlls built-in schema store support to automatically load the GitHub Actions Workflows schema based on a filename pattern. Additionally, we add an extra schema for Flux GitRepository resources, which can be loaded manually by selecting it in the Telescope picker (&lt;code&gt;:Telescope yaml_schema&lt;&#x2F;code&gt;):&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;lua&quot; style=&quot;background-color:#282a36;color:#f8f8f2;&quot; class=&quot;language-lua &quot;&gt;&lt;code class=&quot;language-lua&quot; data-lang=&quot;lua&quot;&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;local &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;cfg &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8be9fd;&quot;&gt;require&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;yaml-companion&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50fa7b;&quot;&gt;setup&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6272a4;&quot;&gt;-- Additional schemas available in Telescope picker
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;schemas &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;name &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;Flux GitRepository&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;uri &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;fluxcd-community&#x2F;flux2-schemas&#x2F;main&#x2F;gitrepository-source-v1.json&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6272a4;&quot;&gt;-- Pass any additional options that will be merged in the final LSP config
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6272a4;&quot;&gt;-- Defaults: https:&#x2F;&#x2F;github.com&#x2F;someone-stole-my-name&#x2F;yaml-companion.nvim&#x2F;blob&#x2F;main&#x2F;lua&#x2F;yaml-companion&#x2F;config.lua
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;lspconfig &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;settings &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;yaml &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;validate &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bd93f9;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;schemaStore &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;enable &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bd93f9;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;url &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;schemas &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;          [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;#39;https:&#x2F;&#x2F;json.schemastore.org&#x2F;github-workflow.json&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;] = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;#39;.github&#x2F;workflows&#x2F;*.{yml,yaml}&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8be9fd;&quot;&gt;require&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;lspconfig&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;yamlls&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50fa7b;&quot;&gt;setup&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;cfg&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6272a4;&quot;&gt;-- :Telescope yaml_schema
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8be9fd;&quot;&gt;require&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;telescope&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50fa7b;&quot;&gt;load_extension&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;yaml_schema&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The plugin also makes it possible to get the active schema in the current buffer, which we can then use in &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;nvim-lualine&#x2F;lualine.nvim&quot;&gt;lualine&lt;&#x2F;a&gt;. In the screenshot below we can see at the bottom-right that the &amp;quot;Kubernetes&amp;quot; schema is loaded.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;www.arthurkoziel.com&#x2F;json-schemas-in-neovim&#x2F;yaml-lualine.png&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;The following config will show the active schema in lualine like in the screenshot:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;lua&quot; style=&quot;background-color:#282a36;color:#f8f8f2;&quot; class=&quot;language-lua &quot;&gt;&lt;code class=&quot;language-lua&quot; data-lang=&quot;lua&quot;&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;local &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#8be9fd;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50fa7b;&quot;&gt;get_schema&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;local &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;schema &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8be9fd;&quot;&gt;require&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;yaml-companion&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50fa7b;&quot;&gt;get_buf_schema&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bd93f9;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;schema&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;result[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bd93f9;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;name &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;none&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;then
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;schema&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;result[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bd93f9;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;name
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8be9fd;&quot;&gt;require&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;#39;lualine&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50fa7b;&quot;&gt;setup &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;sections &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;lualine_x &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;#39;encoding&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;#39;fileformat&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;#39;filetype&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;get_schema}&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;However, this only works if the schema is loaded either via Kubernetes auto-detect or if it&#x27;s listed in the yaml-companion schemas setting, like Flux CD GitRepository in the example above. To automatically load a schema and have it show in the statusline, it needs to be added twice: to the &lt;code&gt;yaml-companion.schemas&lt;&#x2F;code&gt; and to the &lt;code&gt;lspconfig.settings.yaml.schemas&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;kubernetes&quot;&gt;Kubernetes&lt;&#x2F;h3&gt;
&lt;p&gt;Kubernetes resources are not included in the JSON schema store and they cannot be matched by filename since there is no naming convention. To reliably detect them, we have to check the file content for &lt;code&gt;apiVersion&lt;&#x2F;code&gt; and &lt;code&gt;kind&lt;&#x2F;code&gt; attributes, and then load the correct schema based on the values.&lt;&#x2F;p&gt;
&lt;p&gt;Both the yaml-language-server and the yaml-companion plugin have support for Kubernetes, but they use a different approach.&lt;&#x2F;p&gt;
&lt;p&gt;In yamlls it has to be explicitly enabled by specifying a filename pattern:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;lua&quot; style=&quot;background-color:#282a36;color:#f8f8f2;&quot; class=&quot;language-lua &quot;&gt;&lt;code class=&quot;language-lua&quot; data-lang=&quot;lua&quot;&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;lspconfig&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;yamlls&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50fa7b;&quot;&gt;setup &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;settings &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;yaml &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;validate &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bd93f9;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;schemas &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;kubernetes &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;#39;k8s**.yaml&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;#39;kube*&#x2F;*.yaml&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The Kubernetes schemas are downloaded from &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;yannh&#x2F;kubernetes-json-schema&quot;&gt;yannh&#x2F;kubernetes-json-schema&lt;&#x2F;a&gt;. It&#x27;s currently uses the schemas from Kubernetes v1.22.4. The Kubernetes version is hardcoded and needs to be updated manually by the developers.&lt;&#x2F;p&gt;
&lt;p&gt;Yaml-companion has a more advanced Kubernetes support by detecting schemas based on the file content. It checks if the YAML file has a &lt;code&gt;kind&lt;&#x2F;code&gt; attribute, and that the value matches a &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;someone-stole-my-name&#x2F;yaml-companion.nvim&#x2F;blob&#x2F;main&#x2F;lua&#x2F;yaml-companion&#x2F;builtin&#x2F;kubernetes&#x2F;resources.lua&quot;&gt;pre-defined&lt;&#x2F;a&gt; resource name. Similar to yamlls the Kubernetes version is hardcoded to 1.22.4:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;lua&quot; style=&quot;background-color:#282a36;color:#f8f8f2;&quot; class=&quot;language-lua &quot;&gt;&lt;code class=&quot;language-lua&quot; data-lang=&quot;lua&quot;&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;local &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;cfg &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8be9fd;&quot;&gt;require&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;yaml-companion&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50fa7b;&quot;&gt;setup &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;builtin_matchers &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;kubernetes &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;enabled &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bd93f9;&quot;&gt;true &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6272a4;&quot;&gt;-- ...
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8be9fd;&quot;&gt;require&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;lspconfig&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;yamlls&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50fa7b;&quot;&gt;setup&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;cfg&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Since the list of resources is hardcoded, the auto-detection doesn&#x27;t work for Custom Resources (CRDs). To load a CRD schema, we have two options:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Manually load it by adding it to the &lt;code&gt;schemas&lt;&#x2F;code&gt; setting (see example further above with &lt;code&gt;Flux GitRepository&lt;&#x2F;code&gt;) and then selecting it from the Telescope picker (&lt;code&gt;:Telescope yaml_schema&lt;&#x2F;code&gt;).&lt;&#x2F;li&gt;
&lt;li&gt;Add it to the yamlls schemas and define a matching filename pattern. The benefit of this is that they will be automatically loaded.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;I use the first approach for all the examples in this post.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;full-yaml-config&quot;&gt;Full YAML config&lt;&#x2F;h3&gt;
&lt;p&gt;The following config combines the plugins mentioned above. It uses the SchemaStore.nvim plugin to select a subset of schemas from the store and pass them to the yaml-language-server. It uses the yaml-companion Kubernetes support for default Kubernetes objects (Deployment, Service, etc.) and makes additional schemas that cannot be matched based on the filename available in the Telescope picker:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;lua&quot; style=&quot;background-color:#282a36;color:#f8f8f2;&quot; class=&quot;language-lua &quot;&gt;&lt;code class=&quot;language-lua&quot; data-lang=&quot;lua&quot;&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;local &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;cfg &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8be9fd;&quot;&gt;require&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;yaml-companion&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50fa7b;&quot;&gt;setup &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6272a4;&quot;&gt;-- detect k8s schemas based on file content
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;builtin_matchers &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;kubernetes &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;enabled &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bd93f9;&quot;&gt;true &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6272a4;&quot;&gt;-- schemas available in Telescope picker
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;schemas &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6272a4;&quot;&gt;-- not loaded automatically, manually select with
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6272a4;&quot;&gt;-- :Telescope yaml_schema
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;name &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;Argo CD Application&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;uri &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;datreeio&#x2F;CRDs-catalog&#x2F;main&#x2F;argoproj.io&#x2F;application_v1alpha1.json&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;name &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;SealedSecret&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;uri &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;datreeio&#x2F;CRDs-catalog&#x2F;main&#x2F;bitnami.com&#x2F;sealedsecret_v1alpha1.json&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6272a4;&quot;&gt;-- schemas below are automatically loaded, but added
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6272a4;&quot;&gt;-- them here so that they show up in the statusline
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;name &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;Kustomization&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;uri &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;https:&#x2F;&#x2F;json.schemastore.org&#x2F;kustomization.json&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;name &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;GitHub Workflow&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;uri &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;https:&#x2F;&#x2F;json.schemastore.org&#x2F;github-workflow.json&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;lspconfig &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;settings &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;yaml &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;validate &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bd93f9;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;schemaStore &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;enable &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bd93f9;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;url &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6272a4;&quot;&gt;-- schemas from store, matched by filename
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6272a4;&quot;&gt;-- loaded automatically
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;schemas &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8be9fd;&quot;&gt;require&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;#39;schemastore&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;yaml&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50fa7b;&quot;&gt;schemas &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;select &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;#39;kustomization.yaml&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;#39;GitHub Workflow&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8be9fd;&quot;&gt;require&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;lspconfig&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;yamlls&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50fa7b;&quot;&gt;setup&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;cfg&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8be9fd;&quot;&gt;require&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;telescope&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50fa7b;&quot;&gt;load_extension&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;yaml_schema&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6272a4;&quot;&gt;-- get schema for current buffer
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;local &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#8be9fd;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50fa7b;&quot;&gt;get_schema&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;local &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;schema &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8be9fd;&quot;&gt;require&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;yaml-companion&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50fa7b;&quot;&gt;get_buf_schema&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bd93f9;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;schema&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;result[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bd93f9;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;name &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;none&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;then
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;schema&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;result[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bd93f9;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;name
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8be9fd;&quot;&gt;require&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;#39;lualine&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50fa7b;&quot;&gt;setup &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;sections &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;lualine_x &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;#39;fileformat&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;#39;filetype&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;get_schema}
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;json&quot;&gt;JSON&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;www.arthurkoziel.com&#x2F;json-schemas-in-neovim&#x2F;jsonls-warning.png&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;The &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;hrsh7th&#x2F;vscode-langservers-extracted&quot;&gt;json-language-server&lt;&#x2F;a&gt; has support for JSON schemas, but cannot fetch them from the schema store. To select schemas from the store catalog, we have to use the SchemaStore.nvim plugin.&lt;&#x2F;p&gt;
&lt;p&gt;In the following example, it only uses 2 schemas. The names are taken from the &lt;code&gt;name&lt;&#x2F;code&gt; attribute in the &lt;a href=&quot;https:&#x2F;&#x2F;www.schemastore.org&#x2F;api&#x2F;json&#x2F;catalog.json&quot;&gt;catalog&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;lua&quot; style=&quot;background-color:#282a36;color:#f8f8f2;&quot; class=&quot;language-lua &quot;&gt;&lt;code class=&quot;language-lua&quot; data-lang=&quot;lua&quot;&gt;&lt;span style=&quot;color:#8be9fd;&quot;&gt;require&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;#39;lspconfig&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;jsonls&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50fa7b;&quot;&gt;setup &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;settings &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;json &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;schemas &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8be9fd;&quot;&gt;require&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;#39;schemastore&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;json&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50fa7b;&quot;&gt;schemas &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;select &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;#39;Renovate&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;#39;GitHub Workflow Template Properties&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;validate &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;enable &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bd93f9;&quot;&gt;true &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This is similar to the yamlls config from above, but instead of getting the YAML schemas with &lt;code&gt;require(&#x27;schemastore&#x27;).yaml.schemas&lt;&#x2F;code&gt;, we have to get the JSON schemas with &lt;code&gt;require(&#x27;schemastore&#x27;).json.schemas&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Changing the filename matching pattern is not possible when using &lt;code&gt;select&lt;&#x2F;code&gt; but can be done by replacing a schema (check the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;b0o&#x2F;SchemaStore.nvim&quot;&gt;docs&lt;&#x2F;a&gt; for the &lt;code&gt;replace&lt;&#x2F;code&gt; function) which allows to set a new &lt;code&gt;fileMatch&lt;&#x2F;code&gt; attribute.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;toml&quot;&gt;TOML&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;www.arthurkoziel.com&#x2F;json-schemas-in-neovim&#x2F;toml-cargo-warn.png&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;The &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;tamasfe&#x2F;taplo&quot;&gt;taplo&lt;&#x2F;a&gt; language-server for TOML files supports JSON schemas and the schema store. It&#x27;s enabled by default, however, it&#x27;s not possible to only select a subset of the catalog:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;lua&quot; style=&quot;background-color:#282a36;color:#f8f8f2;&quot; class=&quot;language-lua &quot;&gt;&lt;code class=&quot;language-lua&quot; data-lang=&quot;lua&quot;&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;lspconfig&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;taplo&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50fa7b;&quot;&gt;setup &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;settings &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;evenBetterToml &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;schema &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6272a4;&quot;&gt;-- add additional schemas
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;associations &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;          [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;#39;example&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;\\&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;.toml$&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;] = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;#39;https:&#x2F;&#x2F;json.schemastore.org&#x2F;example.json&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The above config will use the entire catalog from the schema store and add one additional schema.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Restic Backups on Backblaze B2 with NixOS</title>
        <published>2023-11-29T00:00:00+00:00</published>
        <updated>2023-11-29T00:00:00+00:00</updated>
        <author>
          <name>Arthur Koziel</name>
        </author>
        <link rel="alternate" href="https://www.arthurkoziel.com/restic-backups-b2-nixos/" type="text/html"/>
        <id>https://www.arthurkoziel.com/restic-backups-b2-nixos/</id>
        
        <content type="html">&lt;p&gt;In this post I&#x27;ll show how I setup &lt;a href=&quot;https:&#x2F;&#x2F;restic.net&#x2F;&quot;&gt;restic&lt;&#x2F;a&gt; backups on my desktop computer that is running &lt;a href=&quot;https:&#x2F;&#x2F;nixos.org&#x2F;&quot;&gt;NixOS&lt;&#x2F;a&gt;. I&#x27;ll go though the steps on how to create a &lt;a href=&quot;https:&#x2F;&#x2F;www.backblaze.com&#x2F;cloud-storage&quot;&gt;B2&lt;&#x2F;a&gt; bucket, the NixOS configuration including secret storage with &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;FiloSottile&#x2F;age&quot;&gt;age&lt;&#x2F;a&gt; via &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ryantm&#x2F;agenix&quot;&gt;agenix&lt;&#x2F;a&gt;, and desktop notifications in case there are errors.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;www.arthurkoziel.com&#x2F;restic-backups-b2-nixos&#x2F;title.jpg&quot; alt=&quot;image of a computer in pixel art style&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;We start by creating a bucket on B2 where the encrypted restic backups will be stored.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;creating-the-b2-bucket&quot;&gt;Creating the B2 bucket&lt;&#x2F;h2&gt;
&lt;p&gt;To create a bucket named &lt;code&gt;restic-blog-test-bucket&lt;&#x2F;code&gt; we run the following command:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#282a36;color:#f8f8f2;&quot;&gt;&lt;code&gt;&lt;span&gt;$ backblaze-b2 create_bucket restic-blog-test-bucket allPrivate \
&lt;&#x2F;span&gt;&lt;span&gt;  --defaultServerSideEncryption=SSE-B2 \
&lt;&#x2F;span&gt;&lt;span&gt;  --lifecycleRules=&amp;#39;[{&amp;quot;daysFromHidingToDeleting&amp;quot;: 30, &amp;quot;daysFromUploadingToHiding&amp;quot;: null, &amp;quot;fileNamePrefix&amp;quot;: &amp;quot;&amp;quot;}]&amp;#39;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Bucket names are globally unique, meaning that they must have a unique name across all B2 buckets (not just in the account). The important thing is to set the visibility to private (&lt;code&gt;allPrivate&lt;&#x2F;code&gt;). Enabling Server-Side Encryption (SSE) is not strictly necessary given that restic already encrypts the data.&lt;&#x2F;p&gt;
&lt;p&gt;We also add a lifecycle-rule to delete old versions of files (files that have been overwritten) after 30 days. This saves storage space. By default a B2 bucket retains old versions of a file indefinitely. For us this feature is unnecessary since restic will automatically manage file versions (revisions) and regularly prune old ones.&lt;&#x2F;p&gt;
&lt;p&gt;Next we create an application key so that we can programatically access the B2 API from within the systemd service later on:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#282a36;color:#f8f8f2;&quot;&gt;&lt;code&gt;&lt;span&gt;$ backblaze-b2 create-key --bucket restic-blog-test-bucket blog-test-key &amp;quot;deleteFiles, listAllBucketNames, listBuckets, listFiles, readBucketEncryption, readBucketReplications, readBuckets, readFiles, shareFiles, writeBucketEncryption, writeBucketReplications, writeFiles&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The permissions allow restic to do any operation within the bucket. The &lt;code&gt;listAllBucketNames&lt;&#x2F;code&gt; allows to list all bucket names in the account. It is also necessary and without it the backup will break.&lt;&#x2F;p&gt;
&lt;p&gt;The command will output two values which we need to save. The first value is the application key &lt;em&gt;ID&lt;&#x2F;em&gt; and the second value is the application key itself. Both are sensitive values that we need to store in an encrypted format.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;setup-agenix&quot;&gt;Setup agenix&lt;&#x2F;h2&gt;
&lt;p&gt;For restic to be able to access the B2 bucket from within the systemd service, we need to store the credentials. We store the credentials in files and use &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;FiloSottile&#x2F;age&quot;&gt;age&lt;&#x2F;a&gt; to encrypt them.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ryantm&#x2F;agenix&quot;&gt;Agenix&lt;&#x2F;a&gt; makes it easy to use age-encrypted secrets in NixOS. Installation via flakes can be done by adding the input and importing the module:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;nix&quot; style=&quot;background-color:#282a36;color:#f8f8f2;&quot; class=&quot;language-nix &quot;&gt;&lt;code class=&quot;language-nix&quot; data-lang=&quot;nix&quot;&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50fa7b;&quot;&gt;inputs&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50fa7b;&quot;&gt;agenix&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50fa7b;&quot;&gt;url &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;github:ryantm&#x2F;agenix&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50fa7b;&quot;&gt;outputs &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#ffb86c;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#ffb86c;&quot;&gt;nixpkgs&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#ffb86c;&quot;&gt;agenix &lt;&#x2F;span&gt;&lt;span&gt;}: {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50fa7b;&quot;&gt;nixosConfigurations&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50fa7b;&quot;&gt;yourhostname &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#ffb86c;&quot;&gt;nixpkgs&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#ffb86c;&quot;&gt;lib&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#ffb86c;&quot;&gt;nixosSystem &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6272a4;&quot;&gt;# ...
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50fa7b;&quot;&gt;modules &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;[
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6272a4;&quot;&gt;# ...
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#ffb86c;&quot;&gt;agenix&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#ffb86c;&quot;&gt;nixosModules&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#ffb86c;&quot;&gt;default
&lt;&#x2F;span&gt;&lt;span&gt;      ];
&lt;&#x2F;span&gt;&lt;span&gt;    };
&lt;&#x2F;span&gt;&lt;span&gt;  };
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;To create a secret we need to use the &lt;code&gt;agenix&lt;&#x2F;code&gt; CLI. By default, the program looks for a file called &lt;code&gt;secrets.nix&lt;&#x2F;code&gt; that specifies the SSH public keys to use for each encrypted file.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#282a36;color:#f8f8f2;&quot;&gt;&lt;code&gt;&lt;span&gt;$ mkdir -p secrets&#x2F;restic
&lt;&#x2F;span&gt;&lt;span&gt;$ cd secrets&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;$ touch secrets.nix
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;For our setup we need to store 3 secrets: The repository name, password and specific environment variables that are required by the restic B2 integration. We are using the same SSH public key for all files:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;nix&quot; style=&quot;background-color:#282a36;color:#f8f8f2;&quot; class=&quot;language-nix &quot;&gt;&lt;code class=&quot;language-nix&quot; data-lang=&quot;nix&quot;&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;let
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50fa7b;&quot;&gt;arthur &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;ssh-ed25519 AAAAC3NzaC1lZD...t07oaewMGVuqmcb&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;in
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;restic&#x2F;env.age&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50fa7b;&quot;&gt;publicKeys &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;[ &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#ffb86c;&quot;&gt;arthur &lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;restic&#x2F;repo.age&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50fa7b;&quot;&gt;publicKeys &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;[ &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#ffb86c;&quot;&gt;arthur &lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;restic&#x2F;password.age&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50fa7b;&quot;&gt;publicKeys &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;[ &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#ffb86c;&quot;&gt;arthur &lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;password-secret-file&quot;&gt;Password secret file&lt;&#x2F;h3&gt;
&lt;p&gt;First we create the repository password file:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#282a36;color:#f8f8f2;&quot;&gt;&lt;code&gt;&lt;span&gt;$ nix run github:ryantm&#x2F;agenix -- -e restic&#x2F;password.age
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The password will be used by restic to encrypt and decrypt the files in the repository. Since our repository doesn&#x27;t exist yet, we can generate a new password and store it in the file.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;environment-secret-file&quot;&gt;Environment Secret file&lt;&#x2F;h3&gt;
&lt;p&gt;Second we create the environment file:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#282a36;color:#f8f8f2;&quot;&gt;&lt;code&gt;&lt;span&gt;$ nix run github:ryantm&#x2F;agenix -- -e restic&#x2F;env.age
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;When running the backup job the restic systemd service will read environment variables from this file. For the restic B2 integration we have to specify the &lt;code&gt;B2_ACCOUNT_KEY&lt;&#x2F;code&gt; and &lt;code&gt;B2_ACCOUNT_ID&lt;&#x2F;code&gt; environment variables. The values are the output of the &lt;code&gt;create-key&lt;&#x2F;code&gt; command from before. The file content should be in this format:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sh&quot; style=&quot;background-color:#282a36;color:#f8f8f2;&quot; class=&quot;language-sh &quot;&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;B2_ACCOUNT_ID&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;my-id&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;B2_ACCOUNT_KEY&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;my-key&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;repository-secret-file&quot;&gt;Repository secret file&lt;&#x2F;h3&gt;
&lt;p&gt;Lastly we specify the repository name in the repo file:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#282a36;color:#f8f8f2;&quot;&gt;&lt;code&gt;&lt;span&gt;$ nix run github:ryantm&#x2F;agenix -- -e restic&#x2F;repo.age
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This is the name of the B2 bucket that we created with the &lt;code&gt;create_bucket&lt;&#x2F;code&gt; command before. The name has to be prefixed with &lt;code&gt;b2:&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#282a36;color:#f8f8f2;&quot;&gt;&lt;code&gt;&lt;span&gt;b2:my-bucket-name
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;decrypting-files&quot;&gt;Decrypting files&lt;&#x2F;h3&gt;
&lt;p&gt;You might run into the following issue when trying to decrypt the age files (for example for editing them):&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#282a36;color:#f8f8f2;&quot;&gt;&lt;code&gt;&lt;span&gt;Error: Unsupported SSH key: &#x2F;home&#x2F;arthur&#x2F;.ssh&#x2F;id_rsa
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This happens if you didn&#x27;t specify your SSH keys in &lt;code&gt;config.services.openssh.hostKeys&lt;&#x2F;code&gt;. If you&#x27;re not running an OpenSSH server on your machine, this is probably not set, in which case agenix defaults to using the &lt;code&gt;id_rsa&lt;&#x2F;code&gt; key. For example I used my &lt;code&gt;id_ed25519&lt;&#x2F;code&gt; key.&lt;&#x2F;p&gt;
&lt;p&gt;The fix is to pass the key via the &lt;code&gt;-i&lt;&#x2F;code&gt; (identity path) argument:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#282a36;color:#f8f8f2;&quot;&gt;&lt;code&gt;&lt;span&gt;nix run github:ryantm&#x2F;agenix -- -e restic&#x2F;env.age -i ~&#x2F;.ssh&#x2F;id_ed25519
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We also need to specify the identity path in the NixOS configuration in the next step.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;create-the-nixos-config&quot;&gt;Create the NixOS config&lt;&#x2F;h2&gt;
&lt;p&gt;In our &lt;code&gt;configuration.nix&lt;&#x2F;code&gt; file we import &lt;code&gt;restic.nix&lt;&#x2F;code&gt; (it can also be put into the same file if preferred) and set the identity paths for agenix:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;nix&quot; style=&quot;background-color:#282a36;color:#f8f8f2;&quot; class=&quot;language-nix &quot;&gt;&lt;code class=&quot;language-nix&quot; data-lang=&quot;nix&quot;&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50fa7b;&quot;&gt;imports &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;[
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;.&#x2F;hardware-configuration.nix
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6272a4;&quot;&gt;# ...
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;.&#x2F;restic.nix
&lt;&#x2F;span&gt;&lt;span&gt;  ];
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50fa7b;&quot;&gt;age&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50fa7b;&quot;&gt;identityPaths &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;[ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#ff79c6;&quot;&gt;${&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#ffb86c;&quot;&gt;config&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#ff79c6;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#ffb86c;&quot;&gt;users&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#ff79c6;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#ffb86c;&quot;&gt;users&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#ff79c6;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#ffb86c;&quot;&gt;arthur&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#ff79c6;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#ffb86c;&quot;&gt;home&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#ff79c6;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&#x2F;.ssh&#x2F;id_ed25519&amp;quot; &lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;In our NixOS config directory we create a new file called &lt;code&gt;restic.nix&lt;&#x2F;code&gt; with the following content:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;nix&quot; style=&quot;background-color:#282a36;color:#f8f8f2;&quot; class=&quot;language-nix &quot;&gt;&lt;code class=&quot;language-nix&quot; data-lang=&quot;nix&quot;&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6272a4;&quot;&gt;# configure agenix secrets
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50fa7b;&quot;&gt;age&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50fa7b;&quot;&gt;secrets &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;restic&#x2F;env&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50fa7b;&quot;&gt;file &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;..&#x2F;secrets&#x2F;restic&#x2F;env.age&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;restic&#x2F;repo&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50fa7b;&quot;&gt;file &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;..&#x2F;secrets&#x2F;restic&#x2F;repo.age&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;restic&#x2F;password&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50fa7b;&quot;&gt;file &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;..&#x2F;secrets&#x2F;restic&#x2F;password.age&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;  };
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6272a4;&quot;&gt;# configure restic backup services
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50fa7b;&quot;&gt;services&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50fa7b;&quot;&gt;restic&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50fa7b;&quot;&gt;backups &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50fa7b;&quot;&gt;daily &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50fa7b;&quot;&gt;initialize &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bd93f9;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50fa7b;&quot;&gt;environmentFile &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#ffb86c;&quot;&gt;config&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#ffb86c;&quot;&gt;age&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#ffb86c;&quot;&gt;secrets&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;restic&#x2F;env&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#ffb86c;&quot;&gt;path&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50fa7b;&quot;&gt;repositoryFile &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#ffb86c;&quot;&gt;config&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#ffb86c;&quot;&gt;age&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#ffb86c;&quot;&gt;secrets&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;restic&#x2F;repo&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#ffb86c;&quot;&gt;path&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50fa7b;&quot;&gt;passwordFile &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#ffb86c;&quot;&gt;config&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#ffb86c;&quot;&gt;age&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#ffb86c;&quot;&gt;secrets&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;restic&#x2F;password&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#ffb86c;&quot;&gt;path&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50fa7b;&quot;&gt;paths &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;[
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#ff79c6;&quot;&gt;${&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#ffb86c;&quot;&gt;config&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#ff79c6;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#ffb86c;&quot;&gt;users&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#ff79c6;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#ffb86c;&quot;&gt;users&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#ff79c6;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#ffb86c;&quot;&gt;arthur&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#ff79c6;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#ffb86c;&quot;&gt;home&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#ff79c6;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&#x2F;documents&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;      ];
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50fa7b;&quot;&gt;pruneOpts &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;[
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;--keep-daily 7&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;--keep-weekly 5&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;--keep-monthly 12&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;      ];
&lt;&#x2F;span&gt;&lt;span&gt;    };
&lt;&#x2F;span&gt;&lt;span&gt;  };
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The secrets specify the path to our encrypted age files that we created before.&lt;&#x2F;p&gt;
&lt;p&gt;The &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;NixOS&#x2F;nixpkgs&#x2F;blob&#x2F;nixos-23.05&#x2F;nixos&#x2F;modules&#x2F;services&#x2F;backup&#x2F;restic.nix&quot;&gt;backup service&lt;&#x2F;a&gt; has the name &lt;code&gt;daily&lt;&#x2F;code&gt; (can be changed to any other name if preferred), which will create a systemd service called &lt;code&gt;restic-backups-daily.service&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;The default systemd timer config runs the job at midnight each day. It also enables the &lt;a href=&quot;https:&#x2F;&#x2F;www.freedesktop.org&#x2F;software&#x2F;systemd&#x2F;man&#x2F;latest&#x2F;systemd.timer.html#Persistent=&quot;&gt;Persistent&lt;&#x2F;a&gt; option by default, meaning that if the computer was off during the trigger time, it will run the job immediatelly after the machine starts up again.&lt;&#x2F;p&gt;
&lt;p&gt;The prune option will remove old data that is not needed anymore. This is used to save space. The NixOS service will run the &lt;code&gt;restic forget --prune&lt;&#x2F;code&gt; command. In the example above we want to keep the most recent 7 daily, 5 weekly and 12 monthly snapshots. If left out, each daily backup will be kept forever.&lt;&#x2F;p&gt;
&lt;p&gt;Add the files to git, rebuild your system and switch to the new configuration:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#282a36;color:#f8f8f2;&quot;&gt;&lt;code&gt;&lt;span&gt;$ git add secrets&#x2F; restic.nix
&lt;&#x2F;span&gt;&lt;span&gt;$ nixos-rebuild --flake .#mycomputer switch
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This should create the restic backup systemd services (but not trigger them yet).&lt;&#x2F;p&gt;
&lt;h3 id=&quot;systemd-service&quot;&gt;Systemd Service&lt;&#x2F;h3&gt;
&lt;p&gt;The systemd service that will run the backups each day looks like this:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#282a36;color:#f8f8f2;&quot;&gt;&lt;code&gt;&lt;span&gt;$ systemctl status restic-backups-daily.service
&lt;&#x2F;span&gt;&lt;span&gt;○ restic-backups-daily.service
&lt;&#x2F;span&gt;&lt;span&gt;     Loaded: loaded (&#x2F;etc&#x2F;systemd&#x2F;system&#x2F;restic-backups-daily.service; linked; preset: enabled)
&lt;&#x2F;span&gt;&lt;span&gt;     Active: inactive (dead) since Wed 2023-11-22 14:40:38 CET; 3h 5min ago
&lt;&#x2F;span&gt;&lt;span&gt;TriggeredBy: ● restic-backups-daily.timer
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We can see that the service is triggered by &lt;code&gt;restic-backups-daily.timer&lt;&#x2F;code&gt;, which looks like this:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#282a36;color:#f8f8f2;&quot;&gt;&lt;code&gt;&lt;span&gt;$ systemctl status restic-backups-daily.timer
&lt;&#x2F;span&gt;&lt;span&gt;● restic-backups-daily.timer
&lt;&#x2F;span&gt;&lt;span&gt;     Loaded: loaded (&#x2F;etc&#x2F;systemd&#x2F;system&#x2F;restic-backups-daily.timer; enabled; preset: enabled)
&lt;&#x2F;span&gt;&lt;span&gt;     Active: active (waiting) since Wed 2023-11-22 13:52:14 CET; 3h 53min ago
&lt;&#x2F;span&gt;&lt;span&gt;    Trigger: Thu 2023-11-23 00:00:00 CET; 6h left
&lt;&#x2F;span&gt;&lt;span&gt;   Triggers: ● restic-backups-daily.service
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;To test if backups are working we start the service manually:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#282a36;color:#f8f8f2;&quot;&gt;&lt;code&gt;&lt;span&gt;$ sudo systemctl start restic-backups-daily.service
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;To check the output we run:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#282a36;color:#f8f8f2;&quot;&gt;&lt;code&gt;&lt;span&gt;$ journalctl -u restic-backups-daily.service
&lt;&#x2F;span&gt;&lt;span&gt;systemd[1]: Starting restic-backups-daily.service...
&lt;&#x2F;span&gt;&lt;span&gt;restic-backups-daily-pre-start[53021]: Fatal: unable to open config file: Stat: b2_download_file_by_name: 404:
&lt;&#x2F;span&gt;&lt;span&gt;restic-backups-daily-pre-start[53021]: Is there a repository at the following location?
&lt;&#x2F;span&gt;&lt;span&gt;restic-backups-daily-pre-start[53021]: b2:my-bucket
&lt;&#x2F;span&gt;&lt;span&gt;restic-backups-daily-pre-start[53038]: created restic repository c66237620d at
&lt;&#x2F;span&gt;&lt;span&gt;restic-backups-daily-pre-start[53038]: Please note that knowledge of your password is required to access
&lt;&#x2F;span&gt;&lt;span&gt;restic-backups-daily-pre-start[53038]: the repository. Losing your password means that your data is
&lt;&#x2F;span&gt;&lt;span&gt;restic-backups-daily-pre-start[53038]: irrecoverably lost.
&lt;&#x2F;span&gt;&lt;span&gt;restic[53054]: no parent snapshot found, will read all files
&lt;&#x2F;span&gt;&lt;span&gt;restic[53054]: Files:         846 new,     0 changed,     0 unmodified
&lt;&#x2F;span&gt;&lt;span&gt;restic[53054]: Dirs:          107 new,     0 changed,     0 unmodified
&lt;&#x2F;span&gt;&lt;span&gt;restic[53054]: Added to the repository: 244.128 MiB (212.474 MiB stored)
&lt;&#x2F;span&gt;&lt;span&gt;restic[53054]: processed 846 files, 314.304 MiB in 0:16
&lt;&#x2F;span&gt;&lt;span&gt;restic[53054]: snapshot d409fc8f saved
&lt;&#x2F;span&gt;&lt;span&gt;restic[53079]: Applying Policy: keep 7 daily, 5 weekly, 12 monthly snapshots
&lt;&#x2F;span&gt;&lt;span&gt;restic[53079]: keep 1 snapshots:
&lt;&#x2F;span&gt;&lt;span&gt;restic[53079]: ID        Time                 Host        Tags        Reasons           Paths
&lt;&#x2F;span&gt;&lt;span&gt;restic[53079]: -----------------------------------------------------------------------------------------------
&lt;&#x2F;span&gt;&lt;span&gt;restic[53079]: d409fc8f  2023-11-22 14:09:36  mycomputer              daily snapshot    &#x2F;home&#x2F;arthur&#x2F;documents
&lt;&#x2F;span&gt;&lt;span&gt;restic[53079]:                                                        weekly snapshot
&lt;&#x2F;span&gt;&lt;span&gt;restic[53079]:                                                        monthly snapshot
&lt;&#x2F;span&gt;&lt;span&gt;restic[53079]: -----------------------------------------------------------------------------------------------
&lt;&#x2F;span&gt;&lt;span&gt;restic[53079]: 1 snapshots
&lt;&#x2F;span&gt;&lt;span&gt;restic[53096]: using temporary cache in &#x2F;var&#x2F;cache&#x2F;restic-backups-daily&#x2F;restic-check-cache-1922151602
&lt;&#x2F;span&gt;&lt;span&gt;restic[53096]: create exclusive lock for repository
&lt;&#x2F;span&gt;&lt;span&gt;restic[53096]: load indexes
&lt;&#x2F;span&gt;&lt;span&gt;restic[53096]: check all packs
&lt;&#x2F;span&gt;&lt;span&gt;restic[53096]: check snapshots, trees and blobs
&lt;&#x2F;span&gt;&lt;span&gt;restic[53096]: [0:01] 100.00%  1 &#x2F; 1 snapshots
&lt;&#x2F;span&gt;&lt;span&gt;restic[53096]: no errors were found
&lt;&#x2F;span&gt;&lt;span&gt;systemd[1]: restic-backups-daily.service: Deactivated successfully.
&lt;&#x2F;span&gt;&lt;span&gt;systemd[1]: Finished restic-backups-daily.service.
&lt;&#x2F;span&gt;&lt;span&gt;systemd[1]: restic-backups-daily.service: Consumed 8.131s CPU time, received 1.6M IP traffic, sent 213.2M IP traffic.
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The backup finished successfully. Since this is the first run and the restic repository didn&#x27;t exist before, there was an error at the beginning which can be ignored. The next run should not have this error since the repository has been initialized now.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;testing-backup-restore&quot;&gt;Testing Backup Restore&lt;&#x2F;h2&gt;
&lt;p&gt;To test that we can restore backups we use the restic CLI. Since NixOS 23.11, the restic service creates wrapper scripts for each job. The script is name &lt;code&gt;restic-$job&lt;&#x2F;code&gt;, which is &lt;code&gt;restic-daily&lt;&#x2F;code&gt; in our case. It will automatically load the environment variables, repository name and password from the service definition.&lt;&#x2F;p&gt;
&lt;p&gt;To list snapshots we run:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#282a36;color:#f8f8f2;&quot;&gt;&lt;code&gt;&lt;span&gt;$ sudo restic-daily snapshots
&lt;&#x2F;span&gt;&lt;span&gt;repository c6622116 opened (version 2, compression level auto)
&lt;&#x2F;span&gt;&lt;span&gt;ID        Time                 Host        Tags        Paths
&lt;&#x2F;span&gt;&lt;span&gt;-----------------------------------------------------------------------------
&lt;&#x2F;span&gt;&lt;span&gt;47a123a4  2023-11-22 14:40:11  desktop                 &#x2F;home&#x2F;arthur&#x2F;documents
&lt;&#x2F;span&gt;&lt;span&gt;-----------------------------------------------------------------------------
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;To restore it into the &lt;code&gt;restore-backup&lt;&#x2F;code&gt; directory we run:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#282a36;color:#f8f8f2;&quot;&gt;&lt;code&gt;&lt;span&gt;$ sudo restic-daily restore --target restore-backup latest
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The files should be restored from the latest backup.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;desktop-notifications-for-failures&quot;&gt;Desktop notifications for failures&lt;&#x2F;h2&gt;
&lt;p&gt;To notify us in case the backup fails we can setup desktop notifications. This also works when the backup is started (and fails) before the window manager launched. The notification will be shown on the next start.&lt;&#x2F;p&gt;
&lt;p&gt;Basically we create a systemd service that runs the &lt;code&gt;notify-send&lt;&#x2F;code&gt; command in a shell script, and attach it to the &lt;a href=&quot;https:&#x2F;&#x2F;www.freedesktop.org&#x2F;software&#x2F;systemd&#x2F;man&#x2F;latest&#x2F;systemd.unit.html#OnFailure=&quot;&gt;&lt;code&gt;OnFailure&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; event of the restic backup service.&lt;&#x2F;p&gt;
&lt;p&gt;We put the following code into the same &lt;code&gt;restic.nix&lt;&#x2F;code&gt; file as above:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;nix&quot; style=&quot;background-color:#282a36;color:#f8f8f2;&quot; class=&quot;language-nix &quot;&gt;&lt;code class=&quot;language-nix&quot; data-lang=&quot;nix&quot;&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50fa7b;&quot;&gt;environment&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50fa7b;&quot;&gt;systemPackages &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;[
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#ffb86c;&quot;&gt;pkgs&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#ffb86c;&quot;&gt;libnotify
&lt;&#x2F;span&gt;&lt;span&gt;  ];
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50fa7b;&quot;&gt;systemd&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50fa7b;&quot;&gt;services&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50fa7b;&quot;&gt;restic-backups-daily&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50fa7b;&quot;&gt;unitConfig&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50fa7b;&quot;&gt;OnFailure &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;notify-backup-failed.service&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50fa7b;&quot;&gt;systemd&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50fa7b;&quot;&gt;services&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;notify-backup-failed&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50fa7b;&quot;&gt;enable &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bd93f9;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50fa7b;&quot;&gt;description &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;Notify on failed backup&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50fa7b;&quot;&gt;serviceConfig &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50fa7b;&quot;&gt;Type &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;oneshot&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50fa7b;&quot;&gt;User &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#ffb86c;&quot;&gt;config&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#ffb86c;&quot;&gt;users&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#ffb86c;&quot;&gt;users&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#ffb86c;&quot;&gt;arthur&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#ffb86c;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    };
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6272a4;&quot;&gt;# required for notify-send
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50fa7b;&quot;&gt;environment&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50fa7b;&quot;&gt;DBUS_SESSION_BUS_ADDRESS &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;unix:path=&#x2F;run&#x2F;user&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#ff79c6;&quot;&gt;${
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#ffb86c;&quot;&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8be9fd;&quot;&gt;toString &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#ffb86c;&quot;&gt;config&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#ff79c6;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#ffb86c;&quot;&gt;users&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#ff79c6;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#ffb86c;&quot;&gt;users&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#ff79c6;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#ffb86c;&quot;&gt;arthur&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#ff79c6;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#ffb86c;&quot;&gt;uid
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#ffb86c;&quot;&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#ff79c6;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&#x2F;bus&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50fa7b;&quot;&gt;script &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;#39;&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#ff79c6;&quot;&gt;${&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#ffb86c;&quot;&gt;pkgs&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#ff79c6;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#ffb86c;&quot;&gt;libnotify&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#ff79c6;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&#x2F;bin&#x2F;notify-send --urgency=critical \
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;        &amp;quot;Backup failed&amp;quot; \
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;        &amp;quot;$(journalctl -u restic-backups-daily -n 5 -o cat)&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;    &amp;#39;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;  };
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;To try it out we set the user of the restic backup service to a non-existing one:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;nix&quot; style=&quot;background-color:#282a36;color:#f8f8f2;&quot; class=&quot;language-nix &quot;&gt;&lt;code class=&quot;language-nix&quot; data-lang=&quot;nix&quot;&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50fa7b;&quot;&gt;services&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50fa7b;&quot;&gt;restic&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50fa7b;&quot;&gt;backups &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50fa7b;&quot;&gt;daily &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6272a4;&quot;&gt;# ...
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50fa7b;&quot;&gt;user &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;doesntexist&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    };
&lt;&#x2F;span&gt;&lt;span&gt;  };
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Now we manyally trigger a backup:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#282a36;color:#f8f8f2;&quot;&gt;&lt;code&gt;&lt;span&gt;$ sudo systemctl start restic-backups-daily.service
&lt;&#x2F;span&gt;&lt;span&gt;Job for restic-backups-daily.service failed because the control process exited with error code.
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This will show a desktop notification:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;www.arthurkoziel.com&#x2F;restic-backups-b2-nixos&#x2F;notification.png&quot; alt=&quot;example desktop notification&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;With this working the automated backups are done. They will run every day at midnight or on the next boot if the machine was off. In case the backup fails we will get a notification and can then use the systemd logs to further investigate and fix the issue.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Managing Kubernetes resources in Terraform: Helm provider</title>
        <published>2023-11-20T00:00:00+00:00</published>
        <updated>2023-11-20T00:00:00+00:00</updated>
        <author>
          <name>Arthur Koziel</name>
        </author>
        <link rel="alternate" href="https://www.arthurkoziel.com/managing-kubernetes-resources-in-terraform-helm-provider/" type="text/html"/>
        <id>https://www.arthurkoziel.com/managing-kubernetes-resources-in-terraform-helm-provider/</id>
        
        <content type="html">&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;www.arthurkoziel.com&#x2F;managing-kubernetes-resources-in-terraform-helm-provider&#x2F;title.jpeg&quot; alt=&quot;container ship&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;In the &lt;a href=&quot;https:&#x2F;&#x2F;www.arthurkoziel.com&#x2F;managing-kubernetes-resources-in-terraform-kubernetes-provider&#x2F;&quot;&gt;previous blog post&lt;&#x2F;a&gt; we&#x27;ve covered the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;hashicorp&#x2F;terraform-provider-kubernetes&quot;&gt;Kubernetes provider&lt;&#x2F;a&gt; for Terraform. In this blog post, we look at the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;hashicorp&#x2F;terraform-provider-helm&quot;&gt;Helm provider&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;With the Terraform provider the most time-consuming tasks were the conversion from YAML to HCL, and the need to manually split CRDs. With the Helm provider we don&#x27;t need to do these tasks.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;the-basics&quot;&gt;The basics&lt;&#x2F;h2&gt;
&lt;p&gt;The Helm provider only has one resource called &lt;code&gt;helm_release&lt;&#x2F;code&gt;. As an example we can configure and use it to install Grafana like this:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;hcl&quot; style=&quot;background-color:#282a36;color:#f8f8f2;&quot; class=&quot;language-hcl &quot;&gt;&lt;code class=&quot;language-hcl&quot; data-lang=&quot;hcl&quot;&gt;&lt;span style=&quot;font-style:italic;color:#8be9fd;&quot;&gt;provider &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;helm&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt; {
&lt;&#x2F;span&gt;&lt;span&gt;  kubernetes {
&lt;&#x2F;span&gt;&lt;span&gt;    config_path &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;~&#x2F;.kube&#x2F;config&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#8be9fd;&quot;&gt;resource &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;helm_release&amp;quot; &amp;quot;grafana&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt; {
&lt;&#x2F;span&gt;&lt;span&gt;  name             &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;grafana&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;  repository       &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;https:&#x2F;&#x2F;grafana.github.io&#x2F;helm-charts&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;  chart            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;grafana&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;  version          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;7.0.6&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Applying it will create the Terraform resource:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#282a36;color:#f8f8f2;&quot;&gt;&lt;code&gt;&lt;span&gt;$ terraform apply
&lt;&#x2F;span&gt;&lt;span&gt;Apply complete! Resources: 1 added, 0 changed, 0 destroyed.
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;And deploy the application in Kubernetes:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#282a36;color:#f8f8f2;&quot;&gt;&lt;code&gt;&lt;span&gt;$ kubectl get pods
&lt;&#x2F;span&gt;&lt;span&gt;NAME                       READY   STATUS    RESTARTS   AGE
&lt;&#x2F;span&gt;&lt;span&gt;grafana-5b67f46b65-pq25z   1&#x2F;1     Running   0          76s
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;installing-istio&quot;&gt;Installing Istio&lt;&#x2F;h2&gt;
&lt;p&gt;In the &lt;a href=&quot;https:&#x2F;&#x2F;www.arthurkoziel.com&#x2F;managing-kubernetes-resources-in-terraform-kubernetes-provider&#x2F;&quot;&gt;previous post&lt;&#x2F;a&gt; we installed Istio using the Kubernetes provider. To show the differences between both providers, we&#x27;ll reinstall Istio, this time using the Helm provider.&lt;&#x2F;p&gt;
&lt;p&gt;Last time we generated the Istio YAML manifests using istioctl, which included the CRDs and Istiod deployment. To deploy the same resources with Helm, we need to install two charts:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;The &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;istio&#x2F;istio&#x2F;tree&#x2F;master&#x2F;manifests&#x2F;charts&#x2F;base&quot;&gt;base chart&lt;&#x2F;a&gt; which contains the CRDs.&lt;&#x2F;li&gt;
&lt;li&gt;The &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;istio&#x2F;istio&#x2F;tree&#x2F;master&#x2F;manifests&#x2F;charts&#x2F;istio-control&#x2F;istio-discovery&quot;&gt;istiod chart&lt;&#x2F;a&gt; which contains the istiod deployment.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;In Terraform they can be installed as follows:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;hcl&quot; style=&quot;background-color:#282a36;color:#f8f8f2;&quot; class=&quot;language-hcl &quot;&gt;&lt;code class=&quot;language-hcl&quot; data-lang=&quot;hcl&quot;&gt;&lt;span style=&quot;font-style:italic;color:#8be9fd;&quot;&gt;resource &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;helm_release&amp;quot; &amp;quot;istio_base&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt; {
&lt;&#x2F;span&gt;&lt;span&gt;  name             &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;istio-base&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;  repository       &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;https:&#x2F;&#x2F;istio-release.storage.googleapis.com&#x2F;charts&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;  chart            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;base&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;  namespace        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;istio-system&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;  create_namespace &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bd93f9;&quot;&gt;true
&lt;&#x2F;span&gt;&lt;span&gt;  version          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;1.20.0&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#8be9fd;&quot;&gt;resource &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;helm_release&amp;quot; &amp;quot;istiod&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt; {
&lt;&#x2F;span&gt;&lt;span&gt;  name             &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;istiod&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;  repository       &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;https:&#x2F;&#x2F;istio-release.storage.googleapis.com&#x2F;charts&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;  chart            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;istiod&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;  namespace        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;istio-system&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;  create_namespace &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bd93f9;&quot;&gt;true
&lt;&#x2F;span&gt;&lt;span&gt;  version          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;1.20.0&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6272a4;&quot;&gt;# to install the CRDs first
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;depends_on =&lt;&#x2F;span&gt;&lt;span&gt; [helm_release&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;istio_base]
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We apply it:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#282a36;color:#f8f8f2;&quot;&gt;&lt;code&gt;&lt;span&gt;$ terraform apply
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;Apply complete! Resources: 2 added, 0 changed, 0 destroyed.
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;And with that the installation is done:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#282a36;color:#f8f8f2;&quot;&gt;&lt;code&gt;&lt;span&gt;$ kubectl get pods -n istio-system
&lt;&#x2F;span&gt;&lt;span&gt;NAME                      READY   STATUS    RESTARTS   AGE
&lt;&#x2F;span&gt;&lt;span&gt;istiod-7d4885fc54-qgk54   1&#x2F;1     Running   0          37s
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Compared to using the Kubernetes provider, this was much easier and faster. We didn&#x27;t have to convert YAML to HCL, and then split the CRDs manually into a different file.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;chart-values&quot;&gt;Chart values&lt;&#x2F;h2&gt;
&lt;p&gt;There are 3 options to set custom chart values:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;HCL &lt;code&gt;set&lt;&#x2F;code&gt; blocks&lt;&#x2F;li&gt;
&lt;li&gt;HCL &lt;code&gt;set_sensitive&lt;&#x2F;code&gt; blocks&lt;&#x2F;li&gt;
&lt;li&gt;YAML&#x2F;JSON in the &lt;code&gt;values&lt;&#x2F;code&gt; attribute&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;We&#x27;ll look at each of them and see how they can be used and what the pros and cons of each method are.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;hcl-set-blocks&quot;&gt;HCL set blocks&lt;&#x2F;h2&gt;
&lt;p&gt;As an example here&#x27;s how to set custom values using &lt;code&gt;set&lt;&#x2F;code&gt; with the same Istio chart from above:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;hcl&quot; style=&quot;background-color:#282a36;color:#f8f8f2;&quot; class=&quot;language-hcl &quot;&gt;&lt;code class=&quot;language-hcl&quot; data-lang=&quot;hcl&quot;&gt;&lt;span style=&quot;font-style:italic;color:#8be9fd;&quot;&gt;resource &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;helm_release&amp;quot; &amp;quot;istiod&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt; {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6272a4;&quot;&gt;# ...
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  set {
&lt;&#x2F;span&gt;&lt;span&gt;    name  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;pilot.resources.requests.cpu&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    value &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;100m&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  set {
&lt;&#x2F;span&gt;&lt;span&gt;    name  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;pilot.resources.requests.memory&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    value &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;100Mi&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  set {
&lt;&#x2F;span&gt;&lt;span&gt;    name  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;pilot.resources.limits.memory&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    value &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;100Mi&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;When setting values that have &lt;code&gt;{}&lt;&#x2F;code&gt;, &lt;code&gt;[]&lt;&#x2F;code&gt;, &lt;code&gt;.&lt;&#x2F;code&gt;, and &lt;code&gt;,&lt;&#x2F;code&gt; characters in them we have to double-escape them:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;hcl&quot; style=&quot;background-color:#282a36;color:#f8f8f2;&quot; class=&quot;language-hcl &quot;&gt;&lt;code class=&quot;language-hcl&quot; data-lang=&quot;hcl&quot;&gt;&lt;span&gt;set {
&lt;&#x2F;span&gt;&lt;span&gt;  name  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;pilot.podAnnotations.prometheus&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;\\&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;.io&#x2F;scrape&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;  value &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;\&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;\&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The downside of this method is that it&#x27;s verbose. Each value takes up 4 lines. HCL doesn&#x27;t allow to merge it into a single line:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#282a36;color:#f8f8f2;&quot;&gt;&lt;code&gt;&lt;span&gt;Error: Invalid single-argument block definition
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  on main.tf line 28, in resource &amp;quot;helm_release&amp;quot; &amp;quot;istiod&amp;quot;:
&lt;&#x2F;span&gt;&lt;span&gt;  28:   set { name  = &amp;quot;pilot.resources.requests.memory&amp;quot;, value = &amp;quot;100Mi&amp;quot; }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;Single-line block syntax can include only one argument definition. To define multiple
&lt;&#x2F;span&gt;&lt;span&gt;arguments, use the multi-line block syntax with one argument definition per line.
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This means that setting 3 custom values for a Helm chart requires adding 12 lines to the Terraform file. This can quickly add up for larger charts and make it difficult to get a good overview of the changes.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;hcl-set-sensitive-blocks&quot;&gt;HCL set_sensitive blocks&lt;&#x2F;h2&gt;
&lt;p&gt;For sensitive values (secrets) which should not be displayed as clear text in the plan output, we have to use the HCL &lt;code&gt;set_sensitive&lt;&#x2F;code&gt; block.&lt;&#x2F;p&gt;
&lt;p&gt;There is no equivalent with when using the &lt;code&gt;values&lt;&#x2F;code&gt; attribute. There is an &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;hashicorp&#x2F;terraform-provider-helm&#x2F;issues&#x2F;546&quot;&gt;Issue&lt;&#x2F;a&gt; and &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;hashicorp&#x2F;terraform-provider-helm&#x2F;pull&#x2F;625&quot;&gt;PR&lt;&#x2F;a&gt; but they are abandoned.&lt;&#x2F;p&gt;
&lt;p&gt;Using the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;grafana&#x2F;helm-charts&#x2F;tree&#x2F;main&#x2F;charts&#x2F;grafana&quot;&gt;Grafana Helm chart&lt;&#x2F;a&gt; we can set the admin password like this:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;hcl&quot; style=&quot;background-color:#282a36;color:#f8f8f2;&quot; class=&quot;language-hcl &quot;&gt;&lt;code class=&quot;language-hcl&quot; data-lang=&quot;hcl&quot;&gt;&lt;span&gt;set_sensitive {
&lt;&#x2F;span&gt;&lt;span&gt;  name  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;grafana.adminPassword&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;  value &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bd93f9;&quot;&gt;local&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;password
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;However, there is an issue with names that contain backslashes, which leads to sensitive values being shown in clear-text. There is an &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;hashicorp&#x2F;terraform-provider-helm&#x2F;issues&#x2F;737&quot;&gt;Issue&lt;&#x2F;a&gt; about this, but it has been marked as stale and closed by a bot. A &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;hashicorp&#x2F;terraform-provider-helm&#x2F;pull&#x2F;746&quot;&gt;PR&lt;&#x2F;a&gt; with a proposed fix is ignored by the developers.&lt;&#x2F;p&gt;
&lt;p&gt;In the following example we use the Grafana Helm chart and set the client secret for the GitHub OAuth2 authentication:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;hcl&quot; style=&quot;background-color:#282a36;color:#f8f8f2;&quot; class=&quot;language-hcl &quot;&gt;&lt;code class=&quot;language-hcl&quot; data-lang=&quot;hcl&quot;&gt;&lt;span style=&quot;font-style:italic;color:#8be9fd;&quot;&gt;resource &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;helm_release&amp;quot; &amp;quot;grafana&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt; {
&lt;&#x2F;span&gt;&lt;span&gt;  name             &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;grafana&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;  repository       &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;https:&#x2F;&#x2F;grafana.github.io&#x2F;helm-charts&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;  chart            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;grafana&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;  version          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;7.0.6&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;  namespace        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;grafana&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;  create_namespace &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bd93f9;&quot;&gt;true
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  set {
&lt;&#x2F;span&gt;&lt;span&gt;    name &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;grafana&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;\\&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;.ini.server.root_url&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    value &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;htps:&#x2F;&#x2F;example.org&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  set_sensitive {
&lt;&#x2F;span&gt;&lt;span&gt;    name &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;grafana&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;\\&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;.ini.server.auth&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;\\&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;.github.client_secret&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    value &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;very-secret&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;On the first apply the sensitive value will not be shown, but if we change any attribute in the resource (below I&#x27;ve changed the &lt;code&gt;root_url&lt;&#x2F;code&gt;) it will be displayed in clear text:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;hcl&quot; style=&quot;background-color:#282a36;color:#f8f8f2;&quot; class=&quot;language-hcl &quot;&gt;&lt;code class=&quot;language-hcl&quot; data-lang=&quot;hcl&quot;&gt;&lt;span style=&quot;color:#6272a4;&quot;&gt;# helm_release.grafana will be updated in-place
&lt;&#x2F;span&gt;&lt;span&gt;~ &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#8be9fd;&quot;&gt;resource &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;helm_release&amp;quot; &amp;quot;grafana&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt; {
&lt;&#x2F;span&gt;&lt;span&gt;      id                         &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;grafana&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    ~ metadata                   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; [
&lt;&#x2F;span&gt;&lt;span&gt;        - {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span&gt;app_version &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;10.1.5&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span&gt;chart       &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;grafana&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span&gt;name        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;grafana&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span&gt;namespace   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;grafana&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span&gt;revision    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bd93f9;&quot;&gt;3
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span&gt;values      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8be9fd;&quot;&gt;jsonencode&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;                  {
&lt;&#x2F;span&gt;&lt;span&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;grafana.ini&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; {
&lt;&#x2F;span&gt;&lt;span&gt;                        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span&gt;server &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; {
&lt;&#x2F;span&gt;&lt;span&gt;                            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;auth.github&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; {
&lt;&#x2F;span&gt;&lt;span&gt;                                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span&gt;client_secret &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;very-secret&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;                              }
&lt;&#x2F;span&gt;&lt;span&gt;                            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span&gt;root_url      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;htps:&#x2F;&#x2F;example.org&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;                          }
&lt;&#x2F;span&gt;&lt;span&gt;                      }
&lt;&#x2F;span&gt;&lt;span&gt;                  }
&lt;&#x2F;span&gt;&lt;span&gt;              )
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span&gt;version     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;7.0.6&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;          },
&lt;&#x2F;span&gt;&lt;span&gt;      ] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; (known after apply)
&lt;&#x2F;span&gt;&lt;span&gt;      name                       &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;grafana&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6272a4;&quot;&gt;# (27 unchanged attributes hidden)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span&gt;set {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span&gt;name  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;grafana&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;\\&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;.ini.server.root_url&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; null
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span&gt;value &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;htps:&#x2F;&#x2F;example.org&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; null
&lt;&#x2F;span&gt;&lt;span&gt;      }
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span&gt;set {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span&gt;name  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;grafana&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;\\&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;.ini.server.root_url&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span&gt;value &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;htps:&#x2F;&#x2F;www.grafana.com&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;      }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6272a4;&quot;&gt;# (1 unchanged block hidden)
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;You can see the &lt;code&gt;very-secret&lt;&#x2F;code&gt; value being leaked as clear text in the output.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;yaml-in-values-attribute&quot;&gt;YAML in values attribute&lt;&#x2F;h2&gt;
&lt;p&gt;As an alternative to using HCL &lt;code&gt;set&lt;&#x2F;code&gt; blocks, we can specify values in YAML or JSON by setting the &lt;code&gt;values&lt;&#x2F;code&gt; argument. In the examples below I&#x27;ll focus on YAML.&lt;&#x2F;p&gt;
&lt;p&gt;Most commonly an &lt;a href=&quot;https:&#x2F;&#x2F;developer.hashicorp.com&#x2F;terraform&#x2F;language&#x2F;expressions&#x2F;strings#heredoc-strings&quot;&gt;HCL heredoc string&lt;&#x2F;a&gt; is used. As an example we use the Istio Helm chart:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;hcl&quot; style=&quot;background-color:#282a36;color:#f8f8f2;&quot; class=&quot;language-hcl &quot;&gt;&lt;code class=&quot;language-hcl&quot; data-lang=&quot;hcl&quot;&gt;&lt;span&gt;values &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;lt;&amp;lt;EOT
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;pilot:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;  resources:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;    requests:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;      cpu: &amp;quot;100m&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;      memory: &amp;quot;100Mi&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;    limits:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;      memory: &amp;quot;100Mi&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;EOT
&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This is more compact and readable than the HCL &lt;code&gt;set&lt;&#x2F;code&gt; blocks. It also allows for easy copying and pasting of examples from Helm chart documentation or the default values files, which are written in YAML.&lt;&#x2F;p&gt;
&lt;p&gt;However, a drawback of this approach is the absence of linting, syntax highlighting, or schema validation in our editor, as the attribute is a HCL text field. This can lead to common errors like indentation errors.&lt;&#x2F;p&gt;
&lt;p&gt;One solution is to read the values from a separate YAML file:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;hcl&quot; style=&quot;background-color:#282a36;color:#f8f8f2;&quot; class=&quot;language-hcl &quot;&gt;&lt;code class=&quot;language-hcl&quot; data-lang=&quot;hcl&quot;&gt;&lt;span&gt;values &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8be9fd;&quot;&gt;file&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;${&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bd93f9;&quot;&gt;path&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bd93f9;&quot;&gt;module&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;}&#x2F;values.yaml&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This allows us to open the YAML file in our editor and get language support. Another benefit is better debugging when locally rendering the Helm chart since we can use the same values as Terraform.&lt;&#x2F;p&gt;
&lt;p&gt;The downside of this method is that it doesn&#x27;t allow for substitutions (using variables in the YAML file). This is important when we want to use the output of a Terraform resource as an input to our Helm chart resource.&lt;&#x2F;p&gt;
&lt;p&gt;To work around this we can render the YAML file as a template and pass in the values in a variable.&lt;&#x2F;p&gt;
&lt;p&gt;In the following example we create a DNS record with Cloudflare and then use the hostname output in the Grafana Helm chart YAML values:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;hcl&quot; style=&quot;background-color:#282a36;color:#f8f8f2;&quot; class=&quot;language-hcl &quot;&gt;&lt;code class=&quot;language-hcl&quot; data-lang=&quot;hcl&quot;&gt;&lt;span style=&quot;font-style:italic;color:#8be9fd;&quot;&gt;resource &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;cloudflare_record&amp;quot; &amp;quot;cluster&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt; {
&lt;&#x2F;span&gt;&lt;span&gt;  zone_id &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;000&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;  name    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;cluster&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;  value   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;192.0.2.1&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;  type    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;A&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#8be9fd;&quot;&gt;resource &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;helm_release&amp;quot; &amp;quot;grafana&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt; {
&lt;&#x2F;span&gt;&lt;span&gt;  name             &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;grafana&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;  repository       &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;https:&#x2F;&#x2F;grafana.github.io&#x2F;helm-charts&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;  chart            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;grafana&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;  version          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;7.0.0&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  values &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8be9fd;&quot;&gt;templatefile&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;values.yaml&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, {
&lt;&#x2F;span&gt;&lt;span&gt;    root_url &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;https:&#x2F;&#x2F;${cloudflare_record&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;cluster&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;hostname}&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;  })]
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The values.yaml file:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;yaml&quot; style=&quot;background-color:#282a36;color:#f8f8f2;&quot; class=&quot;language-yaml &quot;&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;grafana.ini&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;server&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;root_url&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;${root_url}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The drawback is that we now have to manage two files and coordinate changes between the HCL configuration file and the associated YAML file, which can increase the likelihood of errors.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;hcl-objects-instead-of-text&quot;&gt;HCL objects instead of text&lt;&#x2F;h2&gt;
&lt;p&gt;Another way to set values is to use HCL objects and encode them using &lt;a href=&quot;https:&#x2F;&#x2F;developer.hashicorp.com&#x2F;terraform&#x2F;language&#x2F;functions&#x2F;jsonencode&quot;&gt;jsonencode&lt;&#x2F;a&gt; or &lt;a href=&quot;https:&#x2F;&#x2F;developer.hashicorp.com&#x2F;terraform&#x2F;language&#x2F;functions&#x2F;yamlencode&quot;&gt;yamlencode&lt;&#x2F;a&gt;. It&#x27;s less verbose than &lt;code&gt;set&lt;&#x2F;code&gt; blocks, but slightly more verbose than YAML. The benefit is that it lets us keep everything in one file, allows for substitutions and have editor language support.&lt;&#x2F;p&gt;
&lt;p&gt;The following example sets the resource requests&#x2F;limits for the Istio Helm chart:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;hcl&quot; style=&quot;background-color:#282a36;color:#f8f8f2;&quot; class=&quot;language-hcl &quot;&gt;&lt;code class=&quot;language-hcl&quot; data-lang=&quot;hcl&quot;&gt;&lt;span&gt;values &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; [
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8be9fd;&quot;&gt;jsonencode&lt;&#x2F;span&gt;&lt;span&gt;({
&lt;&#x2F;span&gt;&lt;span&gt;    pilot &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; {
&lt;&#x2F;span&gt;&lt;span&gt;      resources &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; {
&lt;&#x2F;span&gt;&lt;span&gt;        requests &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; {
&lt;&#x2F;span&gt;&lt;span&gt;            cpu &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;100m&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;            memory &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;100Mi&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;          }
&lt;&#x2F;span&gt;&lt;span&gt;          limits &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; {
&lt;&#x2F;span&gt;&lt;span&gt;            memory &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;100Mi&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;          }
&lt;&#x2F;span&gt;&lt;span&gt;      }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;  })
&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The drawbacks are the same as for the other HCL blocks. The biggest issue is that we have to convert YAML code from the documentation or examples into HCL objects. This additional step can slow down the development speed and also lead to errors when doing the conversion.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;diff-output&quot;&gt;Diff output&lt;&#x2F;h2&gt;
&lt;p&gt;The most notable difference between the above methods for setting values, is the diff output when running a terraform plan.&lt;&#x2F;p&gt;
&lt;p&gt;In general the HCL &lt;code&gt;set&lt;&#x2F;code&gt; blocks will give a clear view of what has changed. The plan output when changing the memory limit value looks like this:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;hcl&quot; style=&quot;background-color:#282a36;color:#f8f8f2;&quot; class=&quot;language-hcl &quot;&gt;&lt;code class=&quot;language-hcl&quot; data-lang=&quot;hcl&quot;&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span&gt;set {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span&gt;name  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;pilot.resources.limits.memory&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; null
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span&gt;value &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;100Mi&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; null
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span&gt;set {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span&gt;name  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;pilot.resources.limits.memory&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span&gt;value &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;150Mi&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;However, the &lt;code&gt;values&lt;&#x2F;code&gt; attribute is treated as plain text and changing any value will always mark the whole attribute as changed. When changing the memory limit value the output looks like this:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;hcl&quot; style=&quot;background-color:#282a36;color:#f8f8f2;&quot; class=&quot;language-hcl &quot;&gt;&lt;code class=&quot;language-hcl&quot; data-lang=&quot;hcl&quot;&gt;&lt;span&gt;~ values &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; [
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;- &amp;lt;&amp;lt;-&lt;&#x2F;span&gt;&lt;span&gt;EOT
&lt;&#x2F;span&gt;&lt;span&gt;      pilot&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;        resources&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;          requests&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;            cpu&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;100m&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;            memory&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;100Mi&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;          limits&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;            memory&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;100Mi&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;  EOT,
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;+ &amp;lt;&amp;lt;-&lt;&#x2F;span&gt;&lt;span&gt;EOT
&lt;&#x2F;span&gt;&lt;span&gt;      pilot&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;        resources&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;          requests&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;            cpu&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;100m&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;            memory&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;100Mi&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;          limits&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;            memory&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;150Mi&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;  EOT,
&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;When reviewing code, this makes it difficult to see what the actual change was. Projects that use a pull request automation tool like &lt;a href=&quot;https:&#x2F;&#x2F;www.runatlantis.io&#x2F;&quot;&gt;Atlantis&lt;&#x2F;a&gt;, which posts the terraform plan output as a comment, will be less useful. There is an open &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;hashicorp&#x2F;terraform-provider-helm&#x2F;issues&#x2F;1121&quot;&gt;Issue&lt;&#x2F;a&gt; discussing this, but it seems to be ignored.&lt;&#x2F;p&gt;
&lt;p&gt;These are all the ways to set custom values (that I could find). Below I&#x27;ll go into two issues that I&#x27;ve found when using the provider.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;viewing-rendered-kubernetes-resources&quot;&gt;Viewing rendered Kubernetes resources&lt;&#x2F;h2&gt;
&lt;p&gt;It&#x27;s not possible to see the manifests of the generated Kubernetes resources. The provider has an experimental flag to show them, but in my testing it didn&#x27;t work for any chart and broke the deployments.&lt;&#x2F;p&gt;
&lt;p&gt;First step is to enable it in the provider:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;hcl&quot; style=&quot;background-color:#282a36;color:#f8f8f2;&quot; class=&quot;language-hcl &quot;&gt;&lt;code class=&quot;language-hcl&quot; data-lang=&quot;hcl&quot;&gt;&lt;span style=&quot;font-style:italic;color:#8be9fd;&quot;&gt;provider &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;helm&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt; {
&lt;&#x2F;span&gt;&lt;span&gt;  kubernetes {
&lt;&#x2F;span&gt;&lt;span&gt;    config_path &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;~&#x2F;.kube&#x2F;config&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  experiments {
&lt;&#x2F;span&gt;&lt;span&gt;    manifest &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bd93f9;&quot;&gt;true
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Trying to deploy the Grafana Helm chart resulted in the following error:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#282a36;color:#f8f8f2;&quot;&gt;&lt;code&gt;&lt;span&gt;$ terraform plan
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;│ Error: Provider produced inconsistent final plan
&lt;&#x2F;span&gt;&lt;span&gt;│
&lt;&#x2F;span&gt;&lt;span&gt;│ When expanding the plan for helm_release.grafana to include new values learned so far
&lt;&#x2F;span&gt;&lt;span&gt;│ during apply, provider &amp;quot;registry.terraform.io&#x2F;hashicorp&#x2F;helm&amp;quot; produced an invalid new
&lt;&#x2F;span&gt;&lt;span&gt;│ value for .manifest: was
&lt;&#x2F;span&gt;&lt;span&gt;│ cty.StringVal(&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;### ... Truncated output for readability ... ###
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;│ This is a bug in the provider, which should be reported in the provider&amp;#39;s own issue
&lt;&#x2F;span&gt;&lt;span&gt;│ tracker.
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The issue happened with all Helm charts I tested.&lt;&#x2F;p&gt;
&lt;p&gt;Seeing the generated Kubernetes resources is important, especially for security. Without this feature we can only hope&#x2F;trust that the Helm chart authors won&#x27;t include any Kubernetes resources that could be a security risk (such as an RBAC Role with too many permissions).&lt;&#x2F;p&gt;
&lt;h2 id=&quot;fixing-issues-when-client-aborts&quot;&gt;Fixing issues when client aborts&lt;&#x2F;h2&gt;
&lt;p&gt;When a client has to abort an apply (for example due to a lost network connection) the resource will be in &lt;code&gt;pending-upgrade&lt;&#x2F;code&gt; state and not allow to re-run an apply.&lt;&#x2F;p&gt;
&lt;p&gt;For example, if we installed Argo CD using the Helm provider like this:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;hcl&quot; style=&quot;background-color:#282a36;color:#f8f8f2;&quot; class=&quot;language-hcl &quot;&gt;&lt;code class=&quot;language-hcl&quot; data-lang=&quot;hcl&quot;&gt;&lt;span style=&quot;font-style:italic;color:#8be9fd;&quot;&gt;resource &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;helm_release&amp;quot; &amp;quot;argocd&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt; {
&lt;&#x2F;span&gt;&lt;span&gt;  name             &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;argocd&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;  repository       &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;https:&#x2F;&#x2F;argoproj.github.io&#x2F;argo-helm&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;  chart            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;argo-cd&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;  version          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;5.51.0&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;  namespace        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;default&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Then update the version to 5.51.1 and press Ctrl+C during the apply process:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#282a36;color:#f8f8f2;&quot;&gt;&lt;code&gt;&lt;span&gt;helm_release.argocd: Still modifying... [id=argocd, 10s elapsed]
&lt;&#x2F;span&gt;&lt;span&gt;^C
&lt;&#x2F;span&gt;&lt;span&gt;Two interrupts received. Exiting immediately. Note that data loss may have occurred.
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;│ Error: operation canceled
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Next time we run apply we get the following error:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#282a36;color:#f8f8f2;&quot;&gt;&lt;code&gt;&lt;span&gt;│ Error: another operation (install&#x2F;upgrade&#x2F;rollback) is in progress
&lt;&#x2F;span&gt;&lt;span&gt;│
&lt;&#x2F;span&gt;&lt;span&gt;│   with helm_release.argocd,
&lt;&#x2F;span&gt;&lt;span&gt;│   on main.tf line 29, in resource &amp;quot;helm_release&amp;quot; &amp;quot;argocd&amp;quot;:
&lt;&#x2F;span&gt;&lt;span&gt;│   29: resource &amp;quot;helm_release&amp;quot; &amp;quot;argocd&amp;quot; {
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We can fix this by deleting the latest secret created for this release by Helm:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#282a36;color:#f8f8f2;&quot;&gt;&lt;code&gt;&lt;span&gt;$ kubectl get secret
&lt;&#x2F;span&gt;&lt;span&gt;NAME                           TYPE                 DATA   AGE
&lt;&#x2F;span&gt;&lt;span&gt;sh.helm.release.v1.argocd.v1   helm.sh&#x2F;release.v1   1      45m
&lt;&#x2F;span&gt;&lt;span&gt;sh.helm.release.v1.argocd.v2   helm.sh&#x2F;release.v1   1      40m
&lt;&#x2F;span&gt;&lt;span&gt;sh.helm.release.v1.argocd.v3   helm.sh&#x2F;release.v1   1      32m
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;$ kubectl delete secret sh.helm.release.v1.argocd.v3
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;After that the apply process will work again. A similar error is &lt;code&gt;Error: cannot re-use a name that is still in use&lt;&#x2F;code&gt; which can be fixed in the same way.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;&#x2F;h2&gt;
&lt;p&gt;In this blog post we&#x27;ve seen how to use the Terraform Helm provider. We covered the basics on how to use it and showed how to set custom Helm chart values in different ways.&lt;&#x2F;p&gt;
&lt;p&gt;In general the provider makes the deployment of Kubernetes resources much easier than the Kubernetes provider shown in the last blog post. We don&#x27;t have to manually convert YAML to HCL, and don&#x27;t have to handle CRDs in a special way.&lt;&#x2F;p&gt;
&lt;p&gt;The provider has disadvantages and bugs. It&#x27;s not possible to see the generated Kubernetes manifests (the manifest experiment flag did not work). This makes it hard to troubleshoot issues and understand configurations. Another issue is that the &lt;code&gt;set_sensitive&lt;&#x2F;code&gt; block is leaking secrets in the terraform plan output.&lt;&#x2F;p&gt;
&lt;p&gt;The project development is not very active. All of the issues above have open Issues and PRs but have been ignored for years.&lt;&#x2F;p&gt;
&lt;p&gt;In conclusion I can&#x27;t recommend using the provider for anything beyond temporary testing environments. Alternative solutions such as Argo CD and Flux are currently the better choices.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Managing Kubernetes resources in Terraform: Kubernetes provider</title>
        <published>2023-10-20T00:00:00+00:00</published>
        <updated>2023-10-20T00:00:00+00:00</updated>
        <author>
          <name>Arthur Koziel</name>
        </author>
        <link rel="alternate" href="https://www.arthurkoziel.com/managing-kubernetes-resources-in-terraform-kubernetes-provider/" type="text/html"/>
        <id>https://www.arthurkoziel.com/managing-kubernetes-resources-in-terraform-kubernetes-provider/</id>
        
        <content type="html">&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;www.arthurkoziel.com&#x2F;managing-kubernetes-resources-in-terraform-kubernetes-provider&#x2F;title.jpeg&quot; alt=&quot;title&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Using Terraform to manage resources in Kubernetes has the following benefits, when compared to a GitOps solution such as Argo CD or Flux:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;All infrastructure is managed with one tool. Teams that already use Terraform don&#x27;t have to learn how to install, operate and maintain a separate tool to manage applications inside the Kubernetes cluster.&lt;&#x2F;li&gt;
&lt;li&gt;Changes can be done in one commit. For example, the provisioning of a database, saving the connection details in the cluster and then deploying application code that connects to the database.&lt;&#x2F;li&gt;
&lt;li&gt;Faster disaster recovery. In the worst case, we can recover everything locally using the Terraform CLI.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Hashicorp has two official Terraform providers related to managing Kubernetes resources: The &lt;a href=&quot;https:&#x2F;&#x2F;registry.terraform.io&#x2F;providers&#x2F;hashicorp&#x2F;kubernetes&#x2F;latest&#x2F;docs&quot;&gt;Kubernetes provider&lt;&#x2F;a&gt; and the &lt;a href=&quot;https:&#x2F;&#x2F;registry.terraform.io&#x2F;providers&#x2F;hashicorp&#x2F;helm&#x2F;latest&#x2F;docs&quot;&gt;Helm provider&lt;&#x2F;a&gt;. In this blog post I&#x27;ll focus on how to use the Kubernetes provider, provide examples and show pros&#x2F;cons at the end of this post.&lt;&#x2F;p&gt;
&lt;p&gt;The examples were written using Kubernetes 1.26 and Terraform 1.5.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;getting-started&quot;&gt;Getting Started&lt;&#x2F;h2&gt;
&lt;p&gt;The &lt;a href=&quot;https:&#x2F;&#x2F;registry.terraform.io&#x2F;providers&#x2F;hashicorp&#x2F;kubernetes&#x2F;latest&#x2F;docs&quot;&gt;Kubernetes provider for Terraform&lt;&#x2F;a&gt; provides resources and data sources for most of the &lt;a href=&quot;https:&#x2F;&#x2F;kubernetes.io&#x2F;docs&#x2F;reference&#x2F;generated&#x2F;kubernetes-api&#x2F;v1.28&#x2F;#api-groups&quot;&gt;Kubernetes APIs&lt;&#x2F;a&gt;. For example, the Terraform equivalent of a Kubernetes &lt;code&gt;Deployment&lt;&#x2F;code&gt; is the &lt;code&gt;kubernetes_deployment&lt;&#x2F;code&gt; resource. All of them can be seen in the providers documentation sidebar, grouped by API.&lt;&#x2F;p&gt;
&lt;p&gt;For resources that are not part of the default Kubernetes API, we need to use the &lt;code&gt;kubernetes_manifest&lt;&#x2F;code&gt; resource, which can be the HCL representation of any Kubernetes YAML manifest.&lt;&#x2F;p&gt;
&lt;p&gt;The following examples show the same Kubernetes Deployment in YAML, Terraform &lt;code&gt;kubernetes_deployment&lt;&#x2F;code&gt; and Terraform &lt;code&gt;kubernetes_manifest&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;yaml&quot; style=&quot;background-color:#282a36;color:#f8f8f2;&quot; class=&quot;language-yaml &quot;&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;apiVersion&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;apps&#x2F;v1
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;kind&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;Deployment
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;metadata&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;nginx-deployment
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;labels&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;app&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;nginx
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;spec&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;replicas&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bd93f9;&quot;&gt;3
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;selector&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;matchLabels&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;app&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;nginx
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;template&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;metadata&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;labels&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;app&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;nginx
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;spec&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;containers&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;      - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;nginx
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;image&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;nginx:1.14.2
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;ports&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;        - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;containerPort&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bd93f9;&quot;&gt;80
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The same deployment In Terraform HCL using the Kubernetes provider &lt;code&gt;kubernetes_deployment&lt;&#x2F;code&gt; resource:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;hcl&quot; style=&quot;background-color:#282a36;color:#f8f8f2;&quot; class=&quot;language-hcl &quot;&gt;&lt;code class=&quot;language-hcl&quot; data-lang=&quot;hcl&quot;&gt;&lt;span style=&quot;font-style:italic;color:#8be9fd;&quot;&gt;resource &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;kubernetes_deployment&amp;quot; &amp;quot;nginx&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt; {
&lt;&#x2F;span&gt;&lt;span&gt;  metadata {
&lt;&#x2F;span&gt;&lt;span&gt;    name      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;nginx&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  spec {
&lt;&#x2F;span&gt;&lt;span&gt;    replicas &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bd93f9;&quot;&gt;2
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    selector {
&lt;&#x2F;span&gt;&lt;span&gt;      match_labels &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; {
&lt;&#x2F;span&gt;&lt;span&gt;        app &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;nginx&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;      }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    template {
&lt;&#x2F;span&gt;&lt;span&gt;      metadata {
&lt;&#x2F;span&gt;&lt;span&gt;        labels &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; {
&lt;&#x2F;span&gt;&lt;span&gt;          app &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;nginx&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;      }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;      spec {
&lt;&#x2F;span&gt;&lt;span&gt;        container {
&lt;&#x2F;span&gt;&lt;span&gt;          image &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;nginx:1.25.2-alpine&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;          name  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;nginx&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;          port {
&lt;&#x2F;span&gt;&lt;span&gt;            container_port &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bd93f9;&quot;&gt;80
&lt;&#x2F;span&gt;&lt;span&gt;          }
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;      }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Alternatively, we can also use the &lt;code&gt;kubernetes_manifest&lt;&#x2F;code&gt; resource, which can be the HCL representation of any Kubernetes YAML manifest:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;hcl&quot; style=&quot;background-color:#282a36;color:#f8f8f2;&quot; class=&quot;language-hcl &quot;&gt;&lt;code class=&quot;language-hcl&quot; data-lang=&quot;hcl&quot;&gt;&lt;span style=&quot;font-style:italic;color:#8be9fd;&quot;&gt;resource &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;kubernetes_manifest&amp;quot; &amp;quot;deployment_nginx_deployment&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt; {
&lt;&#x2F;span&gt;&lt;span&gt;  manifest &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;quot;apiVersion&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;apps&#x2F;v1&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;quot;kind&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;Deployment&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;quot;metadata&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; {
&lt;&#x2F;span&gt;&lt;span&gt;      &amp;quot;labels&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; {
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;quot;app&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;nginx&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;      }
&lt;&#x2F;span&gt;&lt;span&gt;      &amp;quot;name&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;nginx&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;quot;spec&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; {
&lt;&#x2F;span&gt;&lt;span&gt;      &amp;quot;replicas&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bd93f9;&quot;&gt;2
&lt;&#x2F;span&gt;&lt;span&gt;      &amp;quot;selector&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; {
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;quot;matchLabels&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; {
&lt;&#x2F;span&gt;&lt;span&gt;          &amp;quot;app&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;nginx&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;      }
&lt;&#x2F;span&gt;&lt;span&gt;      &amp;quot;template&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; {
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;quot;metadata&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; {
&lt;&#x2F;span&gt;&lt;span&gt;          &amp;quot;labels&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; {
&lt;&#x2F;span&gt;&lt;span&gt;            &amp;quot;app&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;nginx&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;          }
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;quot;spec&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; {
&lt;&#x2F;span&gt;&lt;span&gt;          &amp;quot;containers&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; [
&lt;&#x2F;span&gt;&lt;span&gt;            {
&lt;&#x2F;span&gt;&lt;span&gt;              &amp;quot;image&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;nginx:1.25.2-alpine&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;              &amp;quot;name&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;nginx&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;              &amp;quot;ports&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; [
&lt;&#x2F;span&gt;&lt;span&gt;                {
&lt;&#x2F;span&gt;&lt;span&gt;                  &amp;quot;containerPort&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bd93f9;&quot;&gt;80
&lt;&#x2F;span&gt;&lt;span&gt;                },
&lt;&#x2F;span&gt;&lt;span&gt;              ]
&lt;&#x2F;span&gt;&lt;span&gt;            },
&lt;&#x2F;span&gt;&lt;span&gt;          ]
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;      }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Both of the HCL versions result in the same deployment, but using &lt;code&gt;kubernetes_deployment&lt;&#x2F;code&gt; is less verbose and Terraform will do basic validation on the values (like checking if &lt;code&gt;replicas&lt;&#x2F;code&gt; is an integer). But as mentioned above, for custom resources, we have no other option than using &lt;code&gt;kubernetes_manifest&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Rather than just a single Deployment, we&#x27;re going to install &lt;a href=&quot;https:&#x2F;&#x2F;istio.io&quot;&gt;Istio&lt;&#x2F;a&gt; as a real-world example. It requires custom resource definitions (CRDs) and various resources (RBAC, ServiceAccounts, ConfigMaps etc.) for the istio daemon to be deployed.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;installing-istio&quot;&gt;Installing Istio&lt;&#x2F;h2&gt;
&lt;p&gt;As most Kubernetes resources are distributed in YAML, the first step is always the conversion to Terraform HCL. The Istio YAML manifests for the default profile are around 10,000 lines long and contain 47 Kubernetes resources. Doing the conversion manually would take too long.&lt;&#x2F;p&gt;
&lt;p&gt;To automate the conversion, we can use &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;jrhouston&#x2F;tfk8s&quot;&gt;tfk8s&lt;&#x2F;a&gt;. Here are the commands to generate the Istio YAML manifests and convert them to HCL:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#282a36;color:#f8f8f2;&quot;&gt;&lt;code&gt;&lt;span&gt;$ istioctl manifest generate &amp;gt; istio.yaml
&lt;&#x2F;span&gt;&lt;span&gt;$ tfk8s -f istio.yaml &amp;gt; istio.tf
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;crds-module&quot;&gt;CRDs module&lt;&#x2F;h3&gt;
&lt;p&gt;A good practice when deploying applications that have CRDs is to put them into its own Terraform module. When applying the Kubernetes provider does not make a difference between custom resources and core resources, which could lead to the case where it tries to deploy a custom resource when the definition hasn&#x27;t been installed yet.&lt;&#x2F;p&gt;
&lt;p&gt;For our Istio installation we have to (manually) split the istio.tf file into two files, where one of them contains the CRDs. We put them into their own Terraform modules: &lt;code&gt;istio&lt;&#x2F;code&gt; and &lt;code&gt;istio-crds&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;The directory tree should look like this:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#282a36;color:#f8f8f2;&quot;&gt;&lt;code&gt;&lt;span&gt;.
&lt;&#x2F;span&gt;&lt;span&gt;├── istio
&lt;&#x2F;span&gt;&lt;span&gt;│   └── main.tf
&lt;&#x2F;span&gt;&lt;span&gt;├── istio-crds
&lt;&#x2F;span&gt;&lt;span&gt;│   └── main.tf
&lt;&#x2F;span&gt;&lt;span&gt;├── main.tf
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;In the root &lt;code&gt;main.tf&lt;&#x2F;code&gt; file, we can add a dependency between them, so that the CRDs will be installed first:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;hcl&quot; style=&quot;background-color:#282a36;color:#f8f8f2;&quot; class=&quot;language-hcl &quot;&gt;&lt;code class=&quot;language-hcl&quot; data-lang=&quot;hcl&quot;&gt;&lt;span style=&quot;font-style:italic;color:#8be9fd;&quot;&gt;module &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;istio-crds&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt; {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;source = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;.&#x2F;istio-crds&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#8be9fd;&quot;&gt;module &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;istio&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt; {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;source = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;.&#x2F;istio&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;depends_on =&lt;&#x2F;span&gt;&lt;span&gt; [
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bd93f9;&quot;&gt;module&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;istio&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;crds
&lt;&#x2F;span&gt;&lt;span&gt;  ]
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We also need to add the namespace to the &lt;code&gt;main&#x2F;istio.tf&lt;&#x2F;code&gt; file, as it is not created automatically:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;hcl&quot; style=&quot;background-color:#282a36;color:#f8f8f2;&quot; class=&quot;language-hcl &quot;&gt;&lt;code class=&quot;language-hcl&quot; data-lang=&quot;hcl&quot;&gt;&lt;span style=&quot;font-style:italic;color:#8be9fd;&quot;&gt;resource &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;kubernetes_namespace&amp;quot; &amp;quot;istio_system&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt; {
&lt;&#x2F;span&gt;&lt;span&gt;  metadata {
&lt;&#x2F;span&gt;&lt;span&gt;    name &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;istio-system&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Running a &lt;code&gt;terraform apply&lt;&#x2F;code&gt; at this point will not succeed and show many errors. I&#x27;ve not included them in this post because the output is too long, but they can be grouped into the following two main issues.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;inconsistent-result-error&quot;&gt;Inconsistent result error&lt;&#x2F;h3&gt;
&lt;pre style=&quot;background-color:#282a36;color:#f8f8f2;&quot;&gt;&lt;code&gt;&lt;span&gt;Error: Provider produced inconsistent result after apply
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;When applying changes to kubernetes_manifest.deployment_istio_system_istiod, provider
&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;provider[\&amp;quot;registry.terraform.io&#x2F;hashicorp&#x2F;kubernetes\&amp;quot;]&amp;quot; produced an unexpected new value:
&lt;&#x2F;span&gt;&lt;span&gt;.object.spec.template.spec.containers[0].resources.requests[&amp;quot;memory&amp;quot;]: was cty.StringVal(&amp;quot;2048Mi&amp;quot;), but now
&lt;&#x2F;span&gt;&lt;span&gt;cty.StringVal(&amp;quot;2Gi&amp;quot;).
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;This is a bug in the provider, which should be reported in the provider&amp;#39;s own issue tracker.
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The Deployment specifies a memory request of &lt;code&gt;2048Mi&lt;&#x2F;code&gt; and the Kubernetes API reports it back as &lt;code&gt;2Gi&lt;&#x2F;code&gt;, to make it easier to read. The Kubernetes provider does not handle this case, so the fix is to change the value in the istio.tf file to be &lt;code&gt;2Gi&lt;&#x2F;code&gt;. &lt;&#x2F;p&gt;
&lt;p&gt;In the same file, there are also two other cases where the value needs to be changed. The memory from &lt;code&gt;1024Mi&lt;&#x2F;code&gt; to &lt;code&gt;1Gi&lt;&#x2F;code&gt;, and the CPU from &lt;code&gt;2000m&lt;&#x2F;code&gt; to &lt;code&gt;2&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;null-value-conversion-error&quot;&gt;Null value conversion error&lt;&#x2F;h3&gt;
&lt;pre style=&quot;background-color:#282a36;color:#f8f8f2;&quot;&gt;&lt;code&gt;&lt;span&gt;Error: API response status: Failure
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  with kubernetes_manifest.deployment_istio_system_istio_ingressgateway,
&lt;&#x2F;span&gt;&lt;span&gt;  on istio.tf line 14211, in resource &amp;quot;kubernetes_manifest&amp;quot; &amp;quot;deployment_istio_system_istio_ingressgateway&amp;quot;:
&lt;&#x2F;span&gt;&lt;span&gt;14211: resource &amp;quot;kubernetes_manifest&amp;quot; &amp;quot;deployment_istio_system_istio_ingressgateway&amp;quot; {
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;Deployment.apps &amp;quot;istio-ingressgateway&amp;quot; is invalid:
&lt;&#x2F;span&gt;&lt;span&gt;spec.template.spec.affinity.nodeAffinity.requiredDuringSchedulingIgnoredDuringExecution.nodeSelectorTerms: Required value: must
&lt;&#x2F;span&gt;&lt;span&gt;have at least one node selector term
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The problem is with the conversion of null values. For example, this YAML:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;yaml&quot; style=&quot;background-color:#282a36;color:#f8f8f2;&quot; class=&quot;language-yaml &quot;&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;affinity&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;nodeAffinity&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;requiredDuringSchedulingIgnoredDuringExecution&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;preferredDuringSchedulingIgnoredDuringExecution&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;which was converted to:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;hcl&quot; style=&quot;background-color:#282a36;color:#f8f8f2;&quot; class=&quot;language-hcl &quot;&gt;&lt;code class=&quot;language-hcl&quot; data-lang=&quot;hcl&quot;&gt;&lt;span&gt;&amp;quot;affinity&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; {
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;quot;nodeAffinity&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;quot;preferredDuringSchedulingIgnoredDuringExecution&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; null
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;quot;requiredDuringSchedulingIgnoredDuringExecution&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; null
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The original YAML file will apply successfully with kubectl because it removes fields with empty values. But the Kubernetes provider for Terraform doesn&#x27;t work in the same way. When we set the value to &lt;code&gt;null&lt;&#x2F;code&gt;, it will send the empty field to the Kubernetes API, resulting in the above error. &lt;&#x2F;p&gt;
&lt;p&gt;To fix it we have to remove all keys with &lt;code&gt;null&lt;&#x2F;code&gt; values from the HCL file. I&#x27;ve submitted a &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;jrhouston&#x2F;tfk8s&#x2F;issues&#x2F;61&quot;&gt;feature request&lt;&#x2F;a&gt; to tfk8s to remove them automatically.&lt;&#x2F;p&gt;
&lt;p&gt;After the removal, we can apply successfully:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#282a36;color:#f8f8f2;&quot;&gt;&lt;code&gt;&lt;span&gt;$ terraform apply
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;**Apply complete! Resources: 48 added, 0 changed, 0 destroyed.**
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;re-apply-issues&quot;&gt;Re-apply issues&lt;&#x2F;h3&gt;
&lt;p&gt;But when we run plan again it will show us two changes, even if we didn&#x27;t change anything:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;hcl&quot; style=&quot;background-color:#282a36;color:#f8f8f2;&quot; class=&quot;language-hcl &quot;&gt;&lt;code class=&quot;language-hcl&quot; data-lang=&quot;hcl&quot;&gt;&lt;span&gt;Terraform will perform the following actions&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6272a4;&quot;&gt;# module.istio.kubernetes_manifest.service_istio_system_istio_ingressgateway will be updated in-place
&lt;&#x2F;span&gt;&lt;span&gt;  ~ &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#8be9fd;&quot;&gt;resource &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;kubernetes_manifest&amp;quot; &amp;quot;service_istio_system_istio_ingressgateway&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt; {
&lt;&#x2F;span&gt;&lt;span&gt;      ~ object   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; {
&lt;&#x2F;span&gt;&lt;span&gt;          ~ metadata   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; {
&lt;&#x2F;span&gt;&lt;span&gt;              &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span&gt;annotations                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; (known after apply)
&lt;&#x2F;span&gt;&lt;span&gt;                name                       &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;istio-ingressgateway&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6272a4;&quot;&gt;# (13 unchanged attributes hidden)
&lt;&#x2F;span&gt;&lt;span&gt;            }
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6272a4;&quot;&gt;# (3 unchanged attributes hidden)
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6272a4;&quot;&gt;# (1 unchanged attribute hidden)
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6272a4;&quot;&gt;# module.istio.kubernetes_manifest.validatingwebhookconfiguration_istio_validator_istio_system will be updated in-place
&lt;&#x2F;span&gt;&lt;span&gt;  ~ &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#8be9fd;&quot;&gt;resource &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;kubernetes_manifest&amp;quot; &amp;quot;validatingwebhookconfiguration_istio_validator_istio_system&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt; {
&lt;&#x2F;span&gt;&lt;span&gt;      ~ object   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; {
&lt;&#x2F;span&gt;&lt;span&gt;          ~ webhooks   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; [
&lt;&#x2F;span&gt;&lt;span&gt;              ~ {
&lt;&#x2F;span&gt;&lt;span&gt;                  ~ failurePolicy           &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;Fail&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;Ignore&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;                    name                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;rev.validation.istio.io&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6272a4;&quot;&gt;# (9 unchanged attributes hidden)
&lt;&#x2F;span&gt;&lt;span&gt;                },
&lt;&#x2F;span&gt;&lt;span&gt;            ]
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6272a4;&quot;&gt;# (3 unchanged attributes hidden)
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6272a4;&quot;&gt;# (1 unchanged attribute hidden)
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;Plan&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bd93f9;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt; to add, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bd93f9;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt; to change, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bd93f9;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt; to destroy&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;.
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Trying to apply these changes will fail with the following error:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#282a36;color:#f8f8f2;&quot;&gt;&lt;code&gt;&lt;span&gt;Error: There was a field manager conflict when trying to apply the manifest for &amp;quot;&#x2F;istio-validator-istio-system&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  with module.istio.kubernetes_manifest.validatingwebhookconfiguration_istio_validator_istio_system,
&lt;&#x2F;span&gt;&lt;span&gt;  on istio&#x2F;main.tf line 1173, in resource &amp;quot;kubernetes_manifest&amp;quot; &amp;quot;validatingwebhookconfiguration_istio_validator_istio_system&amp;quot;:
&lt;&#x2F;span&gt;&lt;span&gt;1173: resource &amp;quot;kubernetes_manifest&amp;quot; &amp;quot;validatingwebhookconfiguration_istio_validator_istio_system&amp;quot; {
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;The API returned the following conflict: &amp;quot;Apply failed with 1 conflict: conflict with \&amp;quot;pilot-discovery\&amp;quot; using
&lt;&#x2F;span&gt;&lt;span&gt;admissionregistration.k8s.io&#x2F;v1: .webhooks[name=\&amp;quot;rev.validation.istio.io\&amp;quot;].failurePolicy&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;You can override this conflict by setting &amp;quot;force_conflicts&amp;quot; to true in the &amp;quot;field_manager&amp;quot; block.
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The suggested fix by setting &lt;code&gt;force_conflicts = true&lt;&#x2F;code&gt; is not a good solution. It will allow us to apply the plan, but always show the same changes on every plan output.&lt;&#x2F;p&gt;
&lt;p&gt;The cause of the issue can be found by looking at the Istio YAML manifests, which have the following comment:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;yaml&quot; style=&quot;background-color:#282a36;color:#f8f8f2;&quot; class=&quot;language-yaml &quot;&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span style=&quot;color:#6272a4;&quot;&gt;# Fail open until the validation webhook is ready. The webhook controller
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6272a4;&quot;&gt;# will update this to `Fail` and patch in the `caBundle` when the webhook
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6272a4;&quot;&gt;# endpoint is ready.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;failurePolicy&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;Ignore
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The issue is that the Istio webhook controller will change the failurePolicy after the deployment, but this state change is not reflected in the Terraform state.&lt;&#x2F;p&gt;
&lt;p&gt;To fix it we can comment out the failurePolicy in the &lt;code&gt;ValidatingWebhookConfiguration&lt;&#x2F;code&gt;, which will set it to &lt;code&gt;Fail&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;hcl&quot; style=&quot;background-color:#282a36;color:#f8f8f2;&quot; class=&quot;language-hcl &quot;&gt;&lt;code class=&quot;language-hcl&quot; data-lang=&quot;hcl&quot;&gt;&lt;span style=&quot;color:#6272a4;&quot;&gt;# shortened example
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#8be9fd;&quot;&gt;resource &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;kubernetes_manifest&amp;quot; &amp;quot;validatingwebhookconfiguration_istio_validator_istio_system&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt; {
&lt;&#x2F;span&gt;&lt;span&gt;  manifest &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;quot;apiVersion&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;admissionregistration.k8s.io&#x2F;v1&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;quot;kind&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;ValidatingWebhookConfiguration&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;quot;webhooks&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; [
&lt;&#x2F;span&gt;&lt;span&gt;      {
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;quot;name&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;rev.validation.istio.io&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6272a4;&quot;&gt;&#x2F;&#x2F; &amp;quot;failurePolicy&amp;quot; = &amp;quot;Ignore&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;      }
&lt;&#x2F;span&gt;&lt;span&gt;    ]
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Now running &lt;code&gt;terraform plan&lt;&#x2F;code&gt; will show us no changes. The installation is complete and we have successfully installed Istio using the Kubernetes provider.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;&#x2F;h2&gt;
&lt;p&gt;The Terraform Kubernetes provider is a good option for managing application deployments in the following cases:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Small team with simple infrastructure&lt;&#x2F;li&gt;
&lt;li&gt;Write custom and minimal deployment specifications for third party applications.&lt;&#x2F;li&gt;
&lt;li&gt;Infrequently update applications&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;For larger, production deployments I wouldn&#x27;t consider it a good option:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;The YAML to HCL conversion takes too long. Tools like tfk8s are helpful, but not perfect. Getting it to apply successfully requires trial and error.&lt;&#x2F;li&gt;
&lt;li&gt;Upgrading to a new version is difficult. The whole process of converting and fixing has to be repeated.&lt;&#x2F;li&gt;
&lt;li&gt;Running terraform plan takes too long. It&#x27;s easy to have over 100 resources to manage after installing a few third party applications. (We could use the &lt;code&gt;-target&lt;&#x2F;code&gt; option, but then always need to find the right resource names).&lt;&#x2F;li&gt;
&lt;li&gt;Constant fixing of Terraform state. Both tools manage their own state, and Kubernetes constantly reconciles. Any changes in the Kubernetes state need to be manually changed in the Terraform state. See above example, where Istio patches Kubernetes resources after the deployment, and Terraform always tries to revert them.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;In my next blog post I&#x27;m going to cover the &lt;a href=&quot;https:&#x2F;&#x2F;registry.terraform.io&#x2F;providers&#x2F;hashicorp&#x2F;helm&#x2F;latest&#x2F;docs&quot;&gt;Terraform Helm provider&lt;&#x2F;a&gt;, which makes it easier to install third party applications, but also comes with a few downsides.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Creating an Argo CD service account</title>
        <published>2023-01-30T00:00:00+00:00</published>
        <updated>2023-01-30T00:00:00+00:00</updated>
        <author>
          <name>Arthur Koziel</name>
        </author>
        <link rel="alternate" href="https://www.arthurkoziel.com/creating-argo-cd-service-account/" type="text/html"/>
        <id>https://www.arthurkoziel.com/creating-argo-cd-service-account/</id>
        
        <content type="html">&lt;p&gt;This blog post shows how to create an Argo CD service account. The account will only be able to authenticate via API and not the Web UI. &lt;&#x2F;p&gt;
&lt;p&gt;Having an account like this is useful in CI environments or other automated programs that need to interact with the Argo CD Server API.&lt;&#x2F;p&gt;
&lt;p&gt;The versions used are Argo CD v2.5.9 and the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;argoproj&#x2F;argo-helm&#x2F;tree&#x2F;main&#x2F;charts&#x2F;argo-cd&quot;&gt;Argo CD Helm Chart&lt;&#x2F;a&gt; v5.17.0.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;create-user-account&quot;&gt;Create User Account&lt;&#x2F;h2&gt;
&lt;p&gt;The first thing we do is to create an account in Argo CD. In the Helm chart &lt;code&gt;values.yaml&lt;&#x2F;code&gt; we do this by setting the following values:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;yaml&quot; style=&quot;background-color:#282a36;color:#f8f8f2;&quot; class=&quot;language-yaml &quot;&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;argo-cd&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;configs&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;cm&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;accounts.gh_actions&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;apiKey
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;rbac&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;policy.csv&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;|
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;        p, gh_actions, applications, get, *&#x2F;*, allow
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The name of the account can be specified by setting &lt;code&gt;accounts.&amp;lt;name&amp;gt;&lt;&#x2F;code&gt;. For this example post, we name the account &lt;code&gt;gh_actions&lt;&#x2F;code&gt; and grant it permissions to get all applications.&lt;&#x2F;p&gt;
&lt;p&gt;However, we cannot use this account yet. To do this, we need to create a token for the account. The token can then be used to authenticate with the API.&lt;&#x2F;p&gt;
&lt;p&gt;Make sure to sync the Helm chart deployment. After that, we can check that the account was created and generate a token by using the Argo CD CLI.&lt;&#x2F;p&gt;
&lt;p&gt;First we log in with our &lt;code&gt;admin&lt;&#x2F;code&gt; account:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#282a36;color:#f8f8f2;&quot;&gt;&lt;code&gt;&lt;span&gt;$ kubectl run --rm -it --image=argoproj&#x2F;argocd:v2.5.9 sh
&lt;&#x2F;span&gt;&lt;span&gt;$ argocd login --insecure argocd-server.argocd.svc.cluster.local
&lt;&#x2F;span&gt;&lt;span&gt;WARNING: server is not configured with TLS. Proceed (y&#x2F;n)? y
&lt;&#x2F;span&gt;&lt;span&gt;Username: admin
&lt;&#x2F;span&gt;&lt;span&gt;Password: 
&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;admin:login&amp;#39; logged in successfully
&lt;&#x2F;span&gt;&lt;span&gt;Context &amp;#39;argocd-server.argocd.svc.cluster.local&amp;#39; updated
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Then we can check if the user was created:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#282a36;color:#f8f8f2;&quot;&gt;&lt;code&gt;&lt;span&gt;$ argocd account get --account gh_actions
&lt;&#x2F;span&gt;&lt;span&gt;Name:               gh_actions
&lt;&#x2F;span&gt;&lt;span&gt;Enabled:            true
&lt;&#x2F;span&gt;&lt;span&gt;Capabilities:       apiKey
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;Tokens:
&lt;&#x2F;span&gt;&lt;span&gt;NONE
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Next, we create a token for the user account:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#282a36;color:#f8f8f2;&quot;&gt;&lt;code&gt;&lt;span&gt;$ argocd account generate-token --account gh_actions
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The command will output the token that is used to authenticate with the API. Make sure to save it somewhere, as it can&#x27;t be displayed again.&lt;&#x2F;p&gt;
&lt;p&gt;Logout from the &lt;code&gt;admin&lt;&#x2F;code&gt; account. When using API tokens, we don&#x27;t have to use the login anymore and can provide the token via CLI argument.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#282a36;color:#f8f8f2;&quot;&gt;&lt;code&gt;&lt;span&gt;$ argocd logout argocd-server.argocd.svc.cluster.local
&lt;&#x2F;span&gt;&lt;span&gt;Logged out from &amp;#39;argocd-server.argocd.svc.cluster.local&amp;#39;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;testing-the-api-token&quot;&gt;Testing the API token&lt;&#x2F;h2&gt;
&lt;p&gt;To test that the token works, we can run the following command to list all Applications in the cluster. Replace &lt;code&gt;&amp;lt;mytoken&amp;gt;&lt;&#x2F;code&gt; with the real token from above:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#282a36;color:#f8f8f2;&quot;&gt;&lt;code&gt;&lt;span&gt;$ argocd --server argocd-server.argocd.svc.cluster.local --plaintext --auth-token &amp;lt;mytoken&amp;gt; app list
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;If your Argo CD server is behind an HTTP proxy with TLS, you need to use &lt;code&gt;--grpc-web&lt;&#x2F;code&gt; instead of &lt;code&gt;--plaintext&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Fixing Argo CD &quot;Too long must have at most 262144 bytes&quot; error</title>
        <published>2022-10-28T00:00:00+00:00</published>
        <updated>2022-10-28T00:00:00+00:00</updated>
        <author>
          <name>Arthur Koziel</name>
        </author>
        <link rel="alternate" href="https://www.arthurkoziel.com/fixing-argocd-crd-too-long-error/" type="text/html"/>
        <id>https://www.arthurkoziel.com/fixing-argocd-crd-too-long-error/</id>
        
        <content type="html">&lt;p&gt;In this post, I&#x27;ll explain how to fix the &lt;code&gt;&amp;quot;Too long: must have at most 262144 bytes&amp;quot;&lt;&#x2F;code&gt; error in Argo CD. It often appears when trying to sync a Helm chart that includes large CRDs such as 
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;prometheus-community&#x2F;helm-charts&#x2F;tree&#x2F;main&#x2F;charts&#x2F;kube-prometheus-stack&quot;&gt;kube-prometheus-stack&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;problem&quot;&gt;Problem&lt;&#x2F;h2&gt;
&lt;p&gt;Kubernetes objects have a fixed size limit of 256kb for
annotations. When using &lt;code&gt;kubectl apply&lt;&#x2F;code&gt; to update resources (which Argo CD does) it tries to
set a &lt;code&gt;last-applied-configuration&lt;&#x2F;code&gt; annotation that contains the JSON
representation of the last applied object configuration.&lt;&#x2F;p&gt;
&lt;p&gt;For example, if we have a Deployment object that we update with &lt;code&gt;kubectl apply&lt;&#x2F;code&gt;, the &lt;code&gt;last-applied-configuration&lt;&#x2F;code&gt; annotation will contain the JSON
serialized format of the whole Deployment object:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;yaml&quot; style=&quot;background-color:#282a36;color:#f8f8f2;&quot; class=&quot;language-yaml &quot;&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;apiVersion&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;apps&#x2F;v1
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;kind&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;Deployment
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;metadata&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;annotations&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;kubectl.kubernetes.io&#x2F;last-applied-configuration&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;|
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;      {&amp;quot;apiVersion&amp;quot;:&amp;quot;apps&#x2F;v1&amp;quot;,&amp;quot;kind&amp;quot;:&amp;quot;Deployment&amp;quot;, &amp;quot;metadata&amp;quot;:{}, ...}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This is not a problem for most resources, but there are objects which go over
the 256kb limit, such as the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;prometheus-community&#x2F;helm-charts&#x2F;blob&#x2F;main&#x2F;charts&#x2F;kube-prometheus-stack&#x2F;crds&#x2F;crd-prometheuses.yaml&quot;&gt;Prometheus
CRD&lt;&#x2F;a&gt;
from the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;prometheus-community&#x2F;helm-charts&#x2F;tree&#x2F;main&#x2F;charts&#x2F;kube-prometheus-stack&quot;&gt;kube-prometheus-stack&lt;&#x2F;a&gt; Helm chart, which is 500kb in size. &lt;&#x2F;p&gt;
&lt;p&gt;Syncing the &lt;code&gt;Prometheus&lt;&#x2F;code&gt; CRD in Argo CD will run &lt;code&gt;kubectl apply&lt;&#x2F;code&gt; and try to add the 500kb JSON representation of it as an annotation. This
will then result in the &lt;code&gt;&amp;quot;Too long: must have at most 262144 bytes&amp;quot;&lt;&#x2F;code&gt; error as
it goes over the Kubernetes annotations size limit of 256kb (or, 262144 bytes).&lt;&#x2F;p&gt;
&lt;h2 id=&quot;solution&quot;&gt;Solution&lt;&#x2F;h2&gt;
&lt;p&gt;The solution is to stop using Client Side Apply (the current default when running &lt;code&gt;kubectl apply&lt;&#x2F;code&gt;) and instead use &lt;a href=&quot;https:&#x2F;&#x2F;kubernetes.io&#x2F;docs&#x2F;reference&#x2F;using-api&#x2F;server-side-apply&#x2F;&quot;&gt;Server Side
Apply&lt;&#x2F;a&gt; which
will not add the &lt;code&gt;last-applied-configuration&lt;&#x2F;code&gt; annotation to objects.&lt;&#x2F;p&gt;
&lt;p&gt;Server Side Apply is planned to be the default apply method in future Kubernetes and Argo CD versions, but for now we have to explicitly enable it. &lt;&#x2F;p&gt;
&lt;p&gt;Support for Server Side Apply was added in Argo CD v2.5 and can be enabled by
setting it in the sync options for an Application resource:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;yaml&quot; style=&quot;background-color:#282a36;color:#f8f8f2;&quot; class=&quot;language-yaml &quot;&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;apiVersion&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;argoproj.io&#x2F;v1alpha1
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;kind&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;Application
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;spec&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;syncPolicy&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;syncOptions&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;ServerSideApply=true
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Argo CD versions lower than v2.5 don&#x27;t have support for Server Side Apply. In
these cases, we can fall back to using &lt;code&gt;kubectl replace&lt;&#x2F;code&gt; to update the object.
We can do this by setting the &lt;code&gt;Replace=true&lt;&#x2F;code&gt; sync option. But be aware that replace
can lead to unexpected results when you have multiple clients modifying an
object.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Sync AWS Secrets Manager to Kubernetes Secrets</title>
        <published>2022-09-28T00:00:00+00:00</published>
        <updated>2022-09-28T00:00:00+00:00</updated>
        <author>
          <name>Arthur Koziel</name>
        </author>
        <link rel="alternate" href="https://www.arthurkoziel.com/sync-aws-secrets-manager-to-k8s-secrets/" type="text/html"/>
        <id>https://www.arthurkoziel.com/sync-aws-secrets-manager-to-k8s-secrets/</id>
        
        <content type="html">&lt;p&gt;In this blog post I&#x27;ll describe how to automatically sync an &lt;a href=&quot;https:&#x2F;&#x2F;aws.amazon.com&#x2F;secrets-manager&#x2F;&quot;&gt;AWS Secrets Manager&lt;&#x2F;a&gt; secret to a Kubernetes &lt;code&gt;Secret&lt;&#x2F;code&gt; object.&lt;&#x2F;p&gt;
&lt;p&gt;We&#x27;ll create an example that will expose the Secrets Manager secret as an environment variable in a Pod&#x27;s container. &lt;&#x2F;p&gt;
&lt;h2 id=&quot;installation&quot;&gt;Installation&lt;&#x2F;h2&gt;
&lt;p&gt;There are two components which we&#x27;ll need to install on the Kubernetes cluster:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;secrets-store-csi-driver.sigs.k8s.io&quot;&gt;Secrets Store CSI driver&lt;&#x2F;a&gt;: Integrates secrets stores with Kubernetes&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;aws&#x2F;secrets-store-csi-driver-provider-aws&quot;&gt;AWS provider for the Secrets Store CSI Driver&lt;&#x2F;a&gt;: Provider for the Secrets Store CSI driver that integrates with AWS Secrets Manager&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Both come with an official Helm chart that we&#x27;ll use.&lt;&#x2F;p&gt;
&lt;p&gt;First we&#x27;ll install the Secrets Store CSI driver. The &lt;em&gt;Sync as Kubernetes secret&lt;&#x2F;em&gt; feature is disabled by default. We can enable it in the Helm values file with:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;yaml&quot; style=&quot;background-color:#282a36;color:#f8f8f2;&quot; class=&quot;language-yaml &quot;&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;syncSecret&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;enabled&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bd93f9;&quot;&gt;true
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Then we add the Helm repo and install the chart:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#282a36;color:#f8f8f2;&quot;&gt;&lt;code&gt;&lt;span&gt;$ helm repo add secrets-store-csi-driver \
&lt;&#x2F;span&gt;&lt;span&gt;    https:&#x2F;&#x2F;kubernetes-sigs.github.io&#x2F;secrets-store-csi-driver&#x2F;charts
&lt;&#x2F;span&gt;&lt;span&gt;$ helm install csi-secrets-store \
&lt;&#x2F;span&gt;&lt;span&gt;    secrets-store-csi-driver&#x2F;secrets-store-csi-driver -f values.yaml
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The Secrets Store CSI driver by itself is just an interface for providers (AWS, GCP, Azure, Vault, etc.) to integrate with. To use AWS Secrets Manager we also need to install the AWS Provider:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#282a36;color:#f8f8f2;&quot;&gt;&lt;code&gt;&lt;span&gt;$ helm repo add eks https:&#x2F;&#x2F;aws.github.io&#x2F;eks-charts
&lt;&#x2F;span&gt;&lt;span&gt;$ helm install csi-secrets-store-provider-aws eks&#x2F;csi-secrets-store-provider-aws
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;create-a-secret-in-secrets-manager&quot;&gt;Create a secret in Secrets Manager&lt;&#x2F;h2&gt;
&lt;p&gt;Next we create a secret in AWS Secrets Manager that we&#x27;ll use for testing. We name it &lt;code&gt;CSI-driver-test-secret&lt;&#x2F;code&gt; with the secret value &lt;code&gt;secretkey&lt;&#x2F;code&gt;. Using the &lt;a href=&quot;https:&#x2F;&#x2F;aws.amazon.com&#x2F;cli&#x2F;&quot;&gt;AWS CLI&lt;&#x2F;a&gt; we run:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#282a36;color:#f8f8f2;&quot;&gt;&lt;code&gt;&lt;span&gt;$ aws --region us-east-1 secretsmanager \
&lt;&#x2F;span&gt;&lt;span&gt;    create-secret \
&lt;&#x2F;span&gt;&lt;span&gt;    --name CSI-driver-test-secret \
&lt;&#x2F;span&gt;&lt;span&gt;    --secret-string &amp;#39;secretkey&amp;#39;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The output is a JSON document with information about the created secret. The &lt;code&gt;ARN&lt;&#x2F;code&gt; value is important for the next step.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;json&quot; style=&quot;background-color:#282a36;color:#f8f8f2;&quot; class=&quot;language-json &quot;&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eeeeee;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;ARN&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eeeeee;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eeeeee;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;arn:aws:secretsmanager:us-east-1:123456:secret:CSI-driver-test-secret-sWJ9Yz&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eeeeee;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eeeeee;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;Name&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eeeeee;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eeeeee;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;CSI-driver-test-secret&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eeeeee;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eeeeee;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;VersionId&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eeeeee;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eeeeee;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;123-123-123-123&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eeeeee;&quot;&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;create-an-aws-iam-policy&quot;&gt;Create an AWS IAM Policy&lt;&#x2F;h2&gt;
&lt;p&gt;We need to create an IAM Policy that allows an IAM Role (that we create in the next step) to access the secret that we just created. The &lt;code&gt;Resource&lt;&#x2F;code&gt; field in the Policy document needs to contain the ARN from the previous step:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#282a36;color:#f8f8f2;&quot;&gt;&lt;code&gt;&lt;span&gt;$ aws --region us-east-1 \
&lt;&#x2F;span&gt;&lt;span&gt;    --query Policy.Arn \
&lt;&#x2F;span&gt;&lt;span&gt;    --output text iam create-policy \
&lt;&#x2F;span&gt;&lt;span&gt;    --policy-name deployment-policy \
&lt;&#x2F;span&gt;&lt;span&gt;    --policy-document &amp;#39;{
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;quot;Version&amp;quot;: &amp;quot;2012-10-17&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;quot;Statement&amp;quot;: [ {
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;quot;Effect&amp;quot;: &amp;quot;Allow&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;quot;Action&amp;quot;: [&amp;quot;secretsmanager:GetSecretValue&amp;quot;, &amp;quot;secretsmanager:DescribeSecret&amp;quot;],
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;quot;Resource&amp;quot;: [&amp;quot;arn:aws:secretsmanager:us-east-1:123456:secret:CSI-driver-test-secret-sWJ9Yz&amp;quot;]
&lt;&#x2F;span&gt;&lt;span&gt;    } ] }&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;arn:aws:iam::123456:policy&#x2F;deployment-policy
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The output of this command is the IAM Policy ARN. We&#x27;ll need it in the next step.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;aws-iam-role-and-kubernetes-service-account&quot;&gt;AWS IAM Role and Kubernetes Service Account&lt;&#x2F;h2&gt;
&lt;p&gt;Next we create an IAM Role that has the previously created IAM Policy attached. Then we create a Kubernetes &lt;code&gt;ServiceAccount&lt;&#x2F;code&gt; object that has the IAM Role&#x27;s ARN as an annotation.&lt;&#x2F;p&gt;
&lt;p&gt;For this to work you&#x27;ll need to have &lt;a href=&quot;https:&#x2F;&#x2F;docs.aws.amazon.com&#x2F;eks&#x2F;latest&#x2F;userguide&#x2F;iam-roles-for-service-accounts.html&quot;&gt;IAM Roles for Service Accounts (IRSA)&lt;&#x2F;a&gt; enabled. It allows us to easily map Kubernetes Service Accounts with AWS IAM Policies.&lt;&#x2F;p&gt;
&lt;p&gt;I&#x27;m using &lt;a href=&quot;https:&#x2F;&#x2F;eksctl.io&#x2F;usage&#x2F;iamserviceaccounts&#x2F;&quot;&gt;eksctl&lt;&#x2F;a&gt; which simplifies all necessary steps into a single command, but it can also be done &lt;a href=&quot;https:&#x2F;&#x2F;docs.aws.amazon.com&#x2F;eks&#x2F;latest&#x2F;userguide&#x2F;create-service-account-iam-policy-and-role.html#create-service-account-iam-role&quot;&gt;using the AWS CLI&lt;&#x2F;a&gt; if you don&#x27;t want to install eksctl.&lt;&#x2F;p&gt;
&lt;p&gt;Make sure to replace the &lt;code&gt;attach-policy-arn&lt;&#x2F;code&gt; with the output of the previous step.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#282a36;color:#f8f8f2;&quot;&gt;&lt;code&gt;&lt;span&gt;$ eksctl create iamserviceaccount \
&lt;&#x2F;span&gt;&lt;span&gt;    --name nginx-deployment-sa \
&lt;&#x2F;span&gt;&lt;span&gt;    --region us-east-1 \
&lt;&#x2F;span&gt;&lt;span&gt;    --cluster my-cluster \
&lt;&#x2F;span&gt;&lt;span&gt;    --attach-policy-arn &amp;quot;arn:aws:iam::123456:policy&#x2F;deployment-policy&amp;quot; \
&lt;&#x2F;span&gt;&lt;span&gt;    --approve
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;To verify that it worked we can output the new &lt;code&gt;ServiceAccount&lt;&#x2F;code&gt; and check that it has a &lt;code&gt;role-arn&lt;&#x2F;code&gt; annotation:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#282a36;color:#f8f8f2;&quot;&gt;&lt;code&gt;&lt;span&gt;$ kubectl get sa -n default nginx-deployment-sa -o yaml | grep role-arn
&lt;&#x2F;span&gt;&lt;span&gt;eks.amazonaws.com&#x2F;role-arn: arn:aws:iam::123456:role&#x2F;eksctl-my-cluster-addon-iamser-Role1-11RZDP3FRDZKI
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We now have all necessary permissions setup to allow our Pod to access the secret in Secrets Manager.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;create-secret-provider-class&quot;&gt;Create Secret Provider Class&lt;&#x2F;h2&gt;
&lt;p&gt;To create a Kubernetes Secret that is linked to a Secrets Manager secret, we have to create a &lt;code&gt;SecretProviderClass&lt;&#x2F;code&gt; object.&lt;&#x2F;p&gt;
&lt;p&gt;In our example we tell it to create a Secret in Kubernetes called &lt;code&gt;foosecret&lt;&#x2F;code&gt; and set it to the value of the &lt;code&gt;CSI-driver-test-secret&lt;&#x2F;code&gt; secret from Secrets Manager:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;yaml&quot; style=&quot;background-color:#282a36;color:#f8f8f2;&quot; class=&quot;language-yaml &quot;&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;apiVersion&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;secrets-store.csi.x-k8s.io&#x2F;v1
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;kind&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;SecretProviderClass
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;metadata&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;nginx-deployment-aws-secrets
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;spec&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;provider&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;aws
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;secretObjects&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;data&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;key&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;SECRET_API_KEY
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;objectName&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;CSI-driver-test-secret
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;secretName&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;foosecret
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;type&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;Opaque
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;parameters&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;objects&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;|
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;        - objectName: &amp;quot;CSI-driver-test-secret&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;          objectType: &amp;quot;secretsmanager&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Save the YAML to a file and then apply it:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#282a36;color:#f8f8f2;&quot;&gt;&lt;code&gt;&lt;span&gt;$ kubectl apply -f secretproviderclass.yaml
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The secret will be created when a Pod starts that has a volume mounted which uses the Secret Store CSI driver (see next step for an example). It will be deleted when the Pod terminates. If there is a Deployment with multiple replicas, all Pods need to be terminated for the Secret to be deleted.&lt;&#x2F;p&gt;
&lt;p&gt;If auto-rotation is enabled in Secrets Manager you will need to either manually restart the Pod(s) or use the &lt;a href=&quot;https:&#x2F;&#x2F;secrets-store-csi-driver.sigs.k8s.io&#x2F;topics&#x2F;secret-auto-rotation.html&quot;&gt;rotation reconciler feature&lt;&#x2F;a&gt; in the Secrets Store CSI Driver.&lt;&#x2F;p&gt;
&lt;p&gt;The rotation reconciler feature will poll Secrets Manager periodically and as pricing is based on API Calls it will increase cost.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;update-the-nginx-deployment&quot;&gt;Update the nginx Deployment&lt;&#x2F;h2&gt;
&lt;p&gt;We can now create a Pod to access the secret. In this example we&#x27;ll use a Deployment with 3 replicas to read the secret and expose it as an environment variable in each container.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;yaml&quot; style=&quot;background-color:#282a36;color:#f8f8f2;&quot; class=&quot;language-yaml &quot;&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;apiVersion&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;apps&#x2F;v1
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;kind&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;Deployment
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;metadata&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;csi-secret-driver-test-nginx-deployment
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;labels&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;app&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;nginx
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;spec&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;replicas&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bd93f9;&quot;&gt;3
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;selector&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;matchLabels&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;app&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;nginx
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;template&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;metadata&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;labels&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;app&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;nginx
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;spec&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;serviceAccountName&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;nginx-deployment-sa
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;volumes&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;      - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;secrets-store-inline
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;csi&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;driver&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;secrets-store.csi.k8s.io
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;readOnly&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bd93f9;&quot;&gt;true
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;volumeAttributes&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;secretProviderClass&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;nginx-deployment-aws-secrets
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;containers&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;      - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;nginx
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;image&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;nginx:1.14.2
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;ports&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;        - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;containerPort&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bd93f9;&quot;&gt;80
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;volumeMounts&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;        - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;secrets-store-inline
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;mountPath&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;&#x2F;mnt&#x2F;secrets-store&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;readOnly&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bd93f9;&quot;&gt;true
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;env&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;        - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;SECRET_API_KEY
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;valueFrom&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;secretKeyRef&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;              &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;foosecret
&lt;&#x2F;span&gt;&lt;span&gt;              &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;key&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;SECRET_API_KEY
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;After applying the file check that the &lt;code&gt;SECRET_API_KEY&lt;&#x2F;code&gt; is now in the env vars of our nginx container and contains our secret &lt;code&gt;secretkey&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#282a36;color:#f8f8f2;&quot;&gt;&lt;code&gt;&lt;span&gt;$ kubectl apply -f test-nginx.yaml
&lt;&#x2F;span&gt;&lt;span&gt;$ kubectl exec csi-secret-driver-test-nginx-deployment-abc123 -- \
&lt;&#x2F;span&gt;&lt;span&gt;    env | grep SECRET_API_KEY
&lt;&#x2F;span&gt;&lt;span&gt;SECRET_API_KEY=secretkey
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;And with that we have successfully synced our secret from AWS Secrets Manager to Kubernetes.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;resources&quot;&gt;Resources&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;docs.aws.amazon.com&#x2F;secretsmanager&#x2F;latest&#x2F;userguide&#x2F;integrating_csi_driver.html&quot;&gt;https:&#x2F;&#x2F;docs.aws.amazon.com&#x2F;secretsmanager&#x2F;latest&#x2F;userguide&#x2F;integrating_csi_driver.html&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;docs.aws.amazon.com&#x2F;secretsmanager&#x2F;latest&#x2F;userguide&#x2F;integrating_csi_driver_tutorial.html&quot;&gt;https:&#x2F;&#x2F;docs.aws.amazon.com&#x2F;secretsmanager&#x2F;latest&#x2F;userguide&#x2F;integrating_csi_driver_tutorial.html&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;aws&#x2F;secrets-store-csi-driver-provider-aws&quot;&gt;https:&#x2F;&#x2F;github.com&#x2F;aws&#x2F;secrets-store-csi-driver-provider-aws&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;kubernetes-sigs&#x2F;secrets-store-csi-driver&#x2F;blob&#x2F;main&#x2F;charts&#x2F;secrets-store-csi-driver&quot;&gt;https:&#x2F;&#x2F;github.com&#x2F;kubernetes-sigs&#x2F;secrets-store-csi-driver&#x2F;blob&#x2F;main&#x2F;charts&#x2F;secrets-store-csi-driver&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;secrets-store-csi-driver.sigs.k8s.io&#x2F;topics&#x2F;sync-as-kubernetes-secret.html&quot;&gt;https:&#x2F;&#x2F;secrets-store-csi-driver.sigs.k8s.io&#x2F;topics&#x2F;sync-as-kubernetes-secret.html&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Enabling Datadog integration for ingress-nginx Helm chart</title>
        <published>2022-08-21T00:00:00+00:00</published>
        <updated>2022-08-21T00:00:00+00:00</updated>
        <author>
          <name>Arthur Koziel</name>
        </author>
        <link rel="alternate" href="https://www.arthurkoziel.com/enabled-datadog-nginx-ingress-helm/" type="text/html"/>
        <id>https://www.arthurkoziel.com/enabled-datadog-nginx-ingress-helm/</id>
        
        <content type="html">&lt;p&gt;This is a guide on how to enable the Datadog &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;DataDog&#x2F;integrations-core&#x2F;tree&#x2F;master&#x2F;nginx&quot;&gt;nginx&lt;&#x2F;a&gt; and
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;DataDog&#x2F;integrations-core&#x2F;tree&#x2F;master&#x2F;nginx_ingress_controller&quot;&gt;nginx_ingress_controller&lt;&#x2F;a&gt; integrations
when using the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;kubernetes&#x2F;ingress-nginx&#x2F;tree&#x2F;main&#x2F;charts&#x2F;ingress-nginx&quot;&gt;ingress-nginx Helm
chart&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;available-integrations-in-datadog&quot;&gt;Available Integrations in Datadog&lt;&#x2F;h2&gt;
&lt;p&gt;In Datadog, there are two NGINX-related integrations available:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;nginx&lt;&#x2F;code&gt;: Metrics reported by NGINX status page. The required
&lt;code&gt;ngx_http_stub_status_module&lt;&#x2F;code&gt; is enabled by default in the ingress-nginx Helm
chart. Access to the status page is restricted, and we need to whitelist the Datadog
agent&#x27;s IP. The list of metrics can be found in the &lt;a href=&quot;https:&#x2F;&#x2F;nginx.org&#x2F;en&#x2F;docs&#x2F;http&#x2F;ngx_http_stub_status_module.html&quot;&gt;nginx
documentation&lt;&#x2F;a&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;nginx_ingress_controller&lt;&#x2F;code&gt;: Metrics reported by the NGINX Ingress controller. It exposes metrics in the Prometheus format. The list of metrics can
be found in a &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;kubernetes&#x2F;ingress-nginx&#x2F;issues&#x2F;2924&quot;&gt;GitHub
PR&lt;&#x2F;a&gt;.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;In this guide, we will enable both integrations.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;enabling-metrics-endpoint-and-status-page&quot;&gt;Enabling metrics endpoint and status page&lt;&#x2F;h2&gt;
&lt;p&gt;Metrics for the NGINX Ingress controller are disabled by default. We have to enable the Prometheus metrics endpoint:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;yaml&quot; style=&quot;background-color:#282a36;color:#f8f8f2;&quot; class=&quot;language-yaml &quot;&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;controller&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;metrics&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;enabled&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bd93f9;&quot;&gt;true
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;For NGINX, we have to whitelist the IP of the Datadog agent to allow access to
the status page. In the following example, I&#x27;ve simply whitelisted all IPs in the
Kubernetes VPC so that any Pod can access it: &lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;yaml&quot; style=&quot;background-color:#282a36;color:#f8f8f2;&quot; class=&quot;language-yaml &quot;&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;controller&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;config&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;nginx-status-ipv4-whitelist&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;10.1.0.0&#x2F;16&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;agent-check-configuration&quot;&gt;Agent check configuration&lt;&#x2F;h2&gt;
&lt;p&gt;The Datadog agent looks for a &lt;code&gt;ad.datadoghq.com&#x2F;&amp;lt;CONTAINER_IDENTIFIER&amp;gt;.checks&lt;&#x2F;code&gt; annotation
on Pods to check for integration configurations.&lt;&#x2F;p&gt;
&lt;p&gt;The &lt;code&gt;CONTAINER_IDENTIFIER&lt;&#x2F;code&gt; is the name of the container that the integration applies to. By default, the container name of the NGINX Ingress controller is &lt;code&gt;controller&lt;&#x2F;code&gt; so our
annotation is named &lt;code&gt;ad.datadoghq.com&#x2F;controller.checks&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;For the Datadog &lt;code&gt;nginx&lt;&#x2F;code&gt; integration, we have to set the &lt;code&gt;nginx_status_url&lt;&#x2F;code&gt;. The path is always &lt;code&gt;&#x2F;nginx_status&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;For the &lt;code&gt;nginx_ingress_controller&lt;&#x2F;code&gt; integration, we have to set the URL of the
Prometheus metrics endpoint. By default, they are exposed on port &lt;code&gt;10254&lt;&#x2F;code&gt;. The path is always &lt;code&gt;&#x2F;metrics&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;yaml&quot; style=&quot;background-color:#282a36;color:#f8f8f2;&quot; class=&quot;language-yaml &quot;&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;controller&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;podAnnotations&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;ad.datadoghq.com&#x2F;controller.checks&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;|
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;      {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;        &amp;quot;nginx&amp;quot;: {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;          &amp;quot;instances&amp;quot;: [{&amp;quot;nginx_status_url&amp;quot;: &amp;quot;http:&#x2F;&#x2F;%%host%%&#x2F;nginx_status&amp;quot;}]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;        },
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;        &amp;quot;nginx_ingress_controller&amp;quot; : {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;          &amp;quot;instances&amp;quot;: [{&amp;quot;prometheus_url&amp;quot;: &amp;quot;http:&#x2F;&#x2F;%%host%%:10254&#x2F;metrics&amp;quot;}]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;        }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;      }
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The &lt;code&gt;%%host%%&lt;&#x2F;code&gt; part is a &lt;a href=&quot;https:&#x2F;&#x2F;docs.datadoghq.com&#x2F;agent&#x2F;guide&#x2F;template_variables&#x2F;&quot;&gt;template
variable&lt;&#x2F;a&gt; that will
be replaced automatically with the agent&#x27;s host service IP. This will only work
if the agent is running on every host.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;check-if-everything-works&quot;&gt;Check if everything works&lt;&#x2F;h2&gt;
&lt;p&gt;We can check if the metrics collection works by running the &lt;code&gt;agent status&lt;&#x2F;code&gt; command in an
agent container. If everything is working, it will report a successful
execution date:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#282a36;color:#f8f8f2;&quot;&gt;&lt;code&gt;&lt;span&gt;Last Execution Date : 2022-07-27 03:43:24 UTC (1658893404000)
&lt;&#x2F;span&gt;&lt;span&gt;Last Successful Execution Date : 2022-07-27 03:43:24 UTC (1658893404000)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Finally, we should enable the integrations in the Datadog Web UI. Go
to &amp;quot;Integrations&amp;quot;, select nginx&#x2F;nginx-ingress-controller and click on &amp;quot;Enable&amp;quot;.
Doing this will also create 3 default dashboards.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Replacing Docker Desktop for Mac with Colima</title>
        <published>2021-12-21T00:00:00+00:00</published>
        <updated>2021-12-21T00:00:00+00:00</updated>
        <author>
          <name>Arthur Koziel</name>
        </author>
        <link rel="alternate" href="https://www.arthurkoziel.com/replacing-docker-desktop-for-mac-with-colima/" type="text/html"/>
        <id>https://www.arthurkoziel.com/replacing-docker-desktop-for-mac-with-colima/</id>
        
        <content type="html">&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.docker.com&#x2F;products&#x2F;docker-desktop&quot;&gt;Docker Desktop for Mac&lt;&#x2F;a&gt; is
probably the most commonly used solution to run Docker on macOS. It runs the
daemon in a VM, handles port-forwarding, shared folders and sets up the Docker
CLI. It&#x27;s a quick and easy way to get Docker running on macOS.&lt;&#x2F;p&gt;
&lt;p&gt;Although technically it works fine, the following reasons made me look for a
replacement:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Closed-source&lt;&#x2F;li&gt;
&lt;li&gt;Pop-ups asking me how likely I am to recommend Docker Desktop to a co-worker&lt;&#x2F;li&gt;
&lt;li&gt;Weekly tips and anonymous reporting are enabled by default&lt;&#x2F;li&gt;
&lt;li&gt;It makes a request to &lt;code&gt;desktop.docker.com&lt;&#x2F;code&gt; every time the settings are opened,
even with anonymous reporting turned off&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;While there is the option to run something like
&lt;a href=&quot;https:&#x2F;&#x2F;multipass.run&#x2F;&quot;&gt;Multipass&lt;&#x2F;a&gt; or &lt;a href=&quot;https:&#x2F;&#x2F;www.virtualbox.org&#x2F;&quot;&gt;VirtualBox&lt;&#x2F;a&gt;
with a custom provisioning script for Docker and then configure shared folders,
I was looking for a drop-in replacement with minimal or no configuration.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;abiosoft&#x2F;colima&#x2F;&quot;&gt;Colima&lt;&#x2F;a&gt; fits the criteria well. It&#x27;s based
on &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;lima-vm&#x2F;lima&quot;&gt;Lima&lt;&#x2F;a&gt; which creates a QEMU VM with HVF
accelerator and handles the port-forwarding and folder sharing. Lima comes with
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;containerd&#x2F;containerd&quot;&gt;containerd&lt;&#x2F;a&gt; and
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;containerd&#x2F;nerdctl&quot;&gt;nerdctl&lt;&#x2F;a&gt; installed, but for a drop-in
replacement the Docker container runtime is required which is what Colima is
for.&lt;&#x2F;p&gt;
&lt;p&gt;Colima provisions the Docker container runtime in a Lima VM, configures the
&lt;code&gt;docker&lt;&#x2F;code&gt; CLI on macOS and handles port-forwarding and volume mounts. This makes
Docker easily usable on macOS without any configuration, similar to Docker Desktop.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;installation-and-usage&quot;&gt;Installation and Usage&lt;&#x2F;h2&gt;
&lt;p&gt;Installation is easy and can be done through Homebrew:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#282a36;color:#f8f8f2;&quot;&gt;&lt;code&gt;&lt;span&gt;brew install colima
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;To start the VM we run:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#282a36;color:#f8f8f2;&quot;&gt;&lt;code&gt;&lt;span&gt;colima start
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;It will start the docker daemon in the VM and configure the docker CLI on the
host. The usage in macOS is no different from Docker Desktop, and all
&lt;code&gt;docker&lt;&#x2F;code&gt; commands should work as before.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;performance&quot;&gt;Performance&lt;&#x2F;h2&gt;
&lt;p&gt;Since both solutions are based on the macOS HVF I don&#x27;t think there is much
difference in terms of CPU and memory performance. However, shared folder
performance has always been a
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;docker&#x2F;roadmap&#x2F;issues&#x2F;7&quot;&gt;bottleneck&lt;&#x2F;a&gt; for Docker on macOS.&lt;&#x2F;p&gt;
&lt;p&gt;I think it&#x27;s worth to test the differences in performance since Docker Desktop
uses gRPC FUSE while Colima&#x2F;Lima uses sshfs to share folders.&lt;&#x2F;p&gt;
&lt;p&gt;I&#x27;ve used &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;axboe&#x2F;fio&quot;&gt;fio&lt;&#x2F;a&gt; to run a quick benchmark in Docker
desktop for mac (v4.3.1) and colima (v0.2.2) that performs random 4K writes on a
shared volume:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#282a36;color:#f8f8f2;&quot;&gt;&lt;code&gt;&lt;span&gt;fio --name=random-write --ioengine=libaio --rw=randwrite --direct=1 --bs=4k --size=4g --numjobs=1 --iodepth=16 --runtime=60 --time_based --end_fsync=1 --filename=&#x2F;app&#x2F;testfile
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The results:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#282a36;color:#f8f8f2;&quot;&gt;&lt;code&gt;&lt;span&gt;# Docker Desktop for Mac
&lt;&#x2F;span&gt;&lt;span&gt;IOPS: 1545
&lt;&#x2F;span&gt;&lt;span&gt;Bandwidth: 6.3MB&#x2F;s
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;# Colima
&lt;&#x2F;span&gt;&lt;span&gt;IOPS: 2786
&lt;&#x2F;span&gt;&lt;span&gt;Bandwidth: 11.4MB&#x2F;s
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We can see that Colima is around 80% faster for both IOPS and bandwidth metrics.&lt;&#x2F;p&gt;
&lt;p&gt;For comparison, the native speed on macOS was 28.6k IOPS and 117MB&#x2F;s bandwidth.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;&#x2F;h2&gt;
&lt;p&gt;After testing &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;abiosoft&#x2F;colima&#x2F;&quot;&gt;Colima&lt;&#x2F;a&gt; I found it to be a
great drop-in replacement for Docker Desktop. It even has faster performance for
shared folders, which is another good argument to switch.&lt;&#x2F;p&gt;
&lt;p&gt;I did not notice any difference when running docker containers and all &lt;code&gt;docker&lt;&#x2F;code&gt;
commands worked the same as before, which is great since none of my build-scripts
had to be changed.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Installing NixOS on a MacBook Pro</title>
        <published>2021-12-02T00:00:00+00:00</published>
        <updated>2021-12-02T00:00:00+00:00</updated>
        <author>
          <name>Arthur Koziel</name>
        </author>
        <link rel="alternate" href="https://www.arthurkoziel.com/installing-nixos-on-a-macbookpro/" type="text/html"/>
        <id>https://www.arthurkoziel.com/installing-nixos-on-a-macbookpro/</id>
        
        <content type="html">&lt;p&gt;In this blog post, I&#x27;m going to share how to install NixOS 21.11 on an early-2013
MacBook Pro. &lt;&#x2F;p&gt;
&lt;p&gt;The specs of the laptop are:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#282a36;color:#f8f8f2;&quot;&gt;&lt;code&gt;&lt;span&gt;Model Identifier:	MacBookPro10,1
&lt;&#x2F;span&gt;&lt;span&gt;Processor Name:	Quad-Core Intel Core i7
&lt;&#x2F;span&gt;&lt;span&gt;Processor Speed:	2.7 GHz
&lt;&#x2F;span&gt;&lt;span&gt;Total Number of Cores:	4
&lt;&#x2F;span&gt;&lt;span&gt;Memory:	16 GB
&lt;&#x2F;span&gt;&lt;span&gt;Chipset Model:	Intel HD Graphics 4000
&lt;&#x2F;span&gt;&lt;span&gt;Chipset Model:	NVIDIA GeForce GT 650M
&lt;&#x2F;span&gt;&lt;span&gt;Wifi:	Broadcom BCM4331
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The setup will dual-boot macOS and NixOS. This guide will show how to install
the base system (without GUI) with a working wifi connection.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;creating-a-custom-installation-iso&quot;&gt;Creating a custom installation ISO&lt;&#x2F;h2&gt;
&lt;p&gt;The NixOS installation CD doesn&#x27;t ship with any proprietary software, and is
therefore missing the driver for the Broadcom BCM4331 wifi card. &lt;&#x2F;p&gt;
&lt;p&gt;To solve this problem, I decided to build a custom installation CD 
that is based on the NixOS minimal installation CD but with the required
Broadcom drivers included.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;virtualbox&quot;&gt;VirtualBox&lt;&#x2F;h3&gt;
&lt;p&gt;Building the custom image can&#x27;t be done on macOS, so we have to download the
&lt;a href=&quot;https:&#x2F;&#x2F;nixos.org&#x2F;download.html#nixos-virtualbox&quot;&gt;NixOS VirtualBox image&lt;&#x2F;a&gt;
appliance and import it into VirtualBox. &lt;&#x2F;p&gt;
&lt;p&gt;The NixOS VirtualBox image already includes the Guest Additions, which allow USB
port forwarding (necessary to flash the resulting ISO on a USB drive) and
clipboard sharing between host and guest.&lt;&#x2F;p&gt;
&lt;p&gt;When importing the OVA file into VirtualBox, make sure to increase the amount of
CPU cores (the default is 1 core) to speed up the build process.&lt;&#x2F;p&gt;
&lt;p&gt;After starting the VM, we&#x27;ll notice that the text in KDE is too small due to the
MacBook&#x27;s Retina screen. We can fix this by going to Settings -&amp;gt; System
Settings -&amp;gt; Display and Monitor and setting the Global Scale to 200%.&lt;&#x2F;p&gt;
&lt;p&gt;To enable shared clipboard in VirtualBox, go to the menu bar and click on Devices
-&amp;gt; Shared Clipboard -&amp;gt; Bidirectional.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;installation-cd-nix-configuration&quot;&gt;Installation CD Nix configuration&lt;&#x2F;h3&gt;
&lt;p&gt;Open the terminal (Konsole) and create a file called &lt;code&gt;iso.nix&lt;&#x2F;code&gt; with
the following content:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;nix&quot; style=&quot;background-color:#282a36;color:#f8f8f2;&quot; class=&quot;language-nix &quot;&gt;&lt;code class=&quot;language-nix&quot; data-lang=&quot;nix&quot;&gt;&lt;span&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#ffb86c;&quot;&gt;config&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#ffb86c;&quot;&gt;pkgs&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;, ... &lt;&#x2F;span&gt;&lt;span&gt;}:
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50fa7b;&quot;&gt;imports &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;[
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;lt;nixpkgs&#x2F;nixos&#x2F;modules&#x2F;installer&#x2F;cd-dvd&#x2F;installation-cd-minimal.nix&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;lt;nixpkgs&#x2F;nixos&#x2F;modules&#x2F;installer&#x2F;cd-dvd&#x2F;channel.nix&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  ];
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50fa7b;&quot;&gt;nixpkgs&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50fa7b;&quot;&gt;config&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50fa7b;&quot;&gt;allowUnfree &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bd93f9;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50fa7b;&quot;&gt;boot&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50fa7b;&quot;&gt;kernelModules &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;[ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;wl&amp;quot; &lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50fa7b;&quot;&gt;boot&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50fa7b;&quot;&gt;extraModulePackages &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;[ &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#ffb86c;&quot;&gt;config&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#ffb86c;&quot;&gt;boot&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#ffb86c;&quot;&gt;kernelPackages&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#ffb86c;&quot;&gt;broadcom_sta &lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50fa7b;&quot;&gt;boot&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50fa7b;&quot;&gt;blacklistedKernelModules &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;[ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;b43&amp;quot; &amp;quot;bcma&amp;quot; &lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Note that vim is not installed by default. Either use &lt;code&gt;nano&lt;&#x2F;code&gt; or run &lt;code&gt;nix-shell -p vim&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;I&#x27;ve blacklisted the open-source Broadcom drivers since they would
otherwise be loaded during boot and throw errors about unsupported
hardware.&lt;&#x2F;p&gt;
&lt;p&gt;To build the ISO image, run the following command:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#282a36;color:#f8f8f2;&quot;&gt;&lt;code&gt;&lt;span&gt;sudo nix-build &amp;#39;&amp;lt;nixpkgs&#x2F;nixos&amp;gt;&amp;#39; -A config.system.build.isoImage -I nixos-config=iso.nix
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The password is &lt;code&gt;demo&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;After the build process is finished, the ISO can be found in the &lt;code&gt;result&#x2F;iso&#x2F;&lt;&#x2F;code&gt; directory:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#282a36;color:#f8f8f2;&quot;&gt;&lt;code&gt;&lt;span&gt;result&#x2F;iso&#x2F;nixos-21.11.333823.96b4157790f-x86_64-linux.iso
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;flashing-the-iso-to-a-usb-drive&quot;&gt;Flashing the ISO to a USB drive&lt;&#x2F;h2&gt;
&lt;p&gt;Insert a FAT32 formatted USB drive and enable VirtualBox USB forwarding by
clicking in the VirtualBox menubar under Devices -&amp;gt; USB -&amp;gt; Generic Mass Storage.
A popup should show up in KDE with the option to mount the drive.&lt;&#x2F;p&gt;
&lt;p&gt;We need to find the interface name of our USB drive:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#282a36;color:#f8f8f2;&quot;&gt;&lt;code&gt;&lt;span&gt;$ sudo fdisk -l
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;Disk &#x2F;dev&#x2F;sdb: 7.5 GiB, 8053063680 bytes, 15728640 sectors
&lt;&#x2F;span&gt;&lt;span&gt;Disk model: Flash Disk      
&lt;&#x2F;span&gt;&lt;span&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;Device     Boot Start      End  Sectors  Size Id Type
&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;dev&#x2F;sdb1        2048 15728639 15726592  7.5G  b W95 FAT32
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Look for &lt;code&gt;Flash Disk&lt;&#x2F;code&gt;. In my case, the interface name is &lt;code&gt;&#x2F;dev&#x2F;sdb&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Copy the ISO image to the USB drive:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#282a36;color:#f8f8f2;&quot;&gt;&lt;code&gt;&lt;span&gt;$ sudo dd if=result&#x2F;iso&#x2F;nixos-21.11.333823.96b4157790f-x86_64-linux.iso of=&#x2F;dev&#x2F;sdb bs=4M
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;191+1 records in
&lt;&#x2F;span&gt;&lt;span&gt;191+1 records out
&lt;&#x2F;span&gt;&lt;span&gt;803209216 bytes (803 MB, 766 MiB) copied, 68.3789 s, 11.7 MB&#x2F;s
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;After the process is finished, we can eject the USB drive and power off the VM:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#282a36;color:#f8f8f2;&quot;&gt;&lt;code&gt;&lt;span&gt;eject &#x2F;dev&#x2F;sdb
&lt;&#x2F;span&gt;&lt;span&gt;poweroff
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;creating-partitions&quot;&gt;Creating partitions&lt;&#x2F;h2&gt;
&lt;p&gt;I used &lt;code&gt;Disk Utility&lt;&#x2F;code&gt; to shrink the macOS partition, and left one
quarter of the available disk space for the NixOS system:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;www.arthurkoziel.com&#x2F;installing-nixos-on-a-macbookpro&#x2F;partitions.jpg&quot; alt=&quot;Disk Utility showing partitions&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;I then used &lt;code&gt;gdisk&lt;&#x2F;code&gt; (install with &lt;code&gt;brew install gptfdisk&lt;&#x2F;code&gt;) to create a root partition and a
4 GB swap partition for NixOS.&lt;&#x2F;p&gt;
&lt;p&gt;This is the initial partition layout before running any commands:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#282a36;color:#f8f8f2;&quot;&gt;&lt;code&gt;&lt;span&gt;$ sudo gdisk &#x2F;dev&#x2F;sda
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;Command (? for help): p
&lt;&#x2F;span&gt;&lt;span&gt;Disk &#x2F;dev&#x2F;disk0: 977105060 sectors, 465.9 GiB
&lt;&#x2F;span&gt;&lt;span&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;Total free space is 244346569 sectors (116.5 GiB)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;Number  Start (sector)    End (sector)  Size       Code  Name
&lt;&#x2F;span&gt;&lt;span&gt;   1              40          409639   200.0 MiB   EF00  EFI system partition
&lt;&#x2F;span&gt;&lt;span&gt;   2          409640       732758463   349.2 GiB   AF0A  Macintosh HD
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;To create the root partition:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#282a36;color:#f8f8f2;&quot;&gt;&lt;code&gt;&lt;span&gt;Command (? for help): n
&lt;&#x2F;span&gt;&lt;span&gt;Partition number (3-128, default 3): 
&lt;&#x2F;span&gt;&lt;span&gt;First sector (34-977105026, default = 732758464) or {+-}size{KMGTP}: 
&lt;&#x2F;span&gt;&lt;span&gt;Last sector (732758464-977105026, default = 977105026) or {+-}size{KMGTP}: -4G
&lt;&#x2F;span&gt;&lt;span&gt;Current type is AF00 (Apple HFS&#x2F;HFS+)
&lt;&#x2F;span&gt;&lt;span&gt;Hex code or GUID (L to show codes, Enter = AF00): 8300
&lt;&#x2F;span&gt;&lt;span&gt;Changed type of partition to &amp;#39;Linux filesystem&amp;#39;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;To create the swap partition:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#282a36;color:#f8f8f2;&quot;&gt;&lt;code&gt;&lt;span&gt;Command (? for help): n
&lt;&#x2F;span&gt;&lt;span&gt;Partition number (4-128, default 4): 
&lt;&#x2F;span&gt;&lt;span&gt;First sector (34-977105026, default = 968716424) or {+-}size{KMGTP}: 
&lt;&#x2F;span&gt;&lt;span&gt;Last sector (968716424-977105026, default = 977105026) or {+-}size{KMGTP}: 
&lt;&#x2F;span&gt;&lt;span&gt;Current type is AF00 (Apple HFS&#x2F;HFS+)
&lt;&#x2F;span&gt;&lt;span&gt;Hex code or GUID (L to show codes, Enter = AF00): 8200
&lt;&#x2F;span&gt;&lt;span&gt;Changed type of partition to &amp;#39;Linux swap&amp;#39;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The resulting layout should look like this:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#282a36;color:#f8f8f2;&quot;&gt;&lt;code&gt;&lt;span&gt;Command (? for help): p
&lt;&#x2F;span&gt;&lt;span&gt;Disk &#x2F;dev&#x2F;disk0: 977105060 sectors, 465.9 GiB
&lt;&#x2F;span&gt;&lt;span&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;Total free space is 11 sectors (5.5 KiB)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;Number  Start (sector)    End (sector)  Size       Code  Name
&lt;&#x2F;span&gt;&lt;span&gt;   1              40          409639   200.0 MiB   EF00  EFI system partition
&lt;&#x2F;span&gt;&lt;span&gt;   2          409640       732758463   349.2 GiB   AF0A  Macintosh HD
&lt;&#x2F;span&gt;&lt;span&gt;   3       732758464       968716418   112.5 GiB   8300  Linux filesystem
&lt;&#x2F;span&gt;&lt;span&gt;   4       968716424       977105026   4.0 GiB     8200  Linux swap
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Remember the device name and the partition numbers, we&#x27;ll need them later during
the NixOS installation when creating the file system. In my case, the root
file system is at &lt;code&gt;&#x2F;dev&#x2F;sda3&lt;&#x2F;code&gt; and swap is at &lt;code&gt;&#x2F;dev&#x2F;sda4&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;installing-refind&quot;&gt;Installing rEFInd&lt;&#x2F;h2&gt;
&lt;p&gt;To dual-boot macOS and NixOS, I&#x27;m using rEFInd as the EFI bootloader.&lt;&#x2F;p&gt;
&lt;p&gt;It can be downloaded from the &lt;a href=&quot;https:&#x2F;&#x2F;www.rodsbooks.com&#x2F;refind&#x2F;getting.html&quot;&gt;rEFInd
website&lt;&#x2F;a&gt; as a binary zip file.
After unpacking the file, we can install it by running the &lt;code&gt;refind-install&lt;&#x2F;code&gt;
command:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#282a36;color:#f8f8f2;&quot;&gt;&lt;code&gt;&lt;span&gt;$ .&#x2F;refind-install
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;Not running as root; attempting to elevate privileges via sudo....
&lt;&#x2F;span&gt;&lt;span&gt;Password:
&lt;&#x2F;span&gt;&lt;span&gt;ShimSource is none
&lt;&#x2F;span&gt;&lt;span&gt;Installing rEFInd on macOS....
&lt;&#x2F;span&gt;&lt;span&gt;Installing rEFInd to the partition mounted at &#x2F;Volumes&#x2F;ESP
&lt;&#x2F;span&gt;&lt;span&gt;Found rEFInd installation in &#x2F;Volumes&#x2F;ESP&#x2F;EFI&#x2F;refind; upgrading it.
&lt;&#x2F;span&gt;&lt;span&gt;Found suspected Linux partition(s); installing ext4fs driver.
&lt;&#x2F;span&gt;&lt;span&gt;Installing driver for ext4 (ext4_x64.efi)
&lt;&#x2F;span&gt;&lt;span&gt;Copied rEFInd binary files
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;boot-into-usb-drive&quot;&gt;Boot into USB drive&lt;&#x2F;h2&gt;
&lt;p&gt;To boot into the NixOS installation image, plug in the USB drive and restart the
computer, then select the USB drive in the boot menu.&lt;&#x2F;p&gt;
&lt;p&gt;You&#x27;ll notice that the terminal font is very small (due to the retina screen).
We can make it larger with:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#282a36;color:#f8f8f2;&quot;&gt;&lt;code&gt;&lt;span&gt;setfont ter-v32n
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;formatting-and-mounting-partitions&quot;&gt;Formatting and mounting partitions&lt;&#x2F;h2&gt;
&lt;p&gt;Next we need to format our partitions and mount them. I chose ext4 as a
file system and used LUKS to encrypt the disk: &lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#282a36;color:#f8f8f2;&quot;&gt;&lt;code&gt;&lt;span&gt;# format with luks and open the encrypted partition
&lt;&#x2F;span&gt;&lt;span&gt;cryptsetup luksFormat &#x2F;dev&#x2F;sda3
&lt;&#x2F;span&gt;&lt;span&gt;cryptsetup open &#x2F;dev&#x2F;sda3 nixosroot
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;# create filesystem
&lt;&#x2F;span&gt;&lt;span&gt;mkfs.ext4 &#x2F;dev&#x2F;mapper&#x2F;nixosroot
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;# mount partition
&lt;&#x2F;span&gt;&lt;span&gt;mount &#x2F;dev&#x2F;mapper&#x2F;nixosroot &#x2F;mnt
&lt;&#x2F;span&gt;&lt;span&gt;mkdir &#x2F;mnt&#x2F;boot
&lt;&#x2F;span&gt;&lt;span&gt;mount &#x2F;dev&#x2F;sda1 &#x2F;mnt&#x2F;boot
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Set up the swap area and turn on swapping:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#282a36;color:#f8f8f2;&quot;&gt;&lt;code&gt;&lt;span&gt;mkswap -L nixosswap &#x2F;dev&#x2F;sda4
&lt;&#x2F;span&gt;&lt;span&gt;swapon &#x2F;dev&#x2F;disk&#x2F;by-label&#x2F;nixosswap
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;enable-wifi-networking&quot;&gt;Enable Wifi Networking&lt;&#x2F;h2&gt;
&lt;p&gt;We enable wifi networking since NixOS needs internet access for the installation.&lt;&#x2F;p&gt;
&lt;p&gt;In our custom installation image, the proprietary Broadcom &lt;code&gt;wl&lt;&#x2F;code&gt; kernel module
will automatically load during boot. In the terminal we need to connect to a wifi
network using &lt;code&gt;wpa_supplicant&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#282a36;color:#f8f8f2;&quot;&gt;&lt;code&gt;&lt;span&gt;# get the wifi interface name. for me it is `wlp4s0`
&lt;&#x2F;span&gt;&lt;span&gt;ip link
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;# connect to wifi network. replace `myssid` and `mypassword`
&lt;&#x2F;span&gt;&lt;span&gt;wpa_supplicant -B -i wlp4s0 -c &amp;lt;(wpa_passphrase &amp;quot;myssid&amp;quot; &amp;quot;mypassword&amp;quot;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This will start &lt;code&gt;wpa_supplicant&lt;&#x2F;code&gt; as a background process. After we&#x27;ve installed
the system we will set it up as a daemon.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;nixos-installation&quot;&gt;NixOS installation&lt;&#x2F;h2&gt;
&lt;p&gt;We generate a NixOS configuration file template:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#282a36;color:#f8f8f2;&quot;&gt;&lt;code&gt;&lt;span&gt;nixos-gen --config --root &#x2F;mnt
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Then edit &lt;code&gt;&#x2F;mnt&#x2F;etc&#x2F;nixos&#x2F;configuration.nix&lt;&#x2F;code&gt; and add the following settings:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;nix&quot; style=&quot;background-color:#282a36;color:#f8f8f2;&quot; class=&quot;language-nix &quot;&gt;&lt;code class=&quot;language-nix&quot; data-lang=&quot;nix&quot;&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50fa7b;&quot;&gt;boot&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50fa7b;&quot;&gt;loader&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50fa7b;&quot;&gt;grub&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50fa7b;&quot;&gt;enable &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bd93f9;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50fa7b;&quot;&gt;boot&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50fa7b;&quot;&gt;loader&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50fa7b;&quot;&gt;systemd-boot&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50fa7b;&quot;&gt;enable &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bd93f9;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50fa7b;&quot;&gt;boot&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50fa7b;&quot;&gt;loader&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50fa7b;&quot;&gt;efi&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50fa7b;&quot;&gt;canTouchEfiVariables &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bd93f9;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6272a4;&quot;&gt;# the default governor constantly runs all cores on max frequency
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6272a4;&quot;&gt;# schedutil will run at a lower frequency and boost when needed
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50fa7b;&quot;&gt;powerManagement&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50fa7b;&quot;&gt;cpuFreqGovernor &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;schedutil&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6272a4;&quot;&gt;# install wpa_supplicant
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50fa7b;&quot;&gt;networking&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50fa7b;&quot;&gt;wireless&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50fa7b;&quot;&gt;enable &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bd93f9;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6272a4;&quot;&gt;# allow unfree packages (broadcom wifi drivers)
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50fa7b;&quot;&gt;nixpkgs&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50fa7b;&quot;&gt;config&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50fa7b;&quot;&gt;allowUnfree &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bd93f9;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Start the installation:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#282a36;color:#f8f8f2;&quot;&gt;&lt;code&gt;&lt;span&gt;nixos-install
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;After the installation is done, we can reboot the system and select the new NixOS
installation from the boot menu.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;wifi-setup&quot;&gt;Wifi setup&lt;&#x2F;h2&gt;
&lt;p&gt;After we&#x27;ve booted into our new system. we need to setup the wifi connection
(again).&lt;&#x2F;p&gt;
&lt;p&gt;We can use the same command as before (minus the &lt;code&gt;-B&lt;&#x2F;code&gt; flag) and write it to the
&lt;code&gt;wpa_supplicant.conf&lt;&#x2F;code&gt; file which will automatically get loaded when
&lt;code&gt;wpa_supplicant&lt;&#x2F;code&gt; starts during boot:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#282a36;color:#f8f8f2;&quot;&gt;&lt;code&gt;&lt;span&gt;wpa_supplicant -i wlp4s0 -c &amp;lt;(wpa_passphrase &amp;quot;myssid&amp;quot; &amp;quot;mypassword&amp;quot;) &amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;etc&#x2F;wpa_supplicant.conf
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;systemctl restart wpa_supplicant.service
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;&#x2F;h2&gt;
&lt;p&gt;Installing NixOS on the MacBook Pro was a great learning experience and
fairly easy to do.&lt;&#x2F;p&gt;
&lt;p&gt;Most things work fine out of the box. However, I&#x27;ve experienced significantly
lower battery life and louder fans due to higher (~15C) CPU idle temperatures
and not being able to switch GPUs on-demand (Nvidia GPU is always active).
These problems are not specific to NixOS, I&#x27;ve experienced the same issues in other major distributions on this laptop.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;links&quot;&gt;Links&lt;&#x2F;h2&gt;
&lt;p&gt;The following sites were very helpful when trying to install NixOS:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;wiki.archlinux.org&#x2F;title&#x2F;MacBookPro10,x&quot;&gt;ArchWiki page on MacBookPro10,x&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;thoughtbot.com&#x2F;blog&#x2F;install-linux-on-a-macbook-air&quot;&gt;Install Linux on a MacBook Air&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;unencumberedbyfacts.com&#x2F;2013&#x2F;08&#x2F;16&#x2F;linux-on-a-macbook-pro-101&#x2F;&quot;&gt;Linux On A Macbook Pro 10,1&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Running SerenityOS on macOS</title>
        <published>2021-06-04T00:00:00+00:00</published>
        <updated>2021-06-04T00:00:00+00:00</updated>
        <author>
          <name>Arthur Koziel</name>
        </author>
        <link rel="alternate" href="https://www.arthurkoziel.com/running-serenityos-on-macos/" type="text/html"/>
        <id>https://www.arthurkoziel.com/running-serenityos-on-macos/</id>
        
        <content type="html">&lt;p&gt;In this blog post, I&#x27;ll describe how to build and run &lt;a href=&quot;https:&#x2F;&#x2F;serenityos.org&#x2F;&quot;&gt;SerenityOS&lt;&#x2F;a&gt; on macOS (via QEMU).&lt;&#x2F;p&gt;
&lt;p&gt;SerenityOS is an operating system that combines UNIX with the GUI of Windows 9x&#x2F;NT. It&#x27;s still early in development but being improved daily with many contributors working on it.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;www.arthurkoziel.com&#x2F;running-serenityos-on-macos&#x2F;serenity-os.png&quot; alt=&quot;SerenityOS Desktop&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;The tips mentioned here can also be found in the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;SerenityOS&#x2F;serenity&#x2F;blob&#x2F;master&#x2F;Documentation&#x2F;BuildInstructions.md&quot;&gt;wiki&lt;&#x2F;a&gt;. This tutorial is a step-by-step guide specifically for macOS. It will work on Catalina but to run this on macOS Big Sur you&#x27;ll need to grant QEMU the permission to use the macOS hypervisor via entitlements. See my &lt;a href=&quot;https:&#x2F;&#x2F;www.arthurkoziel.com&#x2F;qemu-on-macos-big-sur&#x2F;&quot;&gt;previous blog post&lt;&#x2F;a&gt; about how to do this.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;installing-xcode&quot;&gt;Installing Xcode&lt;&#x2F;h2&gt;
&lt;p&gt;We need to have a full &lt;a href=&quot;https:&#x2F;&#x2F;developer.apple.com&#x2F;xcode&#x2F;&quot;&gt;Xcode&lt;&#x2F;a&gt; installation on our system to compile SerenityOS. The Command Line Tools are not enough.&lt;&#x2F;p&gt;
&lt;p&gt;Xcode can be downloaded from the &lt;a href=&quot;https:&#x2F;&#x2F;developer.apple.com&#x2F;download&#x2F;more&#x2F;&quot;&gt;Apple Developer page&lt;&#x2F;a&gt;. To access it you&#x27;ll need an iCloud account and accept the Developer Agreement that will show up when opening the link.&lt;&#x2F;p&gt;
&lt;p&gt;Note that Xcode 12.4 is the last version compatible with macOS Catalina.&lt;&#x2F;p&gt;
&lt;p&gt;After the download is done, move the app to your &lt;code&gt;Applications&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;If you previously had the Command Line Tools installed, you&#x27;ll need to change the
active developer directory and point it to the new Xcode installation:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#282a36;color:#f8f8f2;&quot;&gt;&lt;code&gt;&lt;span&gt;sudo xcode-select -s &#x2F;Applications&#x2F;Xcode.app&#x2F;Contents&#x2F;Developer
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;installing-dependencies&quot;&gt;Installing Dependencies&lt;&#x2F;h2&gt;
&lt;p&gt;Most dependencies can be installed via Homebrew. The only exception is &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;alperakcan&#x2F;fuse-ext2&quot;&gt;fuse-ext2&lt;&#x2F;a&gt;, which doesn&#x27;t have a Homebrew Formula and has to installed manually. &lt;&#x2F;p&gt;
&lt;p&gt;First we install the dependencies from Homebrew:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#282a36;color:#f8f8f2;&quot;&gt;&lt;code&gt;&lt;span&gt;brew install coreutils qemu bash gcc@10 ninja cmake macfuse
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Once the installation is done, you&#x27;ll need to reboot your machine for macfuse to work.&lt;&#x2F;p&gt;
&lt;p&gt;After the reboot we need to install fuse-ext2. The SerenityOS developers provide a bash
script in the git repository:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#282a36;color:#f8f8f2;&quot;&gt;&lt;code&gt;&lt;span&gt;git clone https:&#x2F;&#x2F;github.com&#x2F;SerenityOS&#x2F;serenity.git
&lt;&#x2F;span&gt;&lt;span&gt;cd serenity&#x2F;Toolchain
&lt;&#x2F;span&gt;&lt;span&gt;.&#x2F;BuildFuseExt2.sh
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;building-serenityos&quot;&gt;Building SerenityOS&lt;&#x2F;h2&gt;
&lt;p&gt;Now that we have all dependencies installed, we need to compile the SerenityOS
toolchain. The toolchain includes a GCC cross-compiler that is needed to compile SerenityOS itself:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#282a36;color:#f8f8f2;&quot;&gt;&lt;code&gt;&lt;span&gt;.&#x2F;BuildIt.sh
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;As the &amp;quot;gcc&amp;quot; that is shipped with Xcode is just an alias for &lt;code&gt;clang&lt;&#x2F;code&gt; we need to change the binary that is used by CMake:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#282a36;color:#f8f8f2;&quot;&gt;&lt;code&gt;&lt;span&gt;cd ..&#x2F;Build&#x2F;i686
&lt;&#x2F;span&gt;&lt;span&gt;rm -rf Root&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;cmake ..&#x2F;.. -G Ninja -DCMAKE_C_COMPILER=gcc-10 -DCMAKE_CXX_COMPILER=g++-10
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Finally, we can compile SerenityOS, build a disk image and run it:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#282a36;color:#f8f8f2;&quot;&gt;&lt;code&gt;&lt;span&gt;ninja install
&lt;&#x2F;span&gt;&lt;span&gt;ninja image
&lt;&#x2F;span&gt;&lt;span&gt;ninja run
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The QEMU window will show up and boot right into the SerenityOS desktop where we
can play around with it.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Running virt-manager and libvirt on macOS</title>
        <published>2021-05-12T00:00:00+00:00</published>
        <updated>2021-05-12T00:00:00+00:00</updated>
        <author>
          <name>Arthur Koziel</name>
        </author>
        <link rel="alternate" href="https://www.arthurkoziel.com/running-virt-manager-and-libvirt-on-macos/" type="text/html"/>
        <id>https://www.arthurkoziel.com/running-virt-manager-and-libvirt-on-macos/</id>
        
        <content type="html">&lt;p&gt;I&#x27;ve previously written about &lt;a href=&quot;https:&#x2F;&#x2F;www.arthurkoziel.com&#x2F;qemu-ubuntu-20-04&#x2F;&quot;&gt;using QEMU on macOS to create an Ubuntu VM&lt;&#x2F;a&gt; via
CLI. In this blog post I&#x27;m going to describe how to install &lt;a href=&quot;https:&#x2F;&#x2F;libvirt.org&#x2F;&quot;&gt;libvirt&lt;&#x2F;a&gt; and
&lt;a href=&quot;https:&#x2F;&#x2F;virt-manager.org&#x2F;&quot;&gt;virt-manager&lt;&#x2F;a&gt; on macOS to create an &lt;a href=&quot;https:&#x2F;&#x2F;ubuntu.com&#x2F;&quot;&gt;Ubuntu&lt;&#x2F;a&gt; VM via &lt;a href=&quot;https:&#x2F;&#x2F;www.qemu.org&#x2F;&quot;&gt;QEMU&lt;&#x2F;a&gt; from the virt-manager GUI.&lt;&#x2F;p&gt;
&lt;p&gt;What&#x27;s described in this blog post was an experiment to see if it would
work. Running libvirt locally is very slow and not usable due to the missing
support for the HVF
&lt;a href=&quot;https:&#x2F;&#x2F;developer.apple.com&#x2F;documentation&#x2F;hypervisor&quot;&gt;Hypervisor.Framework&lt;&#x2F;a&gt;.
The developers of virt-manager (Red Hat) are not testing on macOS and
it will break on major updates.&lt;&#x2F;p&gt;
&lt;p&gt;If you&#x27;re only interested in running virt-manager on macOS (and connect to remote machines) you can skip the steps after the virt-manager installation.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;www.arthurkoziel.com&#x2F;running-virt-manager-and-libvirt-on-macos&#x2F;ubuntu-desktop.png&quot; alt=&quot;Ubuntu Desktop&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;description&quot;&gt;Description&lt;&#x2F;h2&gt;
&lt;p&gt;Libvirt uses a hypervisor (such as QEMU) to run a VM and provides an API to
manage it. API Clients are available for many languages such as Python, Go or
Rust.&lt;&#x2F;p&gt;
&lt;p&gt;Virt-manager is a Python application that provides a GUI to manage VMs though
the libvirt API.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;installation&quot;&gt;Installation&lt;&#x2F;h2&gt;
&lt;p&gt;Libvirt is available in Homebrew and the installation
can be done with a single command:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#282a36;color:#f8f8f2;&quot;&gt;&lt;code&gt;&lt;span&gt;brew install libvirt
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Virt-manager is not available in Homebrew but there&#x27;s a &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;jeffreywildman&#x2F;homebrew-virt-manager&quot;&gt;custom
formula&lt;&#x2F;a&gt; available that makes it
convenient to install it. However, this formula is outdated and
fails to run on macOS Catalina and Big Sur.&lt;&#x2F;p&gt;
&lt;p&gt;To fix this I&#x27;ve &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;arthurk&#x2F;homebrew-virt-manager&quot;&gt;created a fork&lt;&#x2F;a&gt; with
updated dependencies. It can be installed via a custom tap:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#282a36;color:#f8f8f2;&quot;&gt;&lt;code&gt;&lt;span&gt;brew tap arthurk&#x2F;homebrew-virt-manager
&lt;&#x2F;span&gt;&lt;span&gt;brew install virt-manager virt-viewer
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The installation might take a few minutes due to many dependencies.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;usage&quot;&gt;Usage&lt;&#x2F;h2&gt;
&lt;p&gt;When the installation has finished we can test it by starting the libvirtd daemon:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#282a36;color:#f8f8f2;&quot;&gt;&lt;code&gt;&lt;span&gt;brew services start libvirt
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;and then virt-manager with a connection to it:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#282a36;color:#f8f8f2;&quot;&gt;&lt;code&gt;&lt;span&gt;virt-manager -c &amp;quot;qemu:&#x2F;&#x2F;&#x2F;session&amp;quot; --no-fork
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The original Homebrew formula had a custom patch applied that made &lt;code&gt;--no-fork&lt;&#x2F;code&gt;
the default behaviour (launching it in the foreground). To make it easier to
maintain the formula I&#x27;ve removed the patch. If the process should run in the
foreground the &lt;code&gt;--no-fork&lt;&#x2F;code&gt; argument needs to be specified or else it will run in
the background.&lt;&#x2F;p&gt;
&lt;p&gt;Note that the virt-manager window will be hidden after starting. It will show up
in the Dock (the icon is a rocket) and clicking on it will bring it into the
foreground.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;creating-a-vm&quot;&gt;Creating a VM&lt;&#x2F;h2&gt;
&lt;p&gt;As an example I&#x27;m creating a Ubuntu 20.10 VM.&lt;&#x2F;p&gt;
&lt;p&gt;Virt-manager assumes that &lt;a href=&quot;https:&#x2F;&#x2F;www.spice-space.org&#x2F;&quot;&gt;SPICE&lt;&#x2F;a&gt; is available and will add it to the default
settings. However, it&#x27;s is not supported on macOS and therefore we need to change a
the default values to remove all SPICE related settings:&lt;&#x2F;p&gt;
&lt;p&gt;Make sure to check the customize box before starting the VM:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;www.arthurkoziel.com&#x2F;running-virt-manager-and-libvirt-on-macos&#x2F;customize.png&quot; alt=&quot;virt-manager window before creating the VM, showing the customize checkbox&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;In the customization window we need to remove all hardware related to SPICE (Right-Click -&amp;gt; Remove Hardware):&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Channel spice&lt;&#x2F;li&gt;
&lt;li&gt;USB Redirector 1&lt;&#x2F;li&gt;
&lt;li&gt;USB Redirector 2&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;www.arthurkoziel.com&#x2F;running-virt-manager-and-libvirt-on-macos&#x2F;settings-remove-hardware.png&quot; alt=&quot;virt-manager settings with annotation about which hardware to remove&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;In the &lt;strong&gt;Display&lt;&#x2F;strong&gt; section set the type to VNC server:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;www.arthurkoziel.com&#x2F;running-virt-manager-and-libvirt-on-macos&#x2F;settings-display.png&quot; alt=&quot;virt-manager settings showing the display section&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;In the &lt;strong&gt;Video&lt;&#x2F;strong&gt; section set the model to Virtio:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;www.arthurkoziel.com&#x2F;running-virt-manager-and-libvirt-on-macos&#x2F;settings-video.png&quot; alt=&quot;virt-manager settings showing the video section&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Apply these changes and click on &lt;em&gt;Begin Installation&lt;&#x2F;em&gt; in the top left corner. It
will open a window that boots into the Ubuntu installer. From there on we can
follow the installer. The default settings are usually fine.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;&#x2F;h2&gt;
&lt;p&gt;As mentioned above this was an experiment. The VM runs very slow due to the missing support for HVF (Hypervisor.Framework). The
focus of libvirt is on KVM&#x2F;Linux hosts. I wouldn&#x27;t use it on a daily
basis on macOS and instead stick to the QEMU CLI with HVF set as the accelerator. You can
check my &lt;a href=&quot;https:&#x2F;&#x2F;www.arthurkoziel.com&#x2F;qemu-ubuntu-20-04&#x2F;&quot;&gt;previous blog post&lt;&#x2F;a&gt; on how to do that.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Tutorial: Tekton Triggers with GitHub integration</title>
        <published>2021-05-01T00:00:00+00:00</published>
        <updated>2021-05-01T00:00:00+00:00</updated>
        <author>
          <name>Arthur Koziel</name>
        </author>
        <link rel="alternate" href="https://www.arthurkoziel.com/tutorial-tekton-triggers-with-github-integration/" type="text/html"/>
        <id>https://www.arthurkoziel.com/tutorial-tekton-triggers-with-github-integration/</id>
        
        <content type="html">&lt;p&gt;In a &lt;a href=&quot;https:&#x2F;&#x2F;www.arthurkoziel.com&#x2F;creating-ci-pipelines-with-tekton-part-1&#x2F;&quot;&gt;previous blog
post&lt;&#x2F;a&gt;
we&#x27;ve used &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;tektoncd&#x2F;pipeline&quot;&gt;Tekton Pipelines&lt;&#x2F;a&gt; to set up a
simple pipeline that runs tests, builds a docker image and pushes it to a
registry.&lt;&#x2F;p&gt;
&lt;p&gt;In this blog post we&#x27;re going to take a look at &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;tektoncd&#x2F;triggers&quot;&gt;Tekton
Triggers&lt;&#x2F;a&gt; and integrate it with GitHub.
We&#x27;re going to setup a GitHub webhook that will automatically run our pipeline
when a GitHub PR is opened or new commits are pushed to an existing PR branch.&lt;&#x2F;p&gt;
&lt;p&gt;All code examples in this blog post are available in a &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;arthurk&#x2F;tekton-triggers-example&quot;&gt;GitHub repo&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;table-of-contents&quot;&gt;Table of contents&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.arthurkoziel.com&#x2F;tutorial-tekton-triggers-with-github-integration&#x2F;#requirements&quot;&gt;Requirements&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.arthurkoziel.com&#x2F;tutorial-tekton-triggers-with-github-integration&#x2F;#installation&quot;&gt;Installation&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.arthurkoziel.com&#x2F;tutorial-tekton-triggers-with-github-integration&#x2F;#creating-a-pipeline&quot;&gt;Creating a Pipeline&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.arthurkoziel.com&#x2F;tutorial-tekton-triggers-with-github-integration&#x2F;#creating-resources-for-tekton-triggers&quot;&gt;Creating Resources for Tekton Triggers&lt;&#x2F;a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.arthurkoziel.com&#x2F;tutorial-tekton-triggers-with-github-integration&#x2F;#eventlistener&quot;&gt;EventListener&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.arthurkoziel.com&#x2F;tutorial-tekton-triggers-with-github-integration&#x2F;#github-interceptor&quot;&gt;GitHub Interceptor&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.arthurkoziel.com&#x2F;tutorial-tekton-triggers-with-github-integration&#x2F;#cel-interceptor&quot;&gt;CEL Interceptor&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.arthurkoziel.com&#x2F;tutorial-tekton-triggers-with-github-integration&#x2F;#triggerbinding&quot;&gt;TriggerBinding&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.arthurkoziel.com&#x2F;tutorial-tekton-triggers-with-github-integration&#x2F;#triggertemplate&quot;&gt;TriggerTemplate&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.arthurkoziel.com&#x2F;tutorial-tekton-triggers-with-github-integration&#x2F;#ingress&quot;&gt;Ingress&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.arthurkoziel.com&#x2F;tutorial-tekton-triggers-with-github-integration&#x2F;#adding-the-webhook-to-github&quot;&gt;Adding the webhook to Github&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.arthurkoziel.com&#x2F;tutorial-tekton-triggers-with-github-integration&#x2F;#creating-a-pr-and-testing-our-trigger&quot;&gt;Creating a PR and testing our trigger&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.arthurkoziel.com&#x2F;tutorial-tekton-triggers-with-github-integration&#x2F;#summary&quot;&gt;Summary&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;requirements&quot;&gt;Requirements&lt;&#x2F;h2&gt;
&lt;p&gt;For this tutorial we need a Kubernetes cluster with an
ingress-controller installed that can give us an external IP.&lt;&#x2F;p&gt;
&lt;p&gt;We also need a GitHub repository where we can add the webhook.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;installation&quot;&gt;Installation&lt;&#x2F;h2&gt;
&lt;p&gt;Tekton Triggers requires Tekton Pipelines to be installed. We also need to install the core interceptors (GitHub, GitLab, BitBucket, and CEL) manifests as we&#x27;ll use them later on.&lt;&#x2F;p&gt;
&lt;p&gt;By default all resources will be installed in the &lt;code&gt;tekton-pipelines&lt;&#x2F;code&gt; namespace.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#282a36;color:#f8f8f2;&quot;&gt;&lt;code&gt;&lt;span&gt;# Tekton Pipelines
&lt;&#x2F;span&gt;&lt;span&gt;kubectl apply -f https:&#x2F;&#x2F;storage.googleapis.com&#x2F;tekton-releases&#x2F;pipeline&#x2F;previous&#x2F;v0.23.0&#x2F;release.yaml
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;# Tekton Triggers + Interceptors
&lt;&#x2F;span&gt;&lt;span&gt;kubectl apply -f https:&#x2F;&#x2F;storage.googleapis.com&#x2F;tekton-releases&#x2F;triggers&#x2F;previous&#x2F;v0.13.0&#x2F;release.yaml
&lt;&#x2F;span&gt;&lt;span&gt;kubectl apply -f https:&#x2F;&#x2F;storage.googleapis.com&#x2F;tekton-releases&#x2F;triggers&#x2F;previous&#x2F;v0.13.0&#x2F;interceptors.yaml
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Configure RBAC for our Tekton Triggers service account:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#282a36;color:#f8f8f2;&quot;&gt;&lt;code&gt;&lt;span&gt;kubectl apply -f https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;arthurk&#x2F;tekton-triggers-example&#x2F;master&#x2F;01-rbac.yaml
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;creating-a-pipeline&quot;&gt;Creating a Pipeline&lt;&#x2F;h2&gt;
&lt;p&gt;We&#x27;re going to use a simple pipeline that clones a Git repo with a Go application in it and runs the tests. The example application can be found at &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;arthurk&#x2F;go-example-app&quot;&gt;GitHub&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;arthurk&#x2F;tekton-triggers-example&#x2F;blob&#x2F;master&#x2F;02-pipeline.yaml&quot;&gt;pipeline.yaml&lt;&#x2F;a&gt;&lt;&#x2F;strong&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;yaml&quot; style=&quot;background-color:#282a36;color:#f8f8f2;&quot; class=&quot;language-yaml &quot;&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;apiVersion&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;tekton.dev&#x2F;v1beta1
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;kind&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;Pipeline
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;metadata&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;github-pr-pipeline
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;spec&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;resources&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;source
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;type&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;git
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;tasks&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;test
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;taskRef&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;test
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;resources&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;inputs&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;          - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;source
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;resource&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;source
&lt;&#x2F;span&gt;&lt;span&gt;---
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;apiVersion&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;tekton.dev&#x2F;v1beta1
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;kind&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;Task
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;metadata&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;test
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;spec&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;resources&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;inputs&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;      - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;source
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;type&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;git
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;steps&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;run-test
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;image&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;golang:1.16.3-alpine3.13
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;workingDir&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&#x2F;workspace&#x2F;source
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;command&lt;&#x2F;span&gt;&lt;span&gt;: [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;go&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;args&lt;&#x2F;span&gt;&lt;span&gt;: [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;test&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;creating-resources-for-tekton-triggers&quot;&gt;Creating Resources for Tekton Triggers&lt;&#x2F;h2&gt;
&lt;p&gt;For our project we need to create the following resources:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;EventListener&lt;&#x2F;code&gt;: A Kubernetes Service that listens for incoming HTTP requests and executes a Trigger. &lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;Trigger&lt;&#x2F;code&gt;: Decides what to do with the received event. Sets a TriggerBinding, TriggerTemplate and Interceptor to run.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;TriggerBinding&lt;&#x2F;code&gt;: Specifies the data to be extracted from the request and saved as parameters. This data will be passed to the TriggerTemplate.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;TriggerTemplate&lt;&#x2F;code&gt;: A template of a resource (TaskRun&#x2F;PipelineRun) to be created when an event is received.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;Interceptor&lt;&#x2F;code&gt;: Processes an event to do custom validation or filtering&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;eventlistener&quot;&gt;EventListener&lt;&#x2F;h3&gt;
&lt;p&gt;An &lt;code&gt;EventListener&lt;&#x2F;code&gt; processes an incoming request and executes a &lt;code&gt;Trigger&lt;&#x2F;code&gt;. Our
EventListener looks like this:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;arthurk&#x2F;tekton-triggers-example&#x2F;blob&#x2F;master&#x2F;03-eventlistener.yaml&quot;&gt;eventlistener.yaml&lt;&#x2F;a&gt;&lt;&#x2F;strong&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;yaml&quot; style=&quot;background-color:#282a36;color:#f8f8f2;&quot; class=&quot;language-yaml &quot;&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;apiVersion&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;triggers.tekton.dev&#x2F;v1alpha1
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;kind&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;EventListener
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;metadata&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;github-pr
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;spec&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;serviceAccountName&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;tekton-triggers-example-sa
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;triggers&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;github-listener
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;interceptors&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;        - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;ref&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;github&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;params&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;            - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;secretRef&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;              &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;value&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;secretName&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;github-interceptor-secret
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;secretKey&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;secretToken
&lt;&#x2F;span&gt;&lt;span&gt;            - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;eventTypes&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;              &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;value&lt;&#x2F;span&gt;&lt;span&gt;: [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;pull_request&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;        - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;ref&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;cel&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;params&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;            - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;filter&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;              &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;value&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;body.action in [&amp;#39;opened&amp;#39;, &amp;#39;synchronize&amp;#39;, &amp;#39;reopened&amp;#39;]&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;bindings&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;        - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;ref&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;github-pr-binding
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;template&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;ref&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;github-pr-pipeline-template
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;After receiving the incoming request it will execute the &lt;code&gt;github-listener&lt;&#x2F;code&gt;
Trigger. In this case the Trigger is embedded into the EventListener resource
rather than specified in a separate resource. &lt;&#x2F;p&gt;
&lt;p&gt;Our github-listener trigger will then make use of &lt;code&gt;Interceptor&lt;&#x2F;code&gt;&#x27;s. An
Interceptor let&#x27;s us validate or modify incoming requests before they trigger a
pipeline run. We embed the Interceptor resource rather than putting it into a
separate resource manifest.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;github-interceptor&quot;&gt;GitHub Interceptor&lt;&#x2F;h3&gt;
&lt;p&gt;The first interceptor we&#x27;re running is called &lt;code&gt;github&lt;&#x2F;code&gt;. It&#x27;s part of the core
interceptors that we installed above. It makes sure that the request:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;has a valid format for GitHub webhooks&lt;&#x2F;li&gt;
&lt;li&gt;matches a pre-defined secret (that we&#x27;ll set later) &lt;&#x2F;li&gt;
&lt;li&gt;matches the &lt;code&gt;pull_request&lt;&#x2F;code&gt; event type&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;The github interceptor requires a secret token. This token is set when creating
the webhook in GitHub and will be validated by the github interceptor when the
request arrives:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;arthurk&#x2F;tekton-triggers-example&#x2F;blob&#x2F;master&#x2F;04-secret.yaml&quot;&gt;secret.yaml&lt;&#x2F;a&gt;:&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;yaml&quot; style=&quot;background-color:#282a36;color:#f8f8f2;&quot; class=&quot;language-yaml &quot;&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;apiVersion&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;v1
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;kind&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;Secret
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;metadata&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;github-interceptor-secret
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;type&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;Opaque
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;stringData&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;secretToken&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;1234567&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;cel-interceptor&quot;&gt;CEL Interceptor&lt;&#x2F;h3&gt;
&lt;p&gt;The second interceptor we&#x27;re using is called &lt;code&gt;cel&lt;&#x2F;code&gt; and is also included in the
core interceptor manifests that we installed above. Interceptors are executed in
the order they&#x27;re specified. The cel interceptor will run after the github
interceptor.&lt;&#x2F;p&gt;
&lt;p&gt;It let&#x27;s us specify a &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;google&#x2F;cel-go&quot;&gt;CEL&lt;&#x2F;a&gt; filter expression
that will be applied to requests.&lt;&#x2F;p&gt;
&lt;p&gt;We&#x27;ll apply this filter expression because GitHub &lt;code&gt;pull_request&lt;&#x2F;code&gt; events are sent
for every action performed on a pull request (&lt;code&gt;assigned&lt;&#x2F;code&gt;, &lt;code&gt;unassigned&lt;&#x2F;code&gt;,
&lt;code&gt;converted_to_draft&lt;&#x2F;code&gt;, ...).&lt;&#x2F;p&gt;
&lt;p&gt;For this tutorial we only need to know when a PR was &lt;code&gt;opened&lt;&#x2F;code&gt;, &lt;code&gt;reopened&lt;&#x2F;code&gt; or
&lt;code&gt;synchronized&lt;&#x2F;code&gt; (commits pushed to the PR branch). The CEL filter checks the
webhook request &lt;code&gt;body.action&lt;&#x2F;code&gt; and filters our any events that don&#x27;t match those
actions.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;triggerbinding&quot;&gt;TriggerBinding&lt;&#x2F;h3&gt;
&lt;p&gt;After the event listener is done validating and modifying the incoming request,
we need to extract values from it and bind them to variables that we can later
use in our Pipeline. This is what a &lt;code&gt;TriggerBinding&lt;&#x2F;code&gt; is used for.&lt;&#x2F;p&gt;
&lt;p&gt;Our TriggerBinding looks like this:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;arthurk&#x2F;tekton-triggers-example&#x2F;blob&#x2F;master&#x2F;05-triggerbinding.yaml&quot;&gt;triggerbinding.yaml&lt;&#x2F;a&gt;&lt;&#x2F;strong&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;yaml&quot; style=&quot;background-color:#282a36;color:#f8f8f2;&quot; class=&quot;language-yaml &quot;&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;apiVersion&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;triggers.tekton.dev&#x2F;v1alpha1
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;kind&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;TriggerBinding
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;metadata&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;github-pr-binding
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;spec&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;params&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;gitrepositoryurl
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;value&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;$(body.repository.clone_url)
&lt;&#x2F;span&gt;&lt;span&gt;    - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;gitrevision
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;value&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;$(body.pull_request.head.sha)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We&#x27;re only interested in the followinw two fields which are necessary to clone
the repo at a specific revision:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;gitrepositoryurl: the url of the repo to clone (https:&#x2F;&#x2F;...)&lt;&#x2F;li&gt;
&lt;li&gt;gitrevision: the commit SHA to check out&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;The parameters are passed to a &lt;code&gt;TriggerTemplate&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;triggertemplate&quot;&gt;TriggerTemplate&lt;&#x2F;h3&gt;
&lt;p&gt;A TriggerTemplate is responsible for dynamically generating a resource. In our
case it&#x27;s a &lt;code&gt;PipelineRun&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;The TriggerTemplate receives the two variables from the previously created
TriggerBinding and makes them available under &lt;code&gt;spec.resourcetemplates&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;arthurk&#x2F;tekton-triggers-example&#x2F;blob&#x2F;master&#x2F;06-triggertemplate.yaml&quot;&gt;triggertemplate.yaml&lt;&#x2F;a&gt;&lt;&#x2F;strong&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;yaml&quot; style=&quot;background-color:#282a36;color:#f8f8f2;&quot; class=&quot;language-yaml &quot;&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;apiVersion&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;triggers.tekton.dev&#x2F;v1alpha1
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;kind&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;TriggerTemplate
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;metadata&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;github-pr-pipeline-template
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;spec&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;params&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;gitrevision
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;description&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;The git revision (SHA)
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;default&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;master
&lt;&#x2F;span&gt;&lt;span&gt;    - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;gitrepositoryurl
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;description&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;The git repository url (&amp;quot;https:&#x2F;&#x2F;github.com&#x2F;foo&#x2F;bar.git&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;resourcetemplates&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;apiVersion&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;tekton.dev&#x2F;v1beta1
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;kind&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;PipelineRun
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;metadata&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;generateName&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;github-pr-pipeline-run-
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;spec&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;pipelineRef&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;github-pr-pipeline
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;resources&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;          - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;source
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;resourceSpec&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;              &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;type&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;git
&lt;&#x2F;span&gt;&lt;span&gt;              &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;params&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;                - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;revision
&lt;&#x2F;span&gt;&lt;span&gt;                  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;value&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;$(tt.params.gitrevision)
&lt;&#x2F;span&gt;&lt;span&gt;                - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;url
&lt;&#x2F;span&gt;&lt;span&gt;                  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;value&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;$(tt.params.gitrepositoryurl)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Note that to access variables from a triggertemplate inside a resourcetemplate
they need to be prefixed with &lt;code&gt;$tt&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;ingress&quot;&gt;Ingress&lt;&#x2F;h3&gt;
&lt;p&gt;For GitHub to be able to send a request to our event listener we need to expose
it by creating an Ingress resource and pointing it to our event listener
service:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;arthurk&#x2F;tekton-triggers-example&#x2F;blob&#x2F;master&#x2F;07-ingress.yaml&quot;&gt;ingress.yaml&lt;&#x2F;a&gt;&lt;&#x2F;strong&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;yaml&quot; style=&quot;background-color:#282a36;color:#f8f8f2;&quot; class=&quot;language-yaml &quot;&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;apiVersion&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;networking.k8s.io&#x2F;v1
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;kind&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;Ingress
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;metadata&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;ingress-resource
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;annotations&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;kubernetes.io&#x2F;ingress.class&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;nginx
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;nginx.ingress.kubernetes.io&#x2F;ssl-redirect&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;false&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;spec&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;rules&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;http&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;paths&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;          - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;path&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&#x2F;hooks
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;pathType&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;Exact
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;backend&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;              &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;service&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;el-github-pr
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;port&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;                  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;number&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bd93f9;&quot;&gt;8080
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;An EventListener will create a service with the &lt;code&gt;el-&lt;&#x2F;code&gt; prefix followed by the
name of the event-listener. Our event-listener is named &lt;code&gt;github-pr&lt;&#x2F;code&gt;, so the
EventListener Service is named &lt;code&gt;el-github-pr&lt;&#x2F;code&gt;. EventListener services will always use port 8080.&lt;&#x2F;p&gt;
&lt;p&gt;Make sure to note the external IP address of your ingress. In this example it&#x27;s &lt;code&gt;123.123.1.1&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#282a36;color:#f8f8f2;&quot;&gt;&lt;code&gt;&lt;span&gt;kubectl get ingress
&lt;&#x2F;span&gt;&lt;span&gt;NAME               CLASS    HOSTS   ADDRESS        PORTS   AGE
&lt;&#x2F;span&gt;&lt;span&gt;ingress-resource   &amp;lt;none&amp;gt;   *       123.123.1.1    80      26d
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We can now send GitHub webhook requests to &lt;code&gt;http:&#x2F;&#x2F;123.123.1.1&#x2F;hooks&lt;&#x2F;code&gt; and automatically trigger a PipelineRun.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;adding-the-webhook-to-github&quot;&gt;Adding the webhook to Github&lt;&#x2F;h2&gt;
&lt;p&gt;In your GitHub repo go to &lt;code&gt;Settings -&amp;gt; Webhooks&lt;&#x2F;code&gt; and click &lt;code&gt;Add Webhook&lt;&#x2F;code&gt;. The
fields we need to set are:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Payload URL: Your external IP Address from the Ingress with &lt;code&gt;&#x2F;hooks&lt;&#x2F;code&gt; path&lt;&#x2F;li&gt;
&lt;li&gt;Content type: &lt;code&gt;application&#x2F;json&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Secret: &lt;code&gt;1234567&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Under events select &lt;code&gt;Let me select individual events&lt;&#x2F;code&gt;. Uncheck &lt;code&gt;Pushes&lt;&#x2F;code&gt; and check &lt;code&gt;Pull requests&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;www.arthurkoziel.com&#x2F;tutorial-tekton-triggers-with-github-integration&#x2F;add-webhook.png&quot; alt=&quot;Picture of GitHub Webhook settings&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;After saving the webhook, GitHub will send a ping event. It will be filtered out by our Interceptor which only allows &lt;code&gt;pull_request&lt;&#x2F;code&gt; events, but we can check the EventListener Pod logs to verify it:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#282a36;color:#f8f8f2;&quot;&gt;&lt;code&gt;&lt;span&gt;kubectl get pods | grep el-github-pr
&lt;&#x2F;span&gt;&lt;span&gt;el-github-pr-7df7f66d57-kqd6k     1&#x2F;1     Running   0          13s
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;kubectl logs el-github-pr-7df7f66d57-kqd6k
&lt;&#x2F;span&gt;&lt;span&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;quot;level&amp;quot;: &amp;quot;info&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;quot;ts&amp;quot;: &amp;quot;2021-05-01T08:48:59.461Z&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;quot;logger&amp;quot;: &amp;quot;eventlistener&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;quot;caller&amp;quot;: &amp;quot;sink&#x2F;sink.go:240&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;quot;msg&amp;quot;: &amp;quot;interceptor stopped trigger processing: rpc error: code = FailedPrecondition desc = event type ping is not allowed&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;quot;knative.dev&#x2F;controller&amp;quot;: &amp;quot;eventlistener&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;quot;&#x2F;triggers-eventid&amp;quot;: &amp;quot;f43a88c2-a462-47c9-a6cd-f98de681da40&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;quot;&#x2F;trigger&amp;quot;: &amp;quot;github-listener&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;creating-a-pr-and-testing-our-trigger&quot;&gt;Creating a PR and testing our trigger&lt;&#x2F;h2&gt;
&lt;p&gt;Let&#x27;s test that everything works by creating a PR, either manually or using the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;cli&#x2F;cli&#x2F;&quot;&gt;GitHub CLI&lt;&#x2F;a&gt;:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#282a36;color:#f8f8f2;&quot;&gt;&lt;code&gt;&lt;span&gt;git switch -c webhook-test
&lt;&#x2F;span&gt;&lt;span&gt;git commit --allow-empty -m &amp;quot;trigger webhook&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;gh pr create -f
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;And checking for a PipelineRun to get created:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#282a36;color:#f8f8f2;&quot;&gt;&lt;code&gt;&lt;span&gt;kubectl get pr
&lt;&#x2F;span&gt;&lt;span&gt;NAME                           SUCCEEDED   REASON      STARTTIME   COMPLETIONTIME
&lt;&#x2F;span&gt;&lt;span&gt;github-pr-pipeline-run-qfvsx   True        Succeeded   73s         44s
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We can see that everything worked. The pipeline was triggered and the run
succeeded.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;summary&quot;&gt;Summary&lt;&#x2F;h2&gt;
&lt;p&gt;In this tutorial we used Tekton Pipelines and Tekton Triggers to automatically
trigger a pipeline run when a GitHub PR is created or commits have been pushed
to its branch.&lt;&#x2F;p&gt;
&lt;p&gt;We setup a GitHub webhook that will send a Pull Request event to our Kubernetes
Ingress controller where it is passed on to the EventListener Service. The
service will use Interceptors to validate and filter the webhook payload. The
validated payload is passed to the TriggerBinding which will extract data from
the webhook request and map it to parameters. Lastly the TriggerTemplate will
populate a PipelineRun manifest with those parameters and create the resource,
which will then be picked up by Tekton Pipelines and processed.&lt;&#x2F;p&gt;
&lt;p&gt;To improve our pipeline futher we could send the status of the pipeline
(pending, running, failed) back to github, which will then display it in the web
UI. There&#x27;s a Task for that in the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;tektoncd&#x2F;catalog&#x2F;tree&#x2F;main&#x2F;task&#x2F;github-set-status&#x2F;0.2&quot;&gt;Tekton
Catalog&lt;&#x2F;a&gt;
which is easy to integrate. Or maybe we could &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;tektoncd&#x2F;catalog&#x2F;tree&#x2F;main&#x2F;task&#x2F;github-add-comment&quot;&gt;add a
comment&lt;&#x2F;a&gt;
to the PR with more detailed information.&lt;&#x2F;p&gt;
&lt;p&gt;Tekton Triggers is still in alpha phase and things change very frequently. You
can keep up with the development of the project by checking the the
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;tektoncd&#x2F;triggers&#x2F;&quot;&gt;Triggers&lt;&#x2F;a&gt; repo for code changes and the
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;tektoncd&#x2F;community&quot;&gt;Community&lt;&#x2F;a&gt; repo for feature proposals
and discussion around them. &lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Tutorial: Encrypting Kubernetes Secrets with Sealed Secrets</title>
        <published>2021-01-12T00:00:00+00:00</published>
        <updated>2021-01-12T00:00:00+00:00</updated>
        <author>
          <name>Arthur Koziel</name>
        </author>
        <link rel="alternate" href="https://www.arthurkoziel.com/encrypting-k8s-secrets-with-sealed-secrets/" type="text/html"/>
        <id>https://www.arthurkoziel.com/encrypting-k8s-secrets-with-sealed-secrets/</id>
        
        <content type="html">&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bitnami-labs&#x2F;sealed-secrets&#x2F;&quot;&gt;Sealed Secrets&lt;&#x2F;a&gt; is a solution to store encrypted &lt;a href=&quot;https:&#x2F;&#x2F;kubernetes.io&#x2F;&quot;&gt;Kubernetes&lt;&#x2F;a&gt; secrets in version control.&lt;&#x2F;p&gt;
&lt;p&gt;In this blog post we&#x27;ll learn how to install and use it.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;comparison-with-helm-secrets-and-sops&quot;&gt;Comparison with helm-secrets and sops&lt;&#x2F;h2&gt;
&lt;p&gt;A popular alternative to Sealed Secrets is &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;zendesk&#x2F;helm-secrets&quot;&gt;helm-secrets&lt;&#x2F;a&gt; which uses &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;mozilla&#x2F;sops&quot;&gt;sops&lt;&#x2F;a&gt; as a backend.&lt;&#x2F;p&gt;
&lt;p&gt;The main difference is:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Sealed Secrets decrypts the secret &lt;em&gt;server-side&lt;&#x2F;em&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Helm-secrets decrypts the secret &lt;em&gt;client-side&lt;&#x2F;em&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Client-side decryption with helm-secrets can be a security risk since the client (such as a CI&#x2F;CD system) needs to have access to the encryption key to perform the deployment. Note that this is not a problem if you use GitOps tools such as Argo CD or Flux.&lt;&#x2F;p&gt;
&lt;p&gt;With Sealed Secrets and server-side decryption we can avoid this security risk. The encryption key only exists in the Kubernetes cluster and is never exposed.&lt;&#x2F;p&gt;
&lt;p&gt;Sealed Secrets is not able to use cloud KMS solutions such as AWS KMS. If this is a requirement then go with sops&#x2F;helm-secrets.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;installation-via-helm-chart&quot;&gt;Installation via Helm chart&lt;&#x2F;h2&gt;
&lt;p&gt;Sealed Secrets consists of two components:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Client-side CLI tool to encrypt secrets and create sealed secrets&lt;&#x2F;li&gt;
&lt;li&gt;Server-side controller used to decrypt sealed secrets and create secrets&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;To install the controller in our Kubernetes cluster we&#x27;ll use the official Helm chart from the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bitnami-labs&#x2F;sealed-secrets&#x2F;tree&#x2F;master&#x2F;helm&#x2F;sealed-secrets&quot;&gt;sealed-secrets repository&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Add the repository and install it to the &lt;code&gt;kube-system&lt;&#x2F;code&gt; namespace:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#282a36;color:#f8f8f2;&quot;&gt;&lt;code&gt;&lt;span&gt;helm repo add sealed-secrets https:&#x2F;&#x2F;bitnami-labs.github.io&#x2F;sealed-secrets
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;helm install sealed-secrets --namespace kube-system --version 1.13.2 sealed-secrets&#x2F;sealed-secrets
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;cli-tool-installation&quot;&gt;CLI tool installation&lt;&#x2F;h2&gt;
&lt;p&gt;Secrets are encrypted client-side using the &lt;code&gt;kubeseal&lt;&#x2F;code&gt; CLI tool.&lt;&#x2F;p&gt;
&lt;p&gt;For macOS, we can use the &lt;a href=&quot;https:&#x2F;&#x2F;formulae.brew.sh&#x2F;formula&#x2F;kubeseal&quot;&gt;Homebrew formula&lt;&#x2F;a&gt;. For Linux, we can download the binary from the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bitnami-labs&#x2F;sealed-secrets&#x2F;releases&quot;&gt;GitHub release page&lt;&#x2F;a&gt;. &lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#282a36;color:#f8f8f2;&quot;&gt;&lt;code&gt;&lt;span&gt;# macos
&lt;&#x2F;span&gt;&lt;span&gt;brew install kubeseal
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;# linux
&lt;&#x2F;span&gt;&lt;span&gt;wget https:&#x2F;&#x2F;github.com&#x2F;bitnami-labs&#x2F;sealed-secrets&#x2F;releases&#x2F;download&#x2F;v0.13.1&#x2F;kubeseal-linux-amd64 -O kubeseal
&lt;&#x2F;span&gt;&lt;span&gt;sudo install -m 755 kubeseal &#x2F;usr&#x2F;local&#x2F;bin&#x2F;kubeseal
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The &lt;code&gt;kubeseal&lt;&#x2F;code&gt; CLI uses the current &lt;code&gt;kubectl&lt;&#x2F;code&gt; context to &lt;a href=&quot;https:&#x2F;&#x2F;kubernetes.io&#x2F;docs&#x2F;tasks&#x2F;access-application-cluster&#x2F;configure-access-multiple-clusters&#x2F;&quot;&gt;access the cluster&lt;&#x2F;a&gt;. Before continuing make sure that &lt;code&gt;kubectl&lt;&#x2F;code&gt; is connected to the cluster where Sealed Secrets should be installed.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;creating-a-sealed-secret&quot;&gt;Creating a sealed secret&lt;&#x2F;h2&gt;
&lt;p&gt;The &lt;code&gt;kubeseal&lt;&#x2F;code&gt; CLI takes a Kubernetes &lt;code&gt;Secret&lt;&#x2F;code&gt; manifest as an input, encrypts it and outputs a &lt;code&gt;SealedSecret&lt;&#x2F;code&gt; manifest.&lt;&#x2F;p&gt;
&lt;p&gt;In this tutorial we&#x27;ll use this secret manifest as an input:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;yaml&quot; style=&quot;background-color:#282a36;color:#f8f8f2;&quot; class=&quot;language-yaml &quot;&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;apiVersion&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;v1
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;kind&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;Secret
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;metadata&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;creationTimestamp&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bd93f9;&quot;&gt;null
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;my-secret
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;data&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;password&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;YmFy
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;username&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;Zm9v
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Store the manifest in a file named &lt;code&gt;secret.yaml&lt;&#x2F;code&gt; and encrypt it:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#282a36;color:#f8f8f2;&quot;&gt;&lt;code&gt;&lt;span&gt;cat secret.yaml | kubeseal \
&lt;&#x2F;span&gt;&lt;span&gt;    --controller-namespace kube-system \
&lt;&#x2F;span&gt;&lt;span&gt;    --controller-name sealed-secrets \
&lt;&#x2F;span&gt;&lt;span&gt;    --format yaml \
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;gt; sealed-secret.yaml
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The content of the &lt;code&gt;sealed-secret.yaml&lt;&#x2F;code&gt; file should look like this:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;yaml&quot; style=&quot;background-color:#282a36;color:#f8f8f2;&quot; class=&quot;language-yaml &quot;&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;apiVersion&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;bitnami.com&#x2F;v1alpha1
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;kind&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;SealedSecret
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;metadata&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;creationTimestamp&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bd93f9;&quot;&gt;null
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;my-secret
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;namespace&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;default
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;spec&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;encryptedData&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;password&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;AgA...
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;username&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;AgA...
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;template&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;metadata&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;creationTimestamp&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bd93f9;&quot;&gt;null
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;my-secret
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;namespace&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;default
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We should now have the secret in &lt;code&gt;secret.yaml&lt;&#x2F;code&gt; and the sealed secret in &lt;code&gt;sealed-secret.yaml&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;&#x2F;strong&gt;: It&#x27;s not a good practice to store the unencrypted secret in a file. This is only for demonstration purposes in this tutorial.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;To deploy the sealed secret we apply the manifest with kubectl:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#282a36;color:#f8f8f2;&quot;&gt;&lt;code&gt;&lt;span&gt;kubectl apply -f sealed-secret.yaml
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The controller in the cluster will notice that a &lt;code&gt;SealedSecret&lt;&#x2F;code&gt; resource has been created, decrypt it and create a decrypted &lt;code&gt;Secret&lt;&#x2F;code&gt;. &lt;&#x2F;p&gt;
&lt;p&gt;Let&#x27;s fetch the secret to make sure that the controller has successfully unsealed it:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#282a36;color:#f8f8f2;&quot;&gt;&lt;code&gt;&lt;span&gt;kubectl get secret my-secret -o yaml
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The data should contain our base64 encoded username and password:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#282a36;color:#f8f8f2;&quot;&gt;&lt;code&gt;&lt;span&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;data:
&lt;&#x2F;span&gt;&lt;span&gt;  password: YmFy
&lt;&#x2F;span&gt;&lt;span&gt;  username: Zm9v
&lt;&#x2F;span&gt;&lt;span&gt;...
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Everything went well. The secret has been successfully unsealed.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;updating-a-sealed-secret&quot;&gt;Updating a sealed secret&lt;&#x2F;h2&gt;
&lt;p&gt;To update a value in a sealed secret, we have to create a new &lt;code&gt;Secret&lt;&#x2F;code&gt; manifest locally and merge it into an existing &lt;code&gt;SealedSecret&lt;&#x2F;code&gt; with the &lt;code&gt;--merge-into&lt;&#x2F;code&gt; option.&lt;&#x2F;p&gt;
&lt;p&gt;In the example below we update the value of the password key (&lt;code&gt;--from-file=password&lt;&#x2F;code&gt;) to &lt;code&gt;my new password&lt;&#x2F;code&gt;. &lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#282a36;color:#f8f8f2;&quot;&gt;&lt;code&gt;&lt;span&gt;echo -n &amp;quot;my new password&amp;quot; \
&lt;&#x2F;span&gt;&lt;span&gt;    | kubectl create secret generic xxx --dry-run=client --from-file=password=&#x2F;dev&#x2F;stdin -o json \
&lt;&#x2F;span&gt;&lt;span&gt;    | kubeseal --controller-namespace=kube-system --controller-name=sealed-secrets --format yaml --merge-into sealed-secret.yaml
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;kubectl apply -f sealed-secret.yaml
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The local secret is temporary and the name (&lt;code&gt;xxx&lt;&#x2F;code&gt; in our case) doesn&#x27;t matter. The name of the sealed secret will stay the same.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;adding-a-new-value-to-a-sealed-secret&quot;&gt;Adding a new value to a sealed secret&lt;&#x2F;h2&gt;
&lt;p&gt;The difference between updating a value and adding a new value is the name of the key. If a key named &lt;code&gt;password&lt;&#x2F;code&gt; already exists, it will update it. If it doesn&#x27;t exist, it will add it.&lt;&#x2F;p&gt;
&lt;p&gt;For example to add a new &lt;code&gt;api_key&lt;&#x2F;code&gt; key (&lt;code&gt;--from-file=api_key&lt;&#x2F;code&gt;) into our secret we run:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#282a36;color:#f8f8f2;&quot;&gt;&lt;code&gt;&lt;span&gt;echo -n &amp;quot;my secret api key&amp;quot; \
&lt;&#x2F;span&gt;&lt;span&gt;    | kubectl create secret generic xxx --dry-run=client --from-file=api_key=&#x2F;dev&#x2F;stdin -o json \
&lt;&#x2F;span&gt;&lt;span&gt;    | kubeseal --controller-namespace=kube-system --controller-name=sealed-secrets --format yaml --merge-into sealed-secret.yaml
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;kubectl apply -f sealed-secret.yaml
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;deleting-a-value-from-a-sealed-secret&quot;&gt;Deleting a value from a sealed secret&lt;&#x2F;h2&gt;
&lt;p&gt;To delete a key from the sealed secret we have to remove it from the YAML file:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#282a36;color:#f8f8f2;&quot;&gt;&lt;code&gt;&lt;span&gt;# BSD sed (macOS)
&lt;&#x2F;span&gt;&lt;span&gt;sed -i &amp;#39;&amp;#39; &amp;#39;&#x2F;api_key:&#x2F;d&amp;#39; sealed-secret.yaml
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;# GNU sed
&lt;&#x2F;span&gt;&lt;span&gt;sed -i &amp;#39;&#x2F;api_key:&#x2F;d&amp;#39; sealed-secret.yaml
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;kubectl apply -f sealed-secret.yaml
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;After applying the file, the controller will update the &lt;code&gt;Secret&lt;&#x2F;code&gt; automatically and remove the &lt;code&gt;api_key&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;delete-the-sealed-secret&quot;&gt;Delete the sealed secret&lt;&#x2F;h2&gt;
&lt;p&gt;To delete the secret, we use kubectl to delete the resource:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#282a36;color:#f8f8f2;&quot;&gt;&lt;code&gt;&lt;span&gt;kubectl delete -f sealed-secret.yaml
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This will delete the &lt;code&gt;SealedSecret&lt;&#x2F;code&gt; resource from the cluster as well as the corresponding &lt;code&gt;Secret&lt;&#x2F;code&gt; resource.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;&#x2F;h2&gt;
&lt;p&gt;Sealed Secrets is a secure way to manage Kubernetes secrets in version control. The encryption key is stored and secrets are decrypted in the cluster. The client doesn&#x27;t have access to the encryption key.&lt;&#x2F;p&gt;
&lt;p&gt;The client uses the &lt;code&gt;kubeseal&lt;&#x2F;code&gt; CLI tool to generate &lt;code&gt;SealedSecret&lt;&#x2F;code&gt; manifests that hold encrypted data. After applying the file the server-side controller will recognize a new sealed secret resource and decrypt it to create a &lt;code&gt;Secret&lt;&#x2F;code&gt; resource.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Setting up Argo CD with Helm</title>
        <published>2021-01-05T00:00:00+00:00</published>
        <updated>2023-10-27T00:00:00+00:00</updated>
        <author>
          <name>Arthur Koziel</name>
        </author>
        <link rel="alternate" href="https://www.arthurkoziel.com/setting-up-argocd-with-helm/" type="text/html"/>
        <id>https://www.arthurkoziel.com/setting-up-argocd-with-helm/</id>
        
        <content type="html">&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;www.arthurkoziel.com&#x2F;setting-up-argocd-with-helm&#x2F;title.jpeg&quot; alt=&quot;blog post title picture&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;In this blog post we&#x27;re going to setup &lt;a href=&quot;https:&#x2F;&#x2F;argo-cd.readthedocs.io&#x2F;en&#x2F;stable&#x2F;&quot;&gt;Argo CD&lt;&#x2F;a&gt; on a Kubernetes cluster. We&#x27;ll install it with Helm, create an application to use the &lt;a href=&quot;https:&#x2F;&#x2F;argoproj.github.io&#x2F;argo-cd&#x2F;operator-manual&#x2F;declarative-setup&#x2F;#app-of-apps&quot;&gt;app-of-apps&lt;&#x2F;a&gt; pattern, set Argo CD up so that it can update itself, and install Prometheus via Argo CD as an example.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;www.arthurkoziel.com&#x2F;setting-up-argocd-with-helm&#x2F;1-argo-app-details.png&quot; alt=&quot;A picture of the Argo CD web UI showing the details view of an application&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;All files mentioned in this blog post are available in a &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;arthurk&#x2F;argocd-example-install&#x2F;&quot;&gt;Git repository on GitHub&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;what-is-argo-cd&quot;&gt;What is Argo CD?&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;argoproj.github.io&#x2F;argo-cd&#x2F;&quot;&gt;Argo CD&lt;&#x2F;a&gt; is a &lt;a href=&quot;https:&#x2F;&#x2F;www.gitops.tech&#x2F;&quot;&gt;GitOps&lt;&#x2F;a&gt; tool to automatically synchronize the cluster to the desired state defined in a Git repository. Each workload is defined declarative through a resource manifest in a YAML file. Argo CD checks if the state defined in the Git repository matches what is running on the cluster, and synchronizes it if changes were detected.&lt;&#x2F;p&gt;
&lt;p&gt;For example, instead of manually running CLI commands to update Kubernetes resources with &lt;code&gt;kubectl apply&lt;&#x2F;code&gt; or &lt;code&gt;helm upgrade&lt;&#x2F;code&gt;, we update a YAML files that we then commit and push to our Git repository. Each workload is described in an &lt;code&gt;Application&lt;&#x2F;code&gt; manifest. Argo CD periodically checks resources that are defined in the manifest for changes, and will automatically synchronize them with the ones that are running on our cluster.&lt;&#x2F;p&gt;
&lt;p&gt;A connection to the cluster, either from the developer&#x27;s laptop or from a CI&#x2F;CD system, is no longer needed because changes are now pulled from the Git repository by a Kubernetes operator that&#x27;s running inside the cluster.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;requirements&quot;&gt;Requirements&lt;&#x2F;h2&gt;
&lt;p&gt;To follow this tutorial, you&#x27;ll need the following:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;A Kubernetes cluster (1.28)&lt;&#x2F;li&gt;
&lt;li&gt;kubectl (1.28)&lt;&#x2F;li&gt;
&lt;li&gt;Helm (3.13)&lt;&#x2F;li&gt;
&lt;li&gt;A public git repository (for Argo CD to pull the manifests)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Our application manifests will be stored in a public Git repository. For this tutorial I&#x27;m using GitHub, but this can be any public Git repository, and GitLab, Gitea, etc. work just as well.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;creating-a-custom-helm-chart&quot;&gt;Creating a custom Helm chart&lt;&#x2F;h2&gt;
&lt;p&gt;We&#x27;ll use Helm to install Argo CD with the community-maintained chart from &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;argoproj&#x2F;argo-helm&#x2F;tree&#x2F;main&#x2F;charts&#x2F;argo-cd&quot;&gt;argoproj&#x2F;argo-helm&lt;&#x2F;a&gt;. The Argo project doesn&#x27;t provide an official Helm chart.&lt;&#x2F;p&gt;
&lt;p&gt;Specifically, we are going to create a Helm &amp;quot;umbrella chart&amp;quot;. This is basically a custom chart that wraps another chart. It pulls the original chart in as a dependency, and overrides the default values. In our case, we create an &lt;code&gt;argo-cd&lt;&#x2F;code&gt; Helm chart that wraps the community-maintained &lt;code&gt;argo-cd&lt;&#x2F;code&gt; Helm chart.&lt;&#x2F;p&gt;
&lt;p&gt;Using this approach, we have more flexibility in the future, by possibly including additional Kubernetes resources. The most common use case for this is to add Secrets (which could be encrypted using sops or SealedSecrets) to our application. For example, if we use webhooks with Argo CD, we have the possibility to securely store the webhook URL in a Secret.&lt;&#x2F;p&gt;
&lt;p&gt;To create the umbrella chart, we make a directory in our Git repository:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#282a36;color:#f8f8f2;&quot;&gt;&lt;code&gt;&lt;span&gt;$ mkdir -p charts&#x2F;argo-cd
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Then place a &lt;code&gt;Chart.yaml&lt;&#x2F;code&gt; file in it:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;arthurk&#x2F;argocd-example-install&#x2F;blob&#x2F;master&#x2F;charts&#x2F;argo-cd&#x2F;Chart.yaml&quot;&gt;charts&#x2F;argo-cd&#x2F;Chart.yaml&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;yaml&quot; style=&quot;background-color:#282a36;color:#f8f8f2;&quot; class=&quot;language-yaml &quot;&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;apiVersion&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;v2
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;argo-cd
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;version&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bd93f9;&quot;&gt;1.0.0
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;dependencies&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;argo-cd
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;version&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bd93f9;&quot;&gt;5.46.8
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;repository&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;https:&#x2F;&#x2F;argoproj.github.io&#x2F;argo-helm
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The version of &lt;em&gt;our&lt;&#x2F;em&gt; custom chart doesn&#x27;t matter and can stay the same. The version of the dependency matters and if you want to upgrade the chart, would be the place to do it. The important thing is that we pull in the community-maintained argo-cd chart as a dependency. Next, create a values.yaml file for our chart:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;arthurk&#x2F;argocd-example-install&#x2F;blob&#x2F;master&#x2F;charts&#x2F;argo-cd&#x2F;values.yaml&quot;&gt;charts&#x2F;argo-cd&#x2F;values.yaml&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;yaml&quot; style=&quot;background-color:#282a36;color:#f8f8f2;&quot; class=&quot;language-yaml &quot;&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;argo-cd&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;dex&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;enabled&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bd93f9;&quot;&gt;false
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;notifications&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;enabled&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bd93f9;&quot;&gt;false
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;applicationSet&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;enabled&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bd93f9;&quot;&gt;false
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;server&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;extraArgs&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;      - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;--insecure
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;To override the chart values of a dependency, we have to place them under the dependency name. Since our dependency in the Chart.yaml is called &lt;code&gt;argo-cd&lt;&#x2F;code&gt;, we have to place our values under the &lt;code&gt;argo-cd:&lt;&#x2F;code&gt; key. If the dependency name would be &lt;code&gt;abcd&lt;&#x2F;code&gt;, we&#x27;d place the values under the &lt;code&gt;abcd:&lt;&#x2F;code&gt; key.&lt;&#x2F;p&gt;
&lt;p&gt;All available options for the Argo CD Helm chart can be found in the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;argoproj&#x2F;argo-helm&#x2F;blob&#x2F;main&#x2F;charts&#x2F;argo-cd&#x2F;values.yaml&quot;&gt;values.yaml&lt;&#x2F;a&gt; file. &lt;&#x2F;p&gt;
&lt;p&gt;We use a rather minimal installation, and disable components that are not useful for this tutorial. The changes are:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Disable the dex component (integration with external auth providers).&lt;&#x2F;li&gt;
&lt;li&gt;Disable the notifications controller (notify users about changes to application state).&lt;&#x2F;li&gt;
&lt;li&gt;Disable the ApplicationSet controller (automated generation of Argo CD Applications).&lt;&#x2F;li&gt;
&lt;li&gt;We start the server with the &lt;code&gt;--insecure&lt;&#x2F;code&gt; flag to serve the Web UI over HTTP. For this tutorial, we&#x27;re using a local k8s server without TLS setup.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Before we install our chart, we need to generate a Helm chart lock file for it. When installing a Helm chart, Argo CD checks the lock file for any dependencies and downloads them. Not having the lock file will result in an error.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#282a36;color:#f8f8f2;&quot;&gt;&lt;code&gt;&lt;span&gt;$ helm repo add argo-cd https:&#x2F;&#x2F;argoproj.github.io&#x2F;argo-helm
&lt;&#x2F;span&gt;&lt;span&gt;$ helm dep update charts&#x2F;argo-cd&#x2F;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This will create the &lt;code&gt;Chart.lock&lt;&#x2F;code&gt; and &lt;code&gt;charts&#x2F;argo-cd-&amp;lt;version&amp;gt;.tgz&lt;&#x2F;code&gt; files. The .tgz file is only required for the initial installation from our local machine. To avoid accidentally committing it, we can add it to the gitignore file:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#282a36;color:#f8f8f2;&quot;&gt;&lt;code&gt;&lt;span&gt;$ echo &amp;quot;charts&#x2F;**&#x2F;charts&amp;quot; &amp;gt;&amp;gt; .gitignore
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Our custom chart is ready and can be pushed to our public Git repository:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#282a36;color:#f8f8f2;&quot;&gt;&lt;code&gt;&lt;span&gt;$ git add charts&#x2F;argo-cd
&lt;&#x2F;span&gt;&lt;span&gt;$ git commit -m &amp;#39;add argo-cd chart&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;$ git push
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The next step is to install our chart.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;installing-our-helm-chart&quot;&gt;Installing our Helm chart&lt;&#x2F;h2&gt;
&lt;p&gt;We have to do the initial installation manually from our local machine, later we set up Argo CD to manage itself (meaning that Argo CD will automatically detect any changes to the helm chart and synchronize it):&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#282a36;color:#f8f8f2;&quot;&gt;&lt;code&gt;&lt;span&gt;$ helm install argo-cd charts&#x2F;argo-cd&#x2F;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;After a minute all resources should have been deployed:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#282a36;color:#f8f8f2;&quot;&gt;&lt;code&gt;&lt;span&gt;$ kubectl get pods
&lt;&#x2F;span&gt;&lt;span&gt;NAME                                         READY   STATUS    RESTARTS   AGE
&lt;&#x2F;span&gt;&lt;span&gt;argo-cd-argocd-redis-65ff569495-xtc86        1&#x2F;1     Running   0          10s
&lt;&#x2F;span&gt;&lt;span&gt;argo-cd-argocd-repo-server-7c487bb9c-bl77h   1&#x2F;1     Running   0          10s
&lt;&#x2F;span&gt;&lt;span&gt;argo-cd-argocd-server-6fd79f8fb5-54z9j       1&#x2F;1     Running   0          10s
&lt;&#x2F;span&gt;&lt;span&gt;argo-cd-argocd-application-controller-0      1&#x2F;1     Running   0          10s
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;accessing-the-web-ui&quot;&gt;Accessing the Web UI&lt;&#x2F;h2&gt;
&lt;p&gt;The Helm chart doesn&#x27;t install an Ingress by default. To access the Web UI we have to port-forward to the &lt;code&gt;argocd-server&lt;&#x2F;code&gt; service on port 443:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#282a36;color:#f8f8f2;&quot;&gt;&lt;code&gt;&lt;span&gt;$ kubectl port-forward svc&#x2F;argo-cd-argocd-server 8080:443
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We can then visit &lt;a href=&quot;http:&#x2F;&#x2F;localhost:8080&quot;&gt;http:&#x2F;&#x2F;localhost:8080&lt;&#x2F;a&gt; to access it, which will show as a login form. The default username is &lt;strong&gt;&lt;code&gt;admin&lt;&#x2F;code&gt;&lt;&#x2F;strong&gt;. The password is auto-generated, we can get it with:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#282a36;color:#f8f8f2;&quot;&gt;&lt;code&gt;&lt;span&gt;$ kubectl get secret argocd-initial-admin-secret -o jsonpath=&amp;quot;{.data.password}&amp;quot; | base64 -d
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Note that some shells (like Zsh) display a percentage sign at the end. It&#x27;s not part of the password.&lt;&#x2F;p&gt;
&lt;p&gt;After logging in, we&#x27;ll see the empty Web UI:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;www.arthurkoziel.com&#x2F;setting-up-argocd-with-helm&#x2F;2-argo-new-install.png&quot; alt=&quot;A picture of the Argo CD Web UI after logging in for the first time&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;At this point, Argo CD applications could be added through the Web UI or CLI, but we want to manage everything in a declarative way (Infrastructure as code). This means need to write &lt;code&gt;Application&lt;&#x2F;code&gt; manifests in YAML, and commit them to our Git repo.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;applications-and-root-app&quot;&gt;Applications and root-app&lt;&#x2F;h2&gt;
&lt;p&gt;In general, when we want to add an application to Argo CD, we need to add an &lt;a href=&quot;https:&#x2F;&#x2F;argo-cd.readthedocs.io&#x2F;en&#x2F;stable&#x2F;operator-manual&#x2F;declarative-setup&#x2F;#applications&quot;&gt;&lt;code&gt;Application&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; resource in our Kubernetes cluster. The resource needs to specify where to find manifests for our application. These manifest can either be YAML files, a Helm chart, Kustomize or Jsonnet. In this tutorial, we&#x27;ll focus on creating applications that use Helm charts.&lt;&#x2F;p&gt;
&lt;p&gt;For example, if we wanted to deploy &lt;a href=&quot;https:&#x2F;&#x2F;prometheus.io&#x2F;&quot;&gt;Prometheus&lt;&#x2F;a&gt; (which we will do later), we would write a &lt;code&gt;Application&lt;&#x2F;code&gt; YAML manifest for it, and put it in our Git repository. It would specify the URL to the Prometheus Helm-Chart, and override values to customize it. We would then apply the manifest and wait for the resources to be created in the cluster.&lt;&#x2F;p&gt;
&lt;p&gt;The easiest way to apply the manifest is with the kubectl CLI. However, it&#x27;s a manual step that&#x27;s error-prone, insecure, and we need to repeat it every time we add or update applications. With Argo CD there is a better way to handle this. We can automate adding&#x2F;updating applications by creating an Application that implements the &lt;a href=&quot;https:&#x2F;&#x2F;argo-cd.readthedocs.io&#x2F;en&#x2F;stable&#x2F;operator-manual&#x2F;declarative-setup&#x2F;#app-of-apps&quot;&gt;app of apps&lt;&#x2F;a&gt; pattern. In this tutorial, we&#x27;ll call this the &lt;strong&gt;&amp;quot;root-app&amp;quot;&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;The root-app is a Helm chart that renders Application manifests. Initially it has to be added manually, but after that we can just commit Application manifests with Git, and they will be deployed automatically.&lt;&#x2F;p&gt;
&lt;p&gt;To show how this works in more detail, we&#x27;ll create the root-app next.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;creating-the-root-app-helm-chart&quot;&gt;Creating the root-app Helm chart&lt;&#x2F;h2&gt;
&lt;p&gt;The root-app will be a Helm chart. You could also use Kubernetes YAML manifests, but after adding more applications there will be a lot of duplicated code (like the destination cluster), and we can reduce it by putting the values in the charts values file. Another interesting solution for this are &lt;a href=&quot;https:&#x2F;&#x2F;argo-cd.readthedocs.io&#x2F;en&#x2F;stable&#x2F;user-guide&#x2F;application-set&#x2F;&quot;&gt;ApplicationSets&lt;&#x2F;a&gt;, but we won&#x27;t cover them in this tutorial.&lt;&#x2F;p&gt;
&lt;p&gt;We create the chart in the same public Git repository from before. We put a &lt;code&gt;Chart.yaml&lt;&#x2F;code&gt; file and an (empty) &lt;code&gt;values.yaml&lt;&#x2F;code&gt; file in it:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#282a36;color:#f8f8f2;&quot;&gt;&lt;code&gt;&lt;span&gt;$ mkdir -p charts&#x2F;root-app&#x2F;templates
&lt;&#x2F;span&gt;&lt;span&gt;$ touch charts&#x2F;root-app&#x2F;values.yaml
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;arthurk&#x2F;argocd-example-install&#x2F;blob&#x2F;master&#x2F;charts&#x2F;root-app&#x2F;Chart.yaml&quot;&gt;charts&#x2F;root-app&#x2F;Chart.yaml&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;yaml&quot; style=&quot;background-color:#282a36;color:#f8f8f2;&quot; class=&quot;language-yaml &quot;&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;apiVersion&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;v2
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;root-app
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;version&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bd93f9;&quot;&gt;1.0.0
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We create the &lt;code&gt;Application&lt;&#x2F;code&gt; manifest for our root-app in &lt;code&gt;charts&#x2F;root-app&#x2F;templates&#x2F;root-app.yaml&lt;&#x2F;code&gt;. Make sure to replace the &lt;code&gt;repoURL&lt;&#x2F;code&gt; with the one for your public Git repo:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;arthurk&#x2F;argocd-example-install&#x2F;blob&#x2F;master&#x2F;charts&#x2F;root-app&#x2F;templates&#x2F;root-app.yaml&quot;&gt;charts&#x2F;root-app&#x2F;templates&#x2F;root-app.yaml&lt;&#x2F;a&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;yaml&quot; style=&quot;background-color:#282a36;color:#f8f8f2;&quot; class=&quot;language-yaml &quot;&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;apiVersion&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;argoproj.io&#x2F;v1alpha1
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;kind&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;Application
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;metadata&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;root-app
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;finalizers&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;resources-finalizer.argocd.argoproj.io
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;spec&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;project&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;default
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;source&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;repoURL&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;https:&#x2F;&#x2F;github.com&#x2F;arthurk&#x2F;argocd-example-install.git
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;path&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;charts&#x2F;root-app&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;targetRevision&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;HEAD
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;destination&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;server&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;https:&#x2F;&#x2F;kubernetes.default.svc
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;namespace&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;default
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;syncPolicy&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;automated&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;selfHeal&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bd93f9;&quot;&gt;true
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The above &lt;code&gt;Application&lt;&#x2F;code&gt; watches our root-app Helm chart (under &lt;code&gt;charts&#x2F;root-app&#x2F;&lt;&#x2F;code&gt;), and if changes were detected, synchronizes (meaning that it will render the Helm chart and apply the resulting manifests on the cluster) it. &lt;&#x2F;p&gt;
&lt;p&gt;How does Argo CD know our application is a Helm chart? It looks for a &lt;code&gt;Chart.yaml&lt;&#x2F;code&gt; file under &lt;code&gt;path&lt;&#x2F;code&gt; in the Git repository. The same applies for Kustomize, which will be used if it finds a &lt;code&gt;kustomization.yaml&lt;&#x2F;code&gt; in a directory.&lt;&#x2F;p&gt;
&lt;p&gt;Argo CD will not use &lt;code&gt;helm install&lt;&#x2F;code&gt; to install charts. It will render the chart with &lt;code&gt;helm template&lt;&#x2F;code&gt; and then apply the output with &lt;code&gt;kubectl&lt;&#x2F;code&gt;. This means we can&#x27;t run &lt;code&gt;helm list&lt;&#x2F;code&gt; on a local machine to get all installed releases.&lt;&#x2F;p&gt;
&lt;p&gt;We push the files to our Git repository:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#282a36;color:#f8f8f2;&quot;&gt;&lt;code&gt;&lt;span&gt;$ git add charts&#x2F;root-app
&lt;&#x2F;span&gt;&lt;span&gt;$ git commit -m &amp;#39;add root-app&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;$ git push
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;And then apply the manifest in our Kubernetes cluster. The first time we have to do it manually, later we&#x27;ll let Argo CD manage the root-app and synchronize it automatically:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#282a36;color:#f8f8f2;&quot;&gt;&lt;code&gt;&lt;span&gt;$ helm template root-app&#x2F; | kubectl apply -f -
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;In the Web UI we can now see that the root-app was created:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;www.arthurkoziel.com&#x2F;setting-up-argocd-with-helm&#x2F;3-argo-root-app-created.png&quot; alt=&quot;Argo CD Web UI showing root application&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;let-argo-cd-manage-itself&quot;&gt;Let Argo CD manage itself&lt;&#x2F;h2&gt;
&lt;p&gt;We previously installed Argo CD manually by running &lt;code&gt;helm install&lt;&#x2F;code&gt; from our local machine. This means that updates to Argo CD, like upgrading the chart version or changing the &lt;code&gt;values.yaml&lt;&#x2F;code&gt;, require us to execute the Helm CLI command from a local machine again. It&#x27;s repetitive, error-prone and inconsistent with how we install other applications in our cluster.&lt;&#x2F;p&gt;
&lt;p&gt;The solution is to let Argo CD manage Argo CD. To be more specific: We let the Argo CD controller watch for changes to the argo-cd helm chart in our repo (under &lt;code&gt;charts&#x2F;argo-cd&lt;&#x2F;code&gt;), render the Helm chart, and apply the resulting manifests. It&#x27;s done using &lt;code&gt;kubectl&lt;&#x2F;code&gt; and asynchronous, so it is safe for Kubernetes to restart the Argo CD Pods after it has been executed.&lt;&#x2F;p&gt;
&lt;p&gt;To achieve this, we need to create an Application manifest that points to our Argo CD chart. We&#x27;ll use the same chart version and values file as with our previous manual installation, so initially there won&#x27;t be any changes made to the resources in the cluster.&lt;&#x2F;p&gt;
&lt;p&gt;The application manifest looks like this:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;arthurk&#x2F;argocd-example-install&#x2F;blob&#x2F;master&#x2F;charts&#x2F;root-app&#x2F;templates&#x2F;argo-cd.yaml&quot;&gt;charts&#x2F;root-app&#x2F;templates&#x2F;argo-cd.yaml&lt;&#x2F;a&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;yaml&quot; style=&quot;background-color:#282a36;color:#f8f8f2;&quot; class=&quot;language-yaml &quot;&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;apiVersion&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;argoproj.io&#x2F;v1alpha1
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;kind&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;Application
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;metadata&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;argo-cd
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;finalizers&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;resources-finalizer.argocd.argoproj.io
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;spec&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;project&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;default
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;source&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;repoURL&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;https:&#x2F;&#x2F;github.com&#x2F;arthurk&#x2F;argocd-example-install.git
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;path&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;charts&#x2F;argo-cd
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;targetRevision&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;HEAD
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;destination&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;server&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;https:&#x2F;&#x2F;kubernetes.default.svc
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;namespace&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;default
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;syncPolicy&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;automated&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;selfHeal&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bd93f9;&quot;&gt;true
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We can commit and push the application manifest to our Git repository. We don&#x27;t need to generate a Chart.lock file since we don&#x27;t have any dependencies:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#282a36;color:#f8f8f2;&quot;&gt;&lt;code&gt;&lt;span&gt;$ git add charts&#x2F;root-app&#x2F;templates&#x2F;argo-cd.yaml
&lt;&#x2F;span&gt;&lt;span&gt;$ git commit -m &amp;#39;add argo-cd application&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;$ git push
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;In the Web UI we should now see the root-app being &lt;code&gt;OutOfSync&lt;&#x2F;code&gt;, and then changing to &lt;code&gt;Syncing&lt;&#x2F;code&gt;. If it doesn&#x27;t show the changes right away, it&#x27;s probably due to the default change detection polling rate of 3 minutes. We can speed this up by clicking on the &lt;em&gt;Refresh&lt;&#x2F;em&gt; button on the root-app which triggers a manual sync.&lt;&#x2F;p&gt;
&lt;p&gt;For faster change detection look into setting up &lt;a href=&quot;https:&#x2F;&#x2F;argo-cd.readthedocs.io&#x2F;en&#x2F;stable&#x2F;operator-manual&#x2F;webhook&#x2F;&quot;&gt;webhooks&lt;&#x2F;a&gt;, these will trigger a sync immediately after pushing to the Git repo.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;www.arthurkoziel.com&#x2F;setting-up-argocd-with-helm&#x2F;4-argo-app-created.png&quot; alt=&quot;Argo CD Web UI overview after the Argo CD application has been created&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Once the Argo CD application is green (synced) we&#x27;re done. We can make changes to our Argo CD installation the same way we change other applications: by changing the files in the repo and pushing it to our Git repository.&lt;&#x2F;p&gt;
&lt;p&gt;The final directory structure should look like this:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#282a36;color:#f8f8f2;&quot;&gt;&lt;code&gt;&lt;span&gt;└── charts
&lt;&#x2F;span&gt;&lt;span&gt;    ├── argo-cd
&lt;&#x2F;span&gt;&lt;span&gt;    │   ├── Chart.lock
&lt;&#x2F;span&gt;&lt;span&gt;    │   ├── Chart.yaml
&lt;&#x2F;span&gt;&lt;span&gt;    │   └── values.yaml
&lt;&#x2F;span&gt;&lt;span&gt;    └── root-app
&lt;&#x2F;span&gt;&lt;span&gt;        ├── Chart.yaml
&lt;&#x2F;span&gt;&lt;span&gt;        ├── templates
&lt;&#x2F;span&gt;&lt;span&gt;        │   ├── argo-cd.yaml
&lt;&#x2F;span&gt;&lt;span&gt;        │   └── root-app.yaml
&lt;&#x2F;span&gt;&lt;span&gt;        └── values.yaml
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;As a last step, we can remove the Secret that Helm creates for each manual chart installation:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#282a36;color:#f8f8f2;&quot;&gt;&lt;code&gt;&lt;span&gt;$ kubectl delete secret -l owner=helm,name=argo-cd
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;example-installing-prometheus&quot;&gt;Example: Installing Prometheus&lt;&#x2F;h2&gt;
&lt;p&gt;As a real-world example on how to deploy a Helm chart with Argo CD, we&#x27;ll add &lt;a href=&quot;https:&#x2F;&#x2F;prometheus.io&#x2F;&quot;&gt;Prometheus&lt;&#x2F;a&gt; to our cluster.&lt;&#x2F;p&gt;
&lt;p&gt;First we create an &lt;code&gt;Application&lt;&#x2F;code&gt; manifest in &lt;code&gt;charts&#x2F;root-app&#x2F;templates&#x2F;prometheus.yaml&lt;&#x2F;code&gt; that uses the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;prometheus-community&#x2F;helm-charts&#x2F;tree&#x2F;main&#x2F;charts&#x2F;prometheus&quot;&gt;Prometheus helm chart&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;arthurk&#x2F;argocd-example-install&#x2F;blob&#x2F;master&#x2F;charts&#x2F;root-app&#x2F;templates&#x2F;prometheus.yaml&quot;&gt;charts&#x2F;root-app&#x2F;templates&#x2F;prometheus.yaml&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;yaml&quot; style=&quot;background-color:#282a36;color:#f8f8f2;&quot; class=&quot;language-yaml &quot;&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;apiVersion&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;argoproj.io&#x2F;v1alpha1
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;kind&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;Application
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;metadata&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;prometheus
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;finalizers&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;resources-finalizer.argocd.argoproj.io
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;spec&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;project&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;default
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;source&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;repoURL&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;https:&#x2F;&#x2F;prometheus-community.github.io&#x2F;helm-charts
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;chart&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;prometheus
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;targetRevision&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bd93f9;&quot;&gt;25.3.1
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;helm&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;values&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;|
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;        pushgateway:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;          enabled: false
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;destination&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;server&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;https:&#x2F;&#x2F;kubernetes.default.svc
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;namespace&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;default
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;syncPolicy&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;automated&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;prune&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bd93f9;&quot;&gt;true
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;selfHeal&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bd93f9;&quot;&gt;true
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;There are a few differences compared to our previously created Argo CD Application:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;The &lt;code&gt;repoURL&lt;&#x2F;code&gt; is set to the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;prometheus-community&#x2F;helm-charts&#x2F;&quot;&gt;prometheus-community&lt;&#x2F;a&gt; Helm chart repository.&lt;&#x2F;li&gt;
&lt;li&gt;We&#x27;re using &lt;code&gt;chart&lt;&#x2F;code&gt; (instead of &lt;code&gt;path&lt;&#x2F;code&gt;) to specify the Helm chart we want to use (the repository contains multiple Helm charts).&lt;&#x2F;li&gt;
&lt;li&gt;The &lt;code&gt;targetRevision&lt;&#x2F;code&gt; is set to the chart version.&lt;&#x2F;li&gt;
&lt;li&gt;We&#x27;re overriding the chart default &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;prometheus-community&#x2F;helm-charts&#x2F;blob&#x2F;main&#x2F;charts&#x2F;prometheus&#x2F;values.yaml&quot;&gt;values&lt;&#x2F;a&gt; inline, rather than keeping them in a separate values.yaml file.&lt;&#x2F;li&gt;
&lt;li&gt;We&#x27;ve added &lt;code&gt;prune&lt;&#x2F;code&gt; sync policy. This will delete all Kubernetes resources when the Application is deleted. Previously, we didn&#x27;t set this as a pre-caution. If we had it enabled and accidentally deleted the root-app or argo-cd app, it would delete all applications in the cluster.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;To deploy the application, we just need to commit and push the manifest to our Git repository:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#282a36;color:#f8f8f2;&quot;&gt;&lt;code&gt;&lt;span&gt;$ git add charts&#x2F;root-app&#x2F;templates&#x2F;prometheus.yaml
&lt;&#x2F;span&gt;&lt;span&gt;$ git commit -m &amp;#39;add prometheus&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;$ git push
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;After the next refresh, Prometheus should show up in the Web UI: &lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;www.arthurkoziel.com&#x2F;setting-up-argocd-with-helm&#x2F;5-prometheus.png&quot; alt=&quot;Argo CD Web UI showing application overview after the Prometheus application has been added&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Clicking on the application will show us a detailed overview of all resources in the Prometheus helm chart:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;www.arthurkoziel.com&#x2F;setting-up-argocd-with-helm&#x2F;1-argo-app-details.png&quot; alt=&quot;A picture of the Argo CD web UI showing the details view of the Prometheus application&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;example-uninstall-prometheus&quot;&gt;Example: Uninstall Prometheus&lt;&#x2F;h2&gt;
&lt;p&gt;To uninstall Prometheus, we just have to delete the previously added &lt;code&gt;prometheus.yaml&lt;&#x2F;code&gt; file from out Git repo:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#282a36;color:#f8f8f2;&quot;&gt;&lt;code&gt;&lt;span&gt;$ git rm charts&#x2F;root-app&#x2F;templates&#x2F;prometheus.yaml
&lt;&#x2F;span&gt;&lt;span&gt;$ git commit -m &amp;#39;remove prometheus&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;$ git push
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The application, along with all its resources, will then be removed from the cluster. &lt;&#x2F;p&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;&#x2F;h2&gt;
&lt;p&gt;In this tutorial, we&#x27;ve installed Argo CD with Helm, and set it up so that it can manage itself. This allows us to update Argo CD the same way we update other applications: by modifying the manifest inside the Git repository.&lt;&#x2F;p&gt;
&lt;p&gt;We&#x27;ve created a root application that uses the &lt;a href=&quot;https:&#x2F;&#x2F;argo-cd.readthedocs.io&#x2F;en&#x2F;stable&#x2F;operator-manual&#x2F;declarative-setup&#x2F;#app-of-apps&quot;&gt;app-of-apps&lt;&#x2F;a&gt; pattern to manage our applications in a declarative way.&lt;&#x2F;p&gt;
&lt;p&gt;Applications can be added, updated or removed using Git commits. As an example, we&#x27;ve installed and uninstalled Prometheus in our cluster.&lt;&#x2F;p&gt;
&lt;p&gt;All files mentioned in this blog post are available in a &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;arthurk&#x2F;argocd-example-install&#x2F;&quot;&gt;Git repository on GitHub&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Run QEMU on macOS 11.0 Big Sur</title>
        <published>2020-12-18T00:00:00+00:00</published>
        <updated>2020-12-18T00:00:00+00:00</updated>
        <author>
          <name>Arthur Koziel</name>
        </author>
        <link rel="alternate" href="https://www.arthurkoziel.com/qemu-on-macos-big-sur/" type="text/html"/>
        <id>https://www.arthurkoziel.com/qemu-on-macos-big-sur/</id>
        
        <content type="html">&lt;p&gt;Around 3 months ago I wrote a blog post about how to create a &lt;a href=&quot;https:&#x2F;&#x2F;www.arthurkoziel.com&#x2F;qemu-ubuntu-20-04&#x2F;&quot;&gt;QEMU Ubuntu 20.04 VM on macOS&lt;&#x2F;a&gt;. If you follow the instructions with the newly released macOS 11.0, QEMU 5.1 will fail with the following error:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#282a36;color:#f8f8f2;&quot;&gt;&lt;code&gt;&lt;span&gt;qemu-system-x86_64: Error: HV_ERROR
&lt;&#x2F;span&gt;&lt;span&gt;fish: &amp;#39;qemu-system-x86_64 \
&lt;&#x2F;span&gt;&lt;span&gt;    -machi…&amp;#39; terminated by signal SIGABRT (Abort)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This error occurs because Apple has made changes to the hypervisor entitlements. Entitlements are key-value pairs that grant an executable permission to use a service or technology. In this case the QEMU binary is missing the entitlement to create and manage virtual machines. &lt;&#x2F;p&gt;
&lt;p&gt;To be more specific, the &lt;code&gt;com.apple.vm.hypervisor&lt;&#x2F;code&gt; entitlement (used in macOS 10.15) has been deprecated and &lt;a href=&quot;https:&#x2F;&#x2F;developer.apple.com&#x2F;documentation&#x2F;bundleresources&#x2F;entitlements&#x2F;com_apple_security_hypervisor&quot;&gt;replaced&lt;&#x2F;a&gt; by &lt;code&gt;com.apple.security.hypervisor&lt;&#x2F;code&gt;. &lt;&#x2F;p&gt;
&lt;p&gt;To fix the issue all we have to do is add the entitlement to the &lt;code&gt;qemu-system-x86_64&lt;&#x2F;code&gt; binary. First create an xml file named &lt;code&gt;entitlements.xml&lt;&#x2F;code&gt; with this content:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;xml&quot; style=&quot;background-color:#282a36;color:#f8f8f2;&quot; class=&quot;language-xml &quot;&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;&lt;span&gt;&amp;lt;?&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;xml &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50fa7b;&quot;&gt;version&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;1.0&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50fa7b;&quot;&gt;encoding&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;UTF-8&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;?&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;DOCTYPE &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;plist &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#8be9fd;&quot;&gt;PUBLIC &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;-&#x2F;&#x2F;Apple&#x2F;&#x2F;DTD PLIST 1.0&#x2F;&#x2F;EN&amp;quot; &amp;quot;http:&#x2F;&#x2F;www.apple.com&#x2F;DTDs&#x2F;PropertyList-1.0.dtd&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;plist &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50fa7b;&quot;&gt;version&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;1.0&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;dict&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;key&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;com.apple.security.hypervisor&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;key&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;dict&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;plist&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Then sign the qemu binary with it:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#282a36;color:#f8f8f2;&quot;&gt;&lt;code&gt;&lt;span&gt;codesign -s - --entitlements entitlements.xml --force &#x2F;usr&#x2F;local&#x2F;bin&#x2F;qemu-system-x86_64
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Now the &lt;code&gt;qemu-system-x86_64&lt;&#x2F;code&gt; command should work and can be used to launch VMs.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Convert Markdown to HTML with Pandoc</title>
        <published>2020-11-29T00:00:00+00:00</published>
        <updated>2020-11-29T00:00:00+00:00</updated>
        <author>
          <name>Arthur Koziel</name>
        </author>
        <link rel="alternate" href="https://www.arthurkoziel.com/convert-md-to-html-pandoc/" type="text/html"/>
        <id>https://www.arthurkoziel.com/convert-md-to-html-pandoc/</id>
        
        <content type="html">&lt;p&gt;In this post I&#x27;ll describe how to use &lt;a href=&quot;https:&#x2F;&#x2F;pandoc.org&#x2F;&quot;&gt;Pandoc&lt;&#x2F;a&gt; to convert Markdown to a full HTML page (including header&#x2F;footer).&lt;&#x2F;p&gt;
&lt;p&gt;The Pandoc version used for the examples below is 2.11.2.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;what-is-pandoc&quot;&gt;What is Pandoc?&lt;&#x2F;h2&gt;
&lt;p&gt;Pandoc is an open-source document converter that is written in Haskell. It was initially
released in 2006 and has been under active development since then.&lt;&#x2F;p&gt;
&lt;p&gt;The goal of Pandoc is to convert a document from one markup format to another. It distinguishes
between input formats and output formats. As of writing this it supports &lt;a href=&quot;https:&#x2F;&#x2F;pandoc.org&#x2F;MANUAL.html#input-formats&quot;&gt;38 input formats&lt;&#x2F;a&gt; and
&lt;a href=&quot;https:&#x2F;&#x2F;pandoc.org&#x2F;MANUAL.html#output-formats&quot;&gt;59 output formats&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;In this post we&#x27;ll use Markdown as an input format and HTML as an output format.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;preparing-the-html-template&quot;&gt;Preparing the HTML template&lt;&#x2F;h2&gt;
&lt;p&gt;To generate a full HTML page we have to use Pandoc&#x27;s standalone mode which will use a &lt;a href=&quot;https:&#x2F;&#x2F;pandoc.org&#x2F;MANUAL.html#templates&quot;&gt;template&lt;&#x2F;a&gt; to add header and footer.&lt;&#x2F;p&gt;
&lt;p&gt;Pandoc ships with a default template, if you wish to use that skip this section and omit the &lt;code&gt;--template&lt;&#x2F;code&gt; argument.&lt;&#x2F;p&gt;
&lt;p&gt;The template we&#x27;ll use is this (save it to &lt;code&gt;template.html&lt;&#x2F;code&gt;):&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;html&quot; style=&quot;background-color:#282a36;color:#f8f8f2;&quot; class=&quot;language-html &quot;&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span&gt;&amp;lt;!doctype html&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;html &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50fa7b;&quot;&gt;lang&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;en&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;head&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;meta &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50fa7b;&quot;&gt;charset&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;utf-8&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;meta &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50fa7b;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;date&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50fa7b;&quot;&gt;content&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;#39;$date-meta$&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;title&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;$title$&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;title&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;head&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;body&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;p&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;Date: $date$&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;p&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;$body$
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;body&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;html&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Pandoc&#x27;s template variables can have &lt;a href=&quot;https:&#x2F;&#x2F;pandoc.org&#x2F;MANUAL.html#interpolated-variables&quot;&gt;different formats&lt;&#x2F;a&gt;,
the one we&#x27;re using here start and end with a dollar sign:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;$date$&lt;&#x2F;code&gt;: A date in a parsable format. See the &lt;a href=&quot;https:&#x2F;&#x2F;pandoc.org&#x2F;MANUAL.html#variables-set-automatically&quot;&gt;date-meta docs&lt;&#x2F;a&gt; for a list of recognized formats for the &lt;code&gt;date&lt;&#x2F;code&gt; variable. We use this to show when the document was created&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;$date-meta$&lt;&#x2F;code&gt;: The &lt;code&gt;date&lt;&#x2F;code&gt; parsed to ISO 8601 format. This is automatically done&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;$title$&lt;&#x2F;code&gt;: The document title&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;$body$&lt;&#x2F;code&gt;: The document body in HTML (the converted Markdown)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;We only need to set the &lt;code&gt;date&lt;&#x2F;code&gt; and &lt;code&gt;title&lt;&#x2F;code&gt; in the Markdown document via a metadata block.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;writing-the-markdown-file&quot;&gt;Writing the Markdown file&lt;&#x2F;h2&gt;
&lt;p&gt;Create a Markdown file &lt;code&gt;doc.md&lt;&#x2F;code&gt; with the following content:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#282a36;color:#f8f8f2;&quot;&gt;&lt;code&gt;&lt;span&gt;---
&lt;&#x2F;span&gt;&lt;span&gt;title: My Document
&lt;&#x2F;span&gt;&lt;span&gt;date: September 22, 2020
&lt;&#x2F;span&gt;&lt;span&gt;---
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;## Test
&lt;&#x2F;span&gt;&lt;span&gt;some text
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The beginning of the document is the metadata block with required &lt;code&gt;date&lt;&#x2F;code&gt; and &lt;code&gt;title&lt;&#x2F;code&gt; variables mentioned above.&lt;&#x2F;p&gt;
&lt;p&gt;Several Markdown variants are &lt;a href=&quot;https:&#x2F;&#x2F;pandoc.org&#x2F;MANUAL.html#Markdown-variants&quot;&gt;supported&lt;&#x2F;a&gt; such as GitHub-Flavored markdown. This example uses &lt;a href=&quot;https:&#x2F;&#x2F;pandoc.org&#x2F;MANUAL.html#pandocs-markdown&quot;&gt;Pandoc&#x27;s extended markdown&lt;&#x2F;a&gt; which is the default input for files with the &lt;code&gt;md&lt;&#x2F;code&gt; extension. &lt;&#x2F;p&gt;
&lt;h2 id=&quot;converting-the-document&quot;&gt;Converting the document&lt;&#x2F;h2&gt;
&lt;p&gt;Run the following command to generate the HTML page:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#282a36;color:#f8f8f2;&quot;&gt;&lt;code&gt;&lt;span&gt;pandoc --standalone --template template.html doc.md
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Pandoc will try to guess the input format from the file extension (&lt;code&gt;.md&lt;&#x2F;code&gt; will use the Markdown input format) and output
it to HTML (the default output format). &lt;&#x2F;p&gt;
&lt;p&gt;The output will be printed to the terminal:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;html&quot; style=&quot;background-color:#282a36;color:#f8f8f2;&quot; class=&quot;language-html &quot;&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span&gt;&amp;lt;!doctype html&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;html &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50fa7b;&quot;&gt;lang&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;en&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;head&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;meta &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50fa7b;&quot;&gt;charset&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;utf-8&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;meta &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50fa7b;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;date&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50fa7b;&quot;&gt;content&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;#39;2020-09-22&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;title&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;My Document&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;title&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;head&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;body&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;p&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;Date: September 22, 2020&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;p&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;h2 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50fa7b;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;test&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;Test&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;h2&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;p&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;some text&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;p&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;body&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;html&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;To save the document to a file we can either redirect stdout or use the &lt;code&gt;-o&lt;&#x2F;code&gt; argument:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#282a36;color:#f8f8f2;&quot;&gt;&lt;code&gt;&lt;span&gt;pandoc --standalone --template template.html doc.md -o doc.html
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;&#x2F;h2&gt;
&lt;p&gt;In this example we&#x27;ve converted Markdown to a standalone HTML page that is using a custom template.&lt;&#x2F;p&gt;
&lt;p&gt;This was just a simple example of what Pandoc is capable to do. The standalone mode coupled with the
bundled default templates makes it easy to generate a wide variety of outputs such as HTML presentations, Jupyter notebooks or PDF documents.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Smartyao LY092 Keyboard Review</title>
        <published>2020-11-24T00:00:00+00:00</published>
        <updated>2020-11-24T00:00:00+00:00</updated>
        <author>
          <name>Arthur Koziel</name>
        </author>
        <link rel="alternate" href="https://www.arthurkoziel.com/keyboard-review-smartyao-ly092/" type="text/html"/>
        <id>https://www.arthurkoziel.com/keyboard-review-smartyao-ly092/</id>
        
        <content type="html">&lt;p&gt;This blog post is a review of the &lt;a href=&quot;http:&#x2F;&#x2F;www.smartyao.com&#x2F;?_l=en&quot;&gt;Smartyao&lt;&#x2F;a&gt; LY092 Split-Keyboard which I&#x27;ve been using for the past 7 months. &lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;www.arthurkoziel.com&#x2F;keyboard-review-smartyao-ly092&#x2F;keyboard.jpg&quot; alt=&quot;Smartyao L092 Keyboard&quot; title=&quot;Smartyao LY092 Keyboard&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;I bought this split-keyboard to improve ergonomics since it allows typing at shoulder width rather than having to hunch over the keyboard.&lt;&#x2F;p&gt;
&lt;p&gt;This is my first mechanical keyboard in over 10 years and also my first split keyboard. I wasn&#x27;t sure if I&#x27;d like split keyboards and didn&#x27;t want to spend $350 on an ErgoDox, so I decided to try this one out. &lt;&#x2F;p&gt;
&lt;p&gt;I bought it on &lt;a href=&quot;http:&#x2F;&#x2F;shop114100401.taobao.com&#x2F;?spm=2013.1.1000126.2.MloYHY&amp;amp;v=1&quot;&gt;Taobao&lt;&#x2F;a&gt; in China for 458 RMB (around $70 USD). There&#x27;s a rebranded version (Koolertron) available on &lt;a href=&quot;https:&#x2F;&#x2F;www.amazon.com&#x2F;Koolertron-Programmable-Mechanical-Keyboard-Ergonomic&#x2F;dp&#x2F;B081GX5CY1&quot;&gt;Amazon&lt;&#x2F;a&gt; although it costs more than double the original price.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;hardware&quot;&gt;Hardware&lt;&#x2F;h2&gt;
&lt;p&gt;The keyboard has 43 keys on the left half and 45 keys on the right half. It can be ordered with either Cherry MX (Brown or Red) or Gateron (Blue or Black) switches. I&#x27;ve picked the Cherry MX Brown. Extra key caps with Numpad labels are included in the package and the existing keys can be swapped out.&lt;&#x2F;p&gt;
&lt;p&gt;The letters and numbers on the key caps are engraved so there&#x27;s no need to worry about them wearing off. The letters are see-through which is nice with the background lighting. Each side of the keyboard has 2 Micro USB connections. The middle ones are for connecting the two halves with each other. The left side or right side can be connected to the computer USB port with the included Micro USB to USB adapter.&lt;&#x2F;p&gt;
&lt;p&gt;The background light is white and can be turned on&#x2F;off by pressing the top right key on the left side and top left key on the right side (each side has to be turned off separately). The key for turning the light on&#x2F;off can be programmed in the configuration software.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;configuration-software&quot;&gt;Configuration Software&lt;&#x2F;h2&gt;
&lt;p&gt;The keyboard is programmable which means that each key can be assigned a different value or alternatively use of one of the built-in functions. I&#x27;ve described some of those functions below. For a full reference of what the keyboard is capable to do check the &lt;a href=&quot;https:&#x2F;&#x2F;dme657285d3.pic11.websiteonline.cn&#x2F;upload&#x2F;Thumbkeyboard_User_Manual_V5.pdf&quot;&gt;User Manual&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;installation&quot;&gt;Installation&lt;&#x2F;h3&gt;
&lt;p&gt;The software can be downloaded from the &lt;a href=&quot;http:&#x2F;&#x2F;www.smartyao.com&#x2F;page91?_l=en&quot;&gt;manufacturer&#x27;s website&lt;&#x2F;a&gt;. It&#x27;s only available for Windows but I was able to run it without problems on macOS via VirtualBox. I used the &lt;a href=&quot;https:&#x2F;&#x2F;developer.microsoft.com&#x2F;en-us&#x2F;microsoft-edge&#x2F;tools&#x2F;vms&#x2F;&quot;&gt;MSEdge on Win10 trial&lt;&#x2F;a&gt; version of Windows 10.&lt;&#x2F;p&gt;
&lt;p&gt;VirtualBox disables all USB connections by default. The keyboard needs to be connected via the menu before it can be used. It shows up under &lt;code&gt;Devices -&amp;gt; USB&lt;&#x2F;code&gt; as &lt;code&gt;LingYao ShangHai Thumb Keyboard&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;www.arthurkoziel.com&#x2F;keyboard-review-smartyao-ly092&#x2F;keyboard-vbox-menu.png&quot; alt=&quot;VirtualBox USB menu showing the keyboard device&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Each keyboard-side has to be programmed separately. It has to be put into a configuration mode by holding down the top-left key (for example &lt;code&gt;ESC&lt;&#x2F;code&gt; on the left side) while connecting it to the USB port. The LEDs will start blinking to indicate that it is now in config mode. On launch the configuration software will automatically load the default profile.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;overview&quot;&gt;Overview&lt;&#x2F;h3&gt;
&lt;p&gt;The following picture shows the default view after loading the left side of the keyboard into the config software:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;www.arthurkoziel.com&#x2F;keyboard-review-smartyao-ly092&#x2F;overview-left.png&quot; alt=&quot;Overview of the left keyboard side in the configuration software&quot; title=&quot;Configuration Software&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Each key can be programmed individually by clicking on it and selecting a new value with the virtual keyboard:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;www.arthurkoziel.com&#x2F;keyboard-review-smartyao-ly092&#x2F;virtual-keyboard.png&quot; alt=&quot;Picture of the Virtual Keyboard in the editor&quot; title=&quot;Virtual Keyboard&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;functions&quot;&gt;Functions&lt;&#x2F;h2&gt;
&lt;p&gt;Besides assigning a new char to a key there are also a few functions that can be used:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;3-Layer Keymap&lt;&#x2F;strong&gt;: Use a different char for a key when &lt;code&gt;FN1&lt;&#x2F;code&gt; or &lt;code&gt;FN2&lt;&#x2F;code&gt; is pressed. For example &lt;code&gt;FN1+H&lt;&#x2F;code&gt; can be mapped to &lt;code&gt;Left Arrow&lt;&#x2F;code&gt;. &lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Hotkey&lt;&#x2F;strong&gt;: Use one key press to send a shortcut such as &lt;code&gt;Ctrl+C&lt;&#x2F;code&gt;, another key to send &lt;code&gt;Ctrl+V&lt;&#x2F;code&gt;. This is a useful function to implement copy&#x2F;paste&#x2F;cut&#x2F;undo&#x2F;redo with a single key press&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Burst&lt;&#x2F;strong&gt;: Send up to 3 chars with a single click. Useful to output a pair of braces &lt;code&gt;[]&lt;&#x2F;code&gt; with a single press&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Mouse&lt;&#x2F;strong&gt;: Control (move, click, ...) the mouse with the keyboard. For example a key press can move the mouse by 200px to the left&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Round-Robin&lt;&#x2F;strong&gt;: Output a different char on every key press. Up to 3 chars can be chosen&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Continue&lt;&#x2F;strong&gt;: Simulates a key-hold when a key is pressed the first time and a key-release when it&#x27;s pressed again. Gaming-feature to make it easier to walk around without continuously holding down the key&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Jitter&lt;&#x2F;strong&gt;: One key press to continuously output up to 3 chars. Like the Burst function but will continue doing so until the key is pressed again&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;There are also special functions to turn the Backlights ON&#x2F;OFF, Switch Profiles and execute Macros.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;macros&quot;&gt;Macros&lt;&#x2F;h2&gt;
&lt;p&gt;Macros are scripts that can be programmed to do a series of key presses or mouse movements with a short delay between them:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;www.arthurkoziel.com&#x2F;keyboard-review-smartyao-ly092&#x2F;macro-editor.png&quot; alt=&quot;Macro Editor window&quot; title=&quot;Macro Editor&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Each keyboard can save 8 macros saved with each Macro being able to press up to 32 keys.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;twokeyclick&quot;&gt;TwoKeyClick&lt;&#x2F;h2&gt;
&lt;p&gt;The TwoKeyClick function enables sending up to 6 characters when two keys are pressed simultaneously. For example pressing &lt;code&gt;A+S&lt;&#x2F;code&gt; at the same time can send &lt;code&gt;Enter&lt;&#x2F;code&gt; or pressing &lt;code&gt;J+K&lt;&#x2F;code&gt; can send &lt;code&gt;ESC&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;www.arthurkoziel.com&#x2F;keyboard-review-smartyao-ly092&#x2F;twokeyclick-editor.png&quot; alt=&quot;TwoKeyClick Editor window&quot; title=&quot;TwoKeyClick Editor&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;During my testing I found this hard to trigger since the keys have to be pressed at exactly the same time. There&#x27;s a workaround by using the Burst Function to send two chars with a single key press and then using those same two chars to run the TwoKeyClick function.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;profiles&quot;&gt;Profiles&lt;&#x2F;h2&gt;
&lt;p&gt;A profile is a mapping of keys. For example the &lt;code&gt;A&lt;&#x2F;code&gt; key could output a different char (or run a function) in each profile. Each side of the keyboard has 4 profiles (Default Profile and Profile 1-3).&lt;&#x2F;p&gt;
&lt;p&gt;The LEDs on the left side of the keyboard show which profile is currently active. On the right side of the keyboard the background light of the F11 and F12 keys shows the currently active profile. &lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;www.arthurkoziel.com&#x2F;keyboard-review-smartyao-ly092&#x2F;layer-2-active.jpg&quot; alt=&quot;Keyboard LED when Profile 1 is active&quot; title=&quot;Keyboard Profile 1 is active&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;I found this function useful to try out different keyboard layouts such as Dvorak, Colemak and Workman. &lt;&#x2F;p&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;&#x2F;h2&gt;
&lt;p&gt;Overall I&#x27;m happy with the keyboard. I&#x27;ve been using it daily for the past 7 months. For a split keyboard it&#x27;s cheap (compared to ErgoDox) and built very well. I&#x27;m sure it will last a long time. The software is easy to use and allows each key to be assigned a different char (for example to use a different keyboard layout) or use one of the built-in functions to enable extra keys or shortcuts. &lt;&#x2F;p&gt;
&lt;p&gt;Pros:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Good price for a split-keyboard&lt;&#x2F;li&gt;
&lt;li&gt;Great build quality&lt;&#x2F;li&gt;
&lt;li&gt;Easily programmable with many functions to choose from&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Cons:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Software is only available for Windows&lt;&#x2F;li&gt;
&lt;li&gt;Each side has to be connected separately to be programmed&lt;&#x2F;li&gt;
&lt;li&gt;Can&#x27;t assign a symbol such as &lt;code&gt;_&lt;&#x2F;code&gt; or &lt;code&gt;{&lt;&#x2F;code&gt; to a key (always requires holding down the shift key)&lt;&#x2F;li&gt;
&lt;li&gt;Can&#x27;t switch to another profile temporarily when holding down a key&lt;&#x2F;li&gt;
&lt;li&gt;Media Keys don&#x27;t work (play&#x2F;pause&#x2F;next&#x2F;prev)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;The cons are only minor issues for me and I&#x27;ll keep using the keyboard in the future.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Using QEMU to create a Ubuntu 20.04 Desktop VM on macOS</title>
        <published>2020-09-20T00:00:00+00:00</published>
        <updated>2020-09-20T00:00:00+00:00</updated>
        <author>
          <name>Arthur Koziel</name>
        </author>
        <link rel="alternate" href="https://www.arthurkoziel.com/qemu-ubuntu-20-04/" type="text/html"/>
        <id>https://www.arthurkoziel.com/qemu-ubuntu-20-04/</id>
        
        <content type="html">&lt;p&gt;In this blog post we’re going to create a Ubuntu 20.04 VM using &lt;a href=&quot;https:&#x2F;&#x2F;www.qemu.org&#x2F;&quot;&gt;QEMU&lt;&#x2F;a&gt; on MacOS.&lt;&#x2F;p&gt;
&lt;p&gt;Note for users on macOS 11.0: follow &lt;a href=&quot;https:&#x2F;&#x2F;www.arthurkoziel.com&#x2F;qemu-on-macos-big-sur&#x2F;&quot;&gt;this post&lt;&#x2F;a&gt; first to get qemu to run.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;www.arthurkoziel.com&#x2F;qemu-ubuntu-20-04&#x2F;ubuntu-20-04-with-qemu.png&quot; alt=&quot;A picture of the Ubuntu 20.04 Desktop&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;QEMU is a hardware emulator which can make use of different accelerators when running VMs. The most popular accelerator is &lt;a href=&quot;https:&#x2F;&#x2F;www.linux-kvm.org&#x2F;page&#x2F;Main_Page&quot;&gt;KVM&lt;&#x2F;a&gt; which is built into the Linux kernel and allows Linux hosts to run VMs with native performance.&lt;&#x2F;p&gt;
&lt;p&gt;Using QEMU on macOS used to be very slow as no accelerator was available. This changed 2 years ago when the project &lt;a href=&quot;https:&#x2F;&#x2F;wiki.qemu.org&#x2F;ChangeLog&#x2F;2.12&quot;&gt;added support&lt;&#x2F;a&gt; for the macOS native hypervisor with Hypervisor.framework (HVF) as an accelerator.&lt;&#x2F;p&gt;
&lt;p&gt;Before we begin with the setup I assume that the &lt;a href=&quot;https:&#x2F;&#x2F;releases.ubuntu.com&#x2F;20.04&#x2F;&quot;&gt;Ubuntu 20.04 Desktop ISO&lt;&#x2F;a&gt; has been downloaded in the current working directory.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;qemu-installation&quot;&gt;QEMU Installation&lt;&#x2F;h2&gt;
&lt;p&gt;We can use Homebrew to install QEMU. The version we’re using in this tutorial is 5.1.0:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#282a36;color:#f8f8f2;&quot;&gt;&lt;code&gt;&lt;span&gt;$ brew install qemu
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;qemu-system-x86_64 --version
&lt;&#x2F;span&gt;&lt;span&gt;QEMU emulator version 5.1.0
&lt;&#x2F;span&gt;&lt;span&gt;Copyright (c) 2003-2020 Fabrice Bellard and the QEMU Project developers
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;It will pull in a few dependencies (the package depends on 14 other packages) and the installation can take a few minutes.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;create-the-disk-image&quot;&gt;Create the disk image&lt;&#x2F;h2&gt;
&lt;p&gt;Once the installation is done, we can create the disk image that we’re going to install Ubuntu on.&lt;&#x2F;p&gt;
&lt;p&gt;We’re using the QCOW2 format to create a 20GB image. This can be resized later on if needed. The Ubuntu installation took around 5GB of space when I installed it.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#282a36;color:#f8f8f2;&quot;&gt;&lt;code&gt;&lt;span&gt;qemu-img create -f qcow2 ubuntu-20.04.1-desktop-amd64.qcow2 20G
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;boot-machine-with-ubuntu-iso-mounted&quot;&gt;Boot machine with Ubuntu ISO mounted&lt;&#x2F;h2&gt;
&lt;p&gt;We can now boot up the machine with the Ubuntu ISO attached as a&lt;&#x2F;p&gt;
&lt;p&gt;In this step we boot up the machine with the Ubuntu ISO mounted in the CD drive:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#282a36;color:#f8f8f2;&quot;&gt;&lt;code&gt;&lt;span&gt;qemu-system-x86_64 \
&lt;&#x2F;span&gt;&lt;span&gt;    -machine type=q35,accel=hvf \
&lt;&#x2F;span&gt;&lt;span&gt;    -smp 2 \
&lt;&#x2F;span&gt;&lt;span&gt;    -hda ubuntu-20.04.1-desktop-amd64.qcow2 \
&lt;&#x2F;span&gt;&lt;span&gt;    -cdrom .&#x2F;ubuntu-20.04.1-desktop-amd64.iso \
&lt;&#x2F;span&gt;&lt;span&gt;    -m 4G \
&lt;&#x2F;span&gt;&lt;span&gt;    -vga virtio \
&lt;&#x2F;span&gt;&lt;span&gt;    -usb \
&lt;&#x2F;span&gt;&lt;span&gt;    -device usb-tablet \
&lt;&#x2F;span&gt;&lt;span&gt;    -display default,show-cursor=on
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The options are:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;-machine&lt;&#x2F;code&gt;: The emulated machine and the accelerator. q35 is the newest machine type and HVF is the macOS native hypervisor.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;-smp&lt;&#x2F;code&gt;: Number of CPUs to use&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;-m&lt;&#x2F;code&gt;: Amount of memory to use&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;-hda&lt;&#x2F;code&gt;: Disk drive (the one we created earlier)&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;-cdrom&lt;&#x2F;code&gt;: The ISO image to put into the CD drive&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;-vga&lt;&#x2F;code&gt;: The graphic card to use. I found &lt;code&gt;virtio&lt;&#x2F;code&gt; (based on &lt;a href=&quot;https:&#x2F;&#x2F;virgil3d.github.io&#x2F;&quot;&gt;Virgil&lt;&#x2F;a&gt; to have the best performance&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;-usb&lt;&#x2F;code&gt;: Enable USB host controller&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;-device&lt;&#x2F;code&gt; Adding a “usb-tablet” as an input device. I’m running this on a laptop and without this setting the mouse did not work.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;-display&lt;&#x2F;code&gt;: To show the mouse cursor (disabled by default)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;During testing I had problems with the Linux kernel as it would panic during the boot process. The issue was the &lt;code&gt;-cpu&lt;&#x2F;code&gt; parameter. I fixed it by specifying the CPU architecture manually (see &lt;code&gt;qemu-system-x86_64 -cpu help&lt;&#x2F;code&gt; for a list of all available architectures).&lt;&#x2F;p&gt;
&lt;p&gt;My machine has an IvyBridge processor (Core i7):&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#282a36;color:#f8f8f2;&quot;&gt;&lt;code&gt;&lt;span&gt;$ sysctl -n machdep.cpu.brand_string
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;Intel(R) Core(TM) i7-3740QM CPU @ 2.70GHz
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;And using &lt;code&gt;-cpu IvyBridge&lt;&#x2F;code&gt; would fail. However when using &lt;code&gt;-cpu Nehalem&lt;&#x2F;code&gt; (&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;List_of_Intel_CPU_microarchitectures&quot;&gt;also an i7 CPU&lt;&#x2F;a&gt;) everything worked well.&lt;&#x2F;p&gt;
&lt;p&gt;Now after the machine is booted up the Ubuntu installer will run. Follow the installation steps and don’t restart the VM at the end of the installation, instead shut it down by stopping the qemu process with CTRL-C on the host.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;boot-without-iso-mounted&quot;&gt;Boot without ISO mounted&lt;&#x2F;h2&gt;
&lt;p&gt;When running the VM we don’t need the Ubuntu ISO mounted and can remove it by leaving out the &lt;code&gt;-cdrom&lt;&#x2F;code&gt; option:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#282a36;color:#f8f8f2;&quot;&gt;&lt;code&gt;&lt;span&gt;qemu-system-x86_64 \
&lt;&#x2F;span&gt;&lt;span&gt;    -machine type=q35,accel=hvf \
&lt;&#x2F;span&gt;&lt;span&gt;    -smp 2 \
&lt;&#x2F;span&gt;&lt;span&gt;    -hda ubuntu-20.04.1-desktop-amd64.qcow2 \
&lt;&#x2F;span&gt;&lt;span&gt;    -m 4G \
&lt;&#x2F;span&gt;&lt;span&gt;    -vga virtio \
&lt;&#x2F;span&gt;&lt;span&gt;    -usb \
&lt;&#x2F;span&gt;&lt;span&gt;    -device usb-tablet \
&lt;&#x2F;span&gt;&lt;span&gt;    -display default,show-cursor=on
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;&#x2F;h2&gt;
&lt;p&gt;In my experience QEMU is faster, more responsive and uses less CPU&#x2F;RAM than VirtualBox. I didn’t have to configure any display scaling for HiDPI screens as it worked out of the box. The only thing I’m missing are shared clipboards and drag-and-drop of files (which are available when installing the VirtualBox Guest Additions).&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Using the VBoxManage CLI to create a Ubuntu 20.04 VM</title>
        <published>2020-09-11T00:00:00+00:00</published>
        <updated>2020-09-11T00:00:00+00:00</updated>
        <author>
          <name>Arthur Koziel</name>
        </author>
        <link rel="alternate" href="https://www.arthurkoziel.com/vboxmanage-cli-ubuntu-20-04/" type="text/html"/>
        <id>https://www.arthurkoziel.com/vboxmanage-cli-ubuntu-20-04/</id>
        
        <content type="html">&lt;p&gt;This tutorial describes the installation of Ubuntu 20.04 in VirtualBox by using the &lt;a href=&quot;https:&#x2F;&#x2F;www.virtualbox.org&#x2F;manual&#x2F;ch08.html&quot;&gt;VBoxManage CLI&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;www.arthurkoziel.com&#x2F;vboxmanage-cli-ubuntu-20-04&#x2F;ubuntu-desktop.png&quot; alt=&quot;Ubuntu 20.04 Desktop&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;I&#x27;m assuming that &lt;a href=&quot;https:&#x2F;&#x2F;www.virtualbox.org&#x2F;&quot;&gt;VirtualBox 6.1&lt;&#x2F;a&gt; is installed, the VBoxManage CLI is ready to use and the &lt;a href=&quot;https:&#x2F;&#x2F;ubuntu.com&#x2F;download&#x2F;desktop&quot;&gt;Ubuntu 20.04 ISO&lt;&#x2F;a&gt; has been downloaded.&lt;&#x2F;p&gt;
&lt;p&gt;I&#x27;ve tested this on an apple laptop with retina (HiDPI) display and included instructions to scale the display output. The scaling commands can be ignored for non-HiDPI displays.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;getting-started&quot;&gt;Getting started&lt;&#x2F;h2&gt;
&lt;p&gt;We first create the VM and increase the hardware resources. The default settings use 1 CPU core, 128MB RAM and 8MB VRAM which is not enough. We&#x27;ll increase it to use 2 CPU cores, 4GB RAM and 128MB VRAM:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#282a36;color:#f8f8f2;&quot;&gt;&lt;code&gt;&lt;span&gt;$ VBoxManage createvm --name &amp;quot;Ubuntu 20.04&amp;quot; --ostype Ubuntu_64 --register
&lt;&#x2F;span&gt;&lt;span&gt;$ VBoxManage modifyvm &amp;quot;Ubuntu 20.04&amp;quot; --cpus 2 --memory 4096 --vram 128 --graphicscontroller vmsvga --usbohci on --mouse usbtablet
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;In the above command I&#x27;ve also enabled USB and set the Graphics Controller to VMSVGA which is the default controller when using the GUI but set to the legacy VBoxVGA when using the CLI.&lt;&#x2F;p&gt;
&lt;p&gt;To see all available options run &lt;code&gt;VBoxManage modifyvm&lt;&#x2F;code&gt; which will output a list of all flags. The current values can be seen with &lt;code&gt;VBoxManage showvminfo &amp;quot;Ubuntu 20.04&amp;quot;&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;storage-devices&quot;&gt;Storage Devices&lt;&#x2F;h2&gt;
&lt;p&gt;Next we need to configure the storage devices. We create an empty 20GB hard drive that we can install Ubuntu on. A minimal Ubuntu installation takes about 5GB of space:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#282a36;color:#f8f8f2;&quot;&gt;&lt;code&gt;&lt;span&gt;$ VBoxManage createhd --filename ~&#x2F;VirtualBox\ VMs&#x2F;Ubuntu\ 20.04&#x2F;Ubuntu\ 20.04.vdi --size 20480 --variant Standard
&lt;&#x2F;span&gt;&lt;span&gt;$ VBoxManage storagectl &amp;quot;Ubuntu 20.04&amp;quot; --name &amp;quot;SATA Controller&amp;quot; --add sata --bootable on
&lt;&#x2F;span&gt;&lt;span&gt;$ VBoxManage storageattach &amp;quot;Ubuntu 20.04&amp;quot; --storagectl &amp;quot;SATA Controller&amp;quot; --port 0 --device 0 --type hdd --medium ~&#x2F;VirtualBox\ VMs&#x2F;Ubuntu\ 20.04&#x2F;Ubuntu\ 20.04.vdi 
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We also create a dvd drive with the Ubuntu ISO mounted in it. The VM will boot from this drive first when starting:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#282a36;color:#f8f8f2;&quot;&gt;&lt;code&gt;&lt;span&gt;$ VBoxManage storagectl &amp;quot;Ubuntu 20.04&amp;quot; --name &amp;quot;IDE Controller&amp;quot; --add ide
&lt;&#x2F;span&gt;&lt;span&gt;$ VBoxManage storageattach &amp;quot;Ubuntu 20.04&amp;quot; --storagectl &amp;quot;IDE Controller&amp;quot; --port 0 --device 0 --type dvddrive --medium ~&#x2F;Downloads&#x2F;ubuntu-20.04.1-desktop-amd64.iso
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;display-output-scaling&quot;&gt;Display output scaling&lt;&#x2F;h2&gt;
&lt;p&gt;The Ubuntu installer runs with a resolution of 800x600 and would look tiny on HiDPI screens if we wouldn&#x27;t scale up the display output. The following command will scale up the display output by a factor of 2:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#282a36;color:#f8f8f2;&quot;&gt;&lt;code&gt;&lt;span&gt;$ VBoxManage setextradata &amp;quot;Ubuntu 20.04&amp;quot; GUI&#x2F;ScaleFactor 2
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;start-the-vm&quot;&gt;Start the VM&lt;&#x2F;h2&gt;
&lt;p&gt;Now we can start the VM which will load the Ubuntu GUI installer from the mounted ISO:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#282a36;color:#f8f8f2;&quot;&gt;&lt;code&gt;&lt;span&gt;$ VBoxManage startvm &amp;quot;Ubuntu 20.04&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;After the installation is done the installer will prompt to remove the installation media. We can ignore this for now and press enter to reboot.&lt;&#x2F;p&gt;
&lt;p&gt;When Ubuntu is booted up we install the VirtualBox Guest Additions to get the display drivers. This can be done by clicking on the menu bar and selecting &amp;quot;Devices&amp;quot;, then &amp;quot;Insert Guest Additions CD Image&amp;quot;. The installer will start automatically.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;finishing-the-installation&quot;&gt;Finishing the installation&lt;&#x2F;h2&gt;
&lt;p&gt;After the Guest Additions are installed we can let GNOME handle the display output scaling which has a better quality.&lt;&#x2F;p&gt;
&lt;p&gt;In the Ubuntu terminal (right click on Desktop and select &amp;quot;Open in Terminal&amp;quot;) enter:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#282a36;color:#f8f8f2;&quot;&gt;&lt;code&gt;&lt;span&gt;$ gsettings set org.gnome.desktop.interface scaling-factor 2
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We can now shut down the VM to remove the installation media and disable the VirtualBox display scaling. On the Desktop click on the arrow in the top right corner and select &amp;quot;Power Off&amp;quot;. Then run the following command on the host:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#282a36;color:#f8f8f2;&quot;&gt;&lt;code&gt;&lt;span&gt;$ VBoxManage storageattach &amp;quot;Ubuntu 20.04&amp;quot; --storagectl &amp;quot;IDE Controller&amp;quot; --port 0 --device 0 --type dvddrive --medium emptydrive
&lt;&#x2F;span&gt;&lt;span&gt;$ VBoxManage setextradata &amp;quot;Ubuntu 20.04&amp;quot; GUI&#x2F;ScaleFactor 1
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;With that done the Ubuntu VM is ready to use.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;&#x2F;h2&gt;
&lt;p&gt;We created a Ubuntu 20.04 VM by using the CLI instead of the GUI wizard. Personally I find this useful since I sometimes forget to set values in the GUI (such as increasing the VRAM). The Ubuntu Desktop installer has to run in a GUI, to automate this we&#x27;d need to use the Ubuntu Server ISO and install the GNOME desktop manually.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Listing Images and Tags in GCR</title>
        <published>2020-06-02T00:00:00+00:00</published>
        <updated>2020-06-02T00:00:00+00:00</updated>
        <author>
          <name>Arthur Koziel</name>
        </author>
        <link rel="alternate" href="https://www.arthurkoziel.com/listing-images-and-tags-in-gcr/" type="text/html"/>
        <id>https://www.arthurkoziel.com/listing-images-and-tags-in-gcr/</id>
        
        <content type="html">&lt;p&gt;In this blog post I&#x27;m going to describe how to use the &lt;a href=&quot;https:&#x2F;&#x2F;cloud.google.com&#x2F;container-registry&#x2F;&quot;&gt;GCR&lt;&#x2F;a&gt; Docker Registry API to list all Docker images and tags in the registry. An installation of the Docker daemon is not needed (we&#x27;re going to use a service account).&lt;&#x2F;p&gt;
&lt;h2 id=&quot;authentication-flow&quot;&gt;Authentication Flow&lt;&#x2F;h2&gt;
&lt;p&gt;In the next sections we&#x27;ll walk through the authentication and authorization with the Google Auth Server and the GCR Docker registry.&lt;&#x2F;p&gt;
&lt;p&gt;The whole process looks like this:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#282a36;color:#f8f8f2;&quot;&gt;&lt;code&gt;&lt;span&gt;+---------+                                 +-------------+ +-----+
&lt;&#x2F;span&gt;&lt;span&gt;| Client  |                                 | GoogleAuth  | | GCR |
&lt;&#x2F;span&gt;&lt;span&gt;+---------+                                 +-------------+ +-----+
&lt;&#x2F;span&gt;&lt;span&gt;     |                                             |           |
&lt;&#x2F;span&gt;&lt;span&gt;     | 1) Authenticate (needs Service Account)     |           |
&lt;&#x2F;span&gt;&lt;span&gt;     |--------------------------------------------&amp;gt;|           |
&lt;&#x2F;span&gt;&lt;span&gt;     |                                             |           |
&lt;&#x2F;span&gt;&lt;span&gt;     |                         OAuth2 Access Token |           |
&lt;&#x2F;span&gt;&lt;span&gt;     |&amp;lt;--------------------------------------------|           |
&lt;&#x2F;span&gt;&lt;span&gt;     |                                             |           |
&lt;&#x2F;span&gt;&lt;span&gt;     | 2) Get JWT token (needs Access Token)       |           |
&lt;&#x2F;span&gt;&lt;span&gt;     |--------------------------------------------------------&amp;gt;|
&lt;&#x2F;span&gt;&lt;span&gt;     |                                             |           |
&lt;&#x2F;span&gt;&lt;span&gt;     |                                             | JWT Token |
&lt;&#x2F;span&gt;&lt;span&gt;     |&amp;lt;--------------------------------------------------------|
&lt;&#x2F;span&gt;&lt;span&gt;     |                                             |           |
&lt;&#x2F;span&gt;&lt;span&gt;     | 3) Get Catalog&#x2F;Tags (needs JWT token)       |           |
&lt;&#x2F;span&gt;&lt;span&gt;     |--------------------------------------------------------&amp;gt;|
&lt;&#x2F;span&gt;&lt;span&gt;     |                                             |           |
&lt;&#x2F;span&gt;&lt;span&gt;     |                                           Image Catalog |
&lt;&#x2F;span&gt;&lt;span&gt;     |&amp;lt;--------------------------------------------------------|
&lt;&#x2F;span&gt;&lt;span&gt;     |                                             |           |
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We&#x27;ll later make this process shorter by using the service account key for authentication which allows us to skip steps 1 and 2.&lt;&#x2F;p&gt;
&lt;p&gt;The 3-step process shown above is longer but makes it possible to use more restricted permissions on the service account. This is not possible when using the service account key for authentication.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;creating-the-service-account&quot;&gt;Creating the Service Account&lt;&#x2F;h2&gt;
&lt;p&gt;Before we go into step 1 we need to create a service account that is able to authenticate with the Google Authentication Server and get authorization to fetch the necessary information from the Docker registry.&lt;&#x2F;p&gt;
&lt;p&gt;To create the service account and a JSON keyfile we run the following command:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#282a36;color:#f8f8f2;&quot;&gt;&lt;code&gt;&lt;span&gt;# create service account
&lt;&#x2F;span&gt;&lt;span&gt;$ gcloud iam service-accounts create gcr-svc-acc
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;# create JSON keyfile
&lt;&#x2F;span&gt;&lt;span&gt;$ gcloud iam service-accounts keys create gcr-svc-acc-keyfile.json --iam-account gcr-svc-acc@&amp;lt;your-project&amp;gt;.iam.gserviceaccount.com
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We should now have a file called &lt;code&gt;gcr-svc-acc-keyfile.json&lt;&#x2F;code&gt; that we can later use to get the OAuth2 Access Token, but first we need to grant the service account permissions to access resources in the GCP project.&lt;&#x2F;p&gt;
&lt;p&gt;In our use case we need to grant it the following roles:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Project Browser&lt;&#x2F;li&gt;
&lt;li&gt;Storage Object Viewer on the GCS bucket for the container registry (the bucket is automatically created for each project and named &lt;code&gt;artifacts.&amp;lt;your-project&amp;gt;.appspot.com&lt;&#x2F;code&gt;)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Note: If you don&#x27;t want to list all images in the registry (only the tags for an image) you don&#x27;t have to grant the Project Browser role.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#282a36;color:#f8f8f2;&quot;&gt;&lt;code&gt;&lt;span&gt;# grant &amp;quot;Project Browser&amp;quot; role
&lt;&#x2F;span&gt;&lt;span&gt;$ gcloud projects add-iam-policy-binding &amp;lt;your-project&amp;gt; --member=&amp;quot;serviceAccount:gcr-svc-acc@&amp;lt;your-project&amp;gt;.iam.gserviceaccount.com&amp;quot; --role=&amp;quot;roles&#x2F;browser&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;# grant &amp;quot;Storage Object&amp;quot; Viewer role for GCR bucket
&lt;&#x2F;span&gt;&lt;span&gt;$ gsutil iam ch serviceAccount:gcr-svc-acc@&amp;lt;your-project&amp;gt;.iam.gserviceaccount.com:objectViewer gs:&#x2F;&#x2F;artifacts.&amp;lt;your-project&amp;gt;.appspot.com&#x2F;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Next we need to enable the Cloud Resource Manager API. You can skip this if you only need the image tags.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#282a36;color:#f8f8f2;&quot;&gt;&lt;code&gt;&lt;span&gt;$ gcloud services enable cloudresourcemanager.googleapis.com
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We are now ready to use our service account to get an OAuth2 Access Token from the Google Authorization Server.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;step-1-getting-the-oauth2-access-token&quot;&gt;Step 1: Getting the OAuth2 Access Token&lt;&#x2F;h2&gt;
&lt;pre style=&quot;background-color:#282a36;color:#f8f8f2;&quot;&gt;&lt;code&gt;&lt;span&gt;+---------+                                 +-------------+
&lt;&#x2F;span&gt;&lt;span&gt;| Client  |                                 | GoogleAuth  |
&lt;&#x2F;span&gt;&lt;span&gt;+---------+                                 +-------------+
&lt;&#x2F;span&gt;&lt;span&gt;     |                                             |
&lt;&#x2F;span&gt;&lt;span&gt;     | 1) Authenticate (needs Service Account)     |
&lt;&#x2F;span&gt;&lt;span&gt;     |--------------------------------------------&amp;gt;|
&lt;&#x2F;span&gt;&lt;span&gt;     |                                             |
&lt;&#x2F;span&gt;&lt;span&gt;     |                         OAuth2 Access Token |
&lt;&#x2F;span&gt;&lt;span&gt;     |&amp;lt;--------------------------------------------|
&lt;&#x2F;span&gt;&lt;span&gt;     |                                             |
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The OAuth2 Access Token is required to access data over Google APIs. In our case we want to access the images and tags from the GCR Docker Registry API.&lt;&#x2F;p&gt;
&lt;p&gt;Obtaining this token by directly communicating via HTTP&#x2F;REST is &lt;a href=&quot;https:&#x2F;&#x2F;developers.google.com&#x2F;identity&#x2F;protocols&#x2F;oauth2&#x2F;service-account#authorizingrequests&quot;&gt;complicated&lt;&#x2F;a&gt; but fortunately there are client libraries available which let us abstract the cryptography parts away.&lt;&#x2F;p&gt;
&lt;p&gt;I&#x27;m going to use &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;google&#x2F;oauth2l&quot;&gt;oauth2l&lt;&#x2F;a&gt; CLI tool.&lt;&#x2F;p&gt;
&lt;p&gt;When requesting the access token we need to pass in a scope that specifies the level of access we need. In our case that&#x27;s the &lt;code&gt;cloud-platform.read-only&lt;&#x2F;code&gt; scope, or the &lt;code&gt;devstorage.read_only&lt;&#x2F;code&gt; scope if you only want the image tags.&lt;&#x2F;p&gt;
&lt;p&gt;We run the following command to get the access token:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#282a36;color:#f8f8f2;&quot;&gt;&lt;code&gt;&lt;span&gt;$ export ACCESS_TOKEN=$(oauth2l fetch --credentials gcr-svc-acc-keyfile.json --scope cloud-platform.read-only --cache=&amp;quot;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;$ echo $ACCESS_TOKEN
&lt;&#x2F;span&gt;&lt;span&gt;ya29.c.Ko9BzQetXXzZ6mOZTg71LdmqabQx...
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;With the OAuth2 Access Token saved we can continue with the Docker registry authentication.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;step-2-docker-registry-jwt-token&quot;&gt;Step 2: Docker Registry JWT token&lt;&#x2F;h2&gt;
&lt;pre style=&quot;background-color:#282a36;color:#f8f8f2;&quot;&gt;&lt;code&gt;&lt;span&gt;+---------+                                                 +-----+
&lt;&#x2F;span&gt;&lt;span&gt;| Client  |                                                 | GCR |
&lt;&#x2F;span&gt;&lt;span&gt;+---------+                                                 +-----+
&lt;&#x2F;span&gt;&lt;span&gt;     |                                                         |
&lt;&#x2F;span&gt;&lt;span&gt;     | 2) Get JWT token (needs OAuth2 Access Token)            |
&lt;&#x2F;span&gt;&lt;span&gt;     |--------------------------------------------------------&amp;gt;|
&lt;&#x2F;span&gt;&lt;span&gt;     |                                                         |
&lt;&#x2F;span&gt;&lt;span&gt;     |                                               JWT Token |
&lt;&#x2F;span&gt;&lt;span&gt;     |&amp;lt;--------------------------------------------------------|
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;For communication with the Docker registry we need to obtain a JWT token that authorizes us to access the data.&lt;&#x2F;p&gt;
&lt;p&gt;Depending on which data we want to request from the Docker registry we have to use a different scope for the JWT token:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;registry:catalog:*&lt;&#x2F;code&gt; scope to get the list of images&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;repository:&amp;lt;image_name&amp;gt;:pull&lt;&#x2F;code&gt; scope to get the tags for an image&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;To get this token we have to make a request to the gcr.io token server with the username &lt;code&gt;_token&lt;&#x2F;code&gt; and the previously obtained OAuth2 access token as the password:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#282a36;color:#f8f8f2;&quot;&gt;&lt;code&gt;&lt;span&gt;# Get JWT token with &amp;quot;registry:catalog:*&amp;quot; scope
&lt;&#x2F;span&gt;&lt;span&gt;$ export JWT_TOKEN=$(curl -sSL &amp;quot;https:&#x2F;&#x2F;gcr.io&#x2F;v2&#x2F;token?service=gcr.io&amp;amp;scope=registry:catalog:*&amp;quot; -u _token:$ACCESS_TOKEN | jq --raw-output &amp;#39;.token&amp;#39;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;$ echo $JWT_TOKEN
&lt;&#x2F;span&gt;&lt;span&gt;AJAD5v14fnm+N...
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;With the JWT token we can use the &lt;a href=&quot;https:&#x2F;&#x2F;docs.docker.com&#x2F;registry&#x2F;spec&#x2F;api&#x2F;&quot;&gt;Docker Registry HTTP API&lt;&#x2F;a&gt; to list all images in the registry.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;step-3-get-the-image-catalog-and-tags&quot;&gt;Step 3: Get the image catalog and tags&lt;&#x2F;h2&gt;
&lt;pre style=&quot;background-color:#282a36;color:#f8f8f2;&quot;&gt;&lt;code&gt;&lt;span&gt;+---------+                                                 +-----+
&lt;&#x2F;span&gt;&lt;span&gt;| Client  |                                                 | GCR |
&lt;&#x2F;span&gt;&lt;span&gt;+---------+                                                 +-----+
&lt;&#x2F;span&gt;&lt;span&gt;     |                                                         |
&lt;&#x2F;span&gt;&lt;span&gt;     | 3) Get Catalog&#x2F;Tags (needs JWT token)                   |
&lt;&#x2F;span&gt;&lt;span&gt;     |--------------------------------------------------------&amp;gt;|
&lt;&#x2F;span&gt;&lt;span&gt;     |                                                         |
&lt;&#x2F;span&gt;&lt;span&gt;     |                                      Image Catalog&#x2F;Tags |
&lt;&#x2F;span&gt;&lt;span&gt;     |&amp;lt;--------------------------------------------------------|
&lt;&#x2F;span&gt;&lt;span&gt;     |                                                         |
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;To get a list of all docker images in the registry we use the &lt;a href=&quot;https:&#x2F;&#x2F;docs.docker.com&#x2F;registry&#x2F;spec&#x2F;api&#x2F;#listing-repositories&quot;&gt;_catalog&lt;&#x2F;a&gt; endpoint. In the HTTP request we have to pass the JWT token in the &lt;code&gt;Authorization&lt;&#x2F;code&gt; header:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#282a36;color:#f8f8f2;&quot;&gt;&lt;code&gt;&lt;span&gt;$ curl -sSL -H &amp;quot;Authorization: Bearer $JWT_TOKEN&amp;quot; &amp;quot;https:&#x2F;&#x2F;gcr.io&#x2F;v2&#x2F;_catalog&amp;quot; | jq
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;quot;repositories&amp;quot;: [
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;quot;project&#x2F;alpine&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;quot;project&#x2F;busybox&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;  ]
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The registry has the &amp;quot;project&#x2F;alpine&amp;quot; and &amp;quot;project&#x2F;busybox&amp;quot; images in it (which I pushed there before writing this tutorial). The project name is always part of the image name.&lt;&#x2F;p&gt;
&lt;p&gt;Next we can pick an image and list the tags. For this we can use the &lt;a href=&quot;https:&#x2F;&#x2F;docs.docker.com&#x2F;registry&#x2F;spec&#x2F;api&#x2F;#listing-image-tags&quot;&gt;&lt;name&gt;&#x2F;tags&#x2F;list&lt;&#x2F;a&gt; endpoint. But before we can do this, we need a new JWT token.&lt;&#x2F;p&gt;
&lt;p&gt;Our previously created token (with the &lt;code&gt;registry:catalog:*&lt;&#x2F;code&gt; scope) doesn&#x27;t have the permission to get this information. If we try to send a request it will respond with:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#282a36;color:#f8f8f2;&quot;&gt;&lt;code&gt;&lt;span&gt;$ curl -sSL -H &amp;quot;Authorization: Bearer $JWT_TOKEN&amp;quot; &amp;quot;https:&#x2F;&#x2F;gcr.io&#x2F;v2&#x2F;project&#x2F;alpine&#x2F;tags&#x2F;list&amp;quot; | jq
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;quot;errors&amp;quot;: [
&lt;&#x2F;span&gt;&lt;span&gt;    {
&lt;&#x2F;span&gt;&lt;span&gt;      &amp;quot;code&amp;quot;: &amp;quot;UNAUTHORIZED&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;      &amp;quot;message&amp;quot;: &amp;quot;Requested repository does not match bearer token resource: project&#x2F;alpine&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;  ]
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The scope we need is called &lt;code&gt;repository:&amp;lt;image_name&amp;gt;:pull&lt;&#x2F;code&gt;. The &lt;code&gt;image_name&lt;&#x2F;code&gt; includes the GCP project name. In the following example we&#x27;re going to generate a new token and list the tags for the &lt;code&gt;project&#x2F;alpine&lt;&#x2F;code&gt; image:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#282a36;color:#f8f8f2;&quot;&gt;&lt;code&gt;&lt;span&gt;# request a new JWT token
&lt;&#x2F;span&gt;&lt;span&gt;export JWT_TOKEN=$(curl -sSL &amp;quot;https:&#x2F;&#x2F;gcr.io&#x2F;v2&#x2F;token?service=gcr.io&amp;amp;scope=repository:&amp;lt;your-project&amp;gt;&#x2F;alpine:pull&amp;quot; -u _token:$ACCESS_TOKEN | jq --raw-output &amp;#39;.token&amp;#39;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;# fetch list of tags
&lt;&#x2F;span&gt;&lt;span&gt;curl -sSL -H &amp;quot;Authorization: Bearer $JWT_TOKEN&amp;quot; &amp;quot;https:&#x2F;&#x2F;gcr.io&#x2F;v2&#x2F;&amp;lt;your-project&amp;gt;&#x2F;alpine&#x2F;tags&#x2F;list&amp;quot; | jq &amp;#39;.tags&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;[
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;quot;3.11&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Next we&#x27;re going to look into making this process shorter. GCR which let us skip the request for the OAuth2 Access Token and the request for the JWT token by using different users.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;skipping-the-docker-registry-jwt&quot;&gt;Skipping the Docker Registry JWT&lt;&#x2F;h2&gt;
&lt;p&gt;The GCR Docker registry has a user called &lt;code&gt;oauth2accesstoken&lt;&#x2F;code&gt; that lets us send the OAuth2 access token to the Docker Registry without having to obtain the JWT token. The process can be reduced to 2 steps and looks like this:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#282a36;color:#f8f8f2;&quot;&gt;&lt;code&gt;&lt;span&gt;+---------+                                    +-------------+ +-----+
&lt;&#x2F;span&gt;&lt;span&gt;| Client  |                                    | GoogleAuth  | | GCR |
&lt;&#x2F;span&gt;&lt;span&gt;+---------+                                    +-------------+ +-----+
&lt;&#x2F;span&gt;&lt;span&gt;     |                                                |           |
&lt;&#x2F;span&gt;&lt;span&gt;     | 1) Authenticate (needs Service Account)        |           |
&lt;&#x2F;span&gt;&lt;span&gt;     |-----------------------------------------------&amp;gt;|           |
&lt;&#x2F;span&gt;&lt;span&gt;     |                                                |           |
&lt;&#x2F;span&gt;&lt;span&gt;     |                            OAuth2 Access Token |           |
&lt;&#x2F;span&gt;&lt;span&gt;     |&amp;lt;-----------------------------------------------|           |
&lt;&#x2F;span&gt;&lt;span&gt;     |                                                |           |
&lt;&#x2F;span&gt;&lt;span&gt;     | 2) Get Image Catalog (needs Access Token)      |           |
&lt;&#x2F;span&gt;&lt;span&gt;     |-----------------------------------------------------------&amp;lt;|
&lt;&#x2F;span&gt;&lt;span&gt;     |                                                |           |
&lt;&#x2F;span&gt;&lt;span&gt;     |                                              Image Catalog |
&lt;&#x2F;span&gt;&lt;span&gt;     |&amp;lt;-----------------------------------------------------------|
&lt;&#x2F;span&gt;&lt;span&gt;     |                                                |           |
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The command to get the list of image tags with the access token is:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#282a36;color:#f8f8f2;&quot;&gt;&lt;code&gt;&lt;span&gt;$ curl -sSL -u &amp;quot;oauth2accesstoken:$ACCESS_TOKEN&amp;quot; &amp;quot;https:&#x2F;&#x2F;gcr.io&#x2F;v2&#x2F;&amp;lt;your-project&amp;gt;&#x2F;alpine&#x2F;tags&#x2F;list | jq &amp;#39;.tags&amp;#39;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;[
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;quot;3.11&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;json-user&quot;&gt;JSON User&lt;&#x2F;h2&gt;
&lt;p&gt;We can also use the &lt;code&gt;_json_key&lt;&#x2F;code&gt; user to authenticate with the GCR Docker registry. It lets us save another request by not having to obtain the OAuth2 access token. The process of getting data from the GCR Docker registry can then be reduced to a single request and looks like this:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#282a36;color:#f8f8f2;&quot;&gt;&lt;code&gt;&lt;span&gt;+---------+                                      +-----+
&lt;&#x2F;span&gt;&lt;span&gt;| Client  |                                      | GCR |
&lt;&#x2F;span&gt;&lt;span&gt;+---------+                                      +-----+
&lt;&#x2F;span&gt;&lt;span&gt;     |                                              |
&lt;&#x2F;span&gt;&lt;span&gt;     | Get Image Catalog (needs Service Account)    |
&lt;&#x2F;span&gt;&lt;span&gt;     |---------------------------------------------&amp;gt;|
&lt;&#x2F;span&gt;&lt;span&gt;     |                                              |
&lt;&#x2F;span&gt;&lt;span&gt;     |                                Image Catalog |
&lt;&#x2F;span&gt;&lt;span&gt;     |&amp;lt;---------------------------------------------|
&lt;&#x2F;span&gt;&lt;span&gt;     |                                              |
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;When using the &lt;code&gt;_json_key&lt;&#x2F;code&gt; user we have to pass in the content of the service account json keyfile as the password:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#282a36;color:#f8f8f2;&quot;&gt;&lt;code&gt;&lt;span&gt;$ curl -sSL -u &amp;quot;_json_key:$(cat gcr-svc-acc-keyfile.json)&amp;quot; &amp;quot;https:&#x2F;&#x2F;gcr.io&#x2F;v2&#x2F;&amp;lt;your-project&amp;gt;&#x2F;alpine&#x2F;tags&#x2F;list&amp;quot; | jq &amp;#39;.tags&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;[
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;quot;3.11&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;&#x2F;h2&gt;
&lt;p&gt;In this tutorial we&#x27;ve walked through the process of obtaining an OAuth2 access token from the Google Auth Server and a JWT token from the GCR Docker registry. We&#x27;ve then used the Docker registry API to fetch a list of images and tags for a specific image.&lt;&#x2F;p&gt;
&lt;p&gt;We&#x27;ve seen three different authentication methods by using either the &lt;code&gt;_token&lt;&#x2F;code&gt;, &lt;code&gt;oauth2accesstoken&lt;&#x2F;code&gt; or &lt;code&gt;_json_key&lt;&#x2F;code&gt; users.&lt;&#x2F;p&gt;
&lt;p&gt;Using the &lt;code&gt;_token&lt;&#x2F;code&gt; user involves more requests but is the same process that will work for all Docker registries. Depending on if we need to fetch the list of images we can also restrict the service account permissions by not having to grant it the &lt;code&gt;Project Browser&lt;&#x2F;code&gt; role, not having to enable the Cloud Resource Manager API and using the &lt;code&gt;devstorage.read_only&lt;&#x2F;code&gt; scope instead of the &lt;code&gt;cloud-platform.read-only&lt;&#x2F;code&gt; scope for the OAuth2 Access Key.&lt;&#x2F;p&gt;
&lt;p&gt;Using the &lt;code&gt;oauth2accesstoken&lt;&#x2F;code&gt; or &lt;code&gt;_json_key&lt;&#x2F;code&gt; users is more convenient but only works with the GCR Docker registry and requires project-level permissions for the service account.&lt;&#x2F;p&gt;
&lt;p&gt;The example code available in &lt;a href=&quot;https:&#x2F;&#x2F;gist.github.com&#x2F;arthurk&#x2F;ab9ced56ce78bb8309599ccc62fa2576&quot;&gt;this gist&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>DockerHub Docker Registry API Examples</title>
        <published>2020-05-10T00:00:00+00:00</published>
        <updated>2020-05-10T00:00:00+00:00</updated>
        <author>
          <name>Arthur Koziel</name>
        </author>
        <link rel="alternate" href="https://www.arthurkoziel.com/dockerhub-registry-api/" type="text/html"/>
        <id>https://www.arthurkoziel.com/dockerhub-registry-api/</id>
        
        <content type="html">&lt;p&gt;This post contains examples of REST API calls to &lt;a href=&quot;https:&#x2F;&#x2F;hub.docker.com&quot;&gt;DockerHub&lt;&#x2F;a&gt; and the DockerHub &lt;a href=&quot;https:&#x2F;&#x2F;docs.docker.com&#x2F;registry&#x2F;spec&#x2F;api&#x2F;&quot;&gt;Docker Registry&lt;&#x2F;a&gt;. We&#x27;re going to list all images for a user, list all tags for an image and get the manifest for an image.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;list-public-images&quot;&gt;List public images&lt;&#x2F;h2&gt;
&lt;p&gt;We&#x27;re going to use the DockerHub API to get the list of images for a user. This is because the DockerHub Docker Registry does not implement the &lt;a href=&quot;https:&#x2F;&#x2F;docs.docker.com&#x2F;registry&#x2F;spec&#x2F;api&#x2F;#listing-repositories&quot;&gt;&#x2F;v2&#x2F;_catalog&lt;&#x2F;a&gt; endpoint to list all repositories in the registry.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#282a36;color:#f8f8f2;&quot;&gt;&lt;code&gt;&lt;span&gt;$ curl -s &amp;quot;https:&#x2F;&#x2F;hub.docker.com&#x2F;v2&#x2F;repositories&#x2F;ansible&#x2F;?page_size=100&amp;quot; | jq -r &amp;#39;.results|.[]|.name&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;awx_task
&lt;&#x2F;span&gt;&lt;span&gt;awx_web
&lt;&#x2F;span&gt;&lt;span&gt;awx_rabbitmq
&lt;&#x2F;span&gt;&lt;span&gt;ansible
&lt;&#x2F;span&gt;&lt;span&gt;centos7-ansible
&lt;&#x2F;span&gt;&lt;span&gt;ubuntu14.04-ansible
&lt;&#x2F;span&gt;&lt;span&gt;...
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The DockerHub API is undocumented but there are projects out there like &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;RyanTheAllmighty&#x2F;Docker-Hub-API&quot;&gt;this one&lt;&#x2F;a&gt; who did a great job listing available endpoints.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;list-private-images&quot;&gt;List private images&lt;&#x2F;h2&gt;
&lt;p&gt;To include private images we need to get an authentication token (JWT) which we can then include in subsequent requests:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#282a36;color:#f8f8f2;&quot;&gt;&lt;code&gt;&lt;span&gt;$ export DOCKER_USERNAME=&amp;quot;myusername&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;$ export DOCKER_PASSWORD=&amp;quot;mypassword&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;$ export TOKEN=$(curl -s -H &amp;quot;Content-Type: application&#x2F;json&amp;quot; -X POST -d &amp;#39;{&amp;quot;username&amp;quot;: &amp;quot;&amp;#39;${DOCKER_USERNAME}&amp;#39;&amp;quot;, &amp;quot;password&amp;quot;: &amp;quot;&amp;#39;${DOCKER_PASSWORD}&amp;#39;&amp;quot;}&amp;#39; https:&#x2F;&#x2F;hub.docker.com&#x2F;v2&#x2F;users&#x2F;login&#x2F; | jq -r .token)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;$ curl -s -H &amp;quot;Authorization: JWT ${TOKEN}&amp;quot; &amp;quot;https:&#x2F;&#x2F;hub.docker.com&#x2F;v2&#x2F;repositories&#x2F;arthurk&#x2F;?page_size=100&amp;quot; | jq -r &amp;#39;.results|.[]|.name&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;my-private-repo
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;list-tags&quot;&gt;List tags&lt;&#x2F;h2&gt;
&lt;p&gt;We need to get an authentication token for the Docker Registry. Note that the JWT from the previous step does not work here. DockerHub and the DockerHub Docker Registry are different services and require different authentication credentials.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#282a36;color:#f8f8f2;&quot;&gt;&lt;code&gt;&lt;span&gt;$ export AUTH_SERVICE=&amp;#39;registry.docker.io&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;$ export AUTH_SCOPE=&amp;quot;repository:ansible&#x2F;ansible:pull&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;$ export TOKEN=$(curl -fsSL &amp;quot;https:&#x2F;&#x2F;auth.docker.io&#x2F;token?service=$AUTH_SERVICE&amp;amp;scope=$AUTH_SCOPE&amp;quot; | jq --raw-output &amp;#39;.token&amp;#39;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;$ curl -fsSL \
&lt;&#x2F;span&gt;&lt;span&gt;    -H &amp;quot;Authorization: Bearer $TOKEN&amp;quot; \
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;quot;$REGISTRY_URL&#x2F;v2&#x2F;ansible&#x2F;ansible&#x2F;tags&#x2F;list&amp;quot; | jq
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;quot;name&amp;quot;: &amp;quot;ansible&#x2F;ansible&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;quot;tags&amp;quot;: [
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;quot;centos6&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;quot;centos7&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;quot;cloudstack-simulator&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;    ...
&lt;&#x2F;span&gt;&lt;span&gt;  ]
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;get-image-manifest&quot;&gt;Get image manifest&lt;&#x2F;h2&gt;
&lt;p&gt;We re-use the token from the previous step to make a request that gets the manifest for the &lt;code&gt;ansible:centos7&lt;&#x2F;code&gt; image:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#282a36;color:#f8f8f2;&quot;&gt;&lt;code&gt;&lt;span&gt;$ curl -fsSL \
&lt;&#x2F;span&gt;&lt;span&gt;    -H &amp;quot;Authorization: Bearer $TOKEN&amp;quot; \
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;quot;$REGISTRY_URL&#x2F;v2&#x2F;ansible&#x2F;ansible&#x2F;manifests&#x2F;centos7&amp;quot; | jq
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;quot;schemaVersion&amp;quot;: 1,
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;quot;name&amp;quot;: &amp;quot;ansible&#x2F;ansible&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;quot;tag&amp;quot;: &amp;quot;centos7&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;quot;architecture&amp;quot;: &amp;quot;amd64&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;quot;fsLayers&amp;quot;: [
&lt;&#x2F;span&gt;&lt;span&gt;    {
&lt;&#x2F;span&gt;&lt;span&gt;      &amp;quot;blobSum&amp;quot;: &amp;quot;sha256:a3ed95caeb02ffe68cdd9fd84406680ae93d633cb16422d00e8a7c22955b46d4&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    },
&lt;&#x2F;span&gt;&lt;span&gt;    ...
&lt;&#x2F;span&gt;&lt;span&gt;  ],
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;quot;history&amp;quot;: [...],
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;quot;signatures&amp;quot;: [...]
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;skopeo&quot;&gt;Skopeo&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;containers&#x2F;skopeo&quot;&gt;Skopeo&lt;&#x2F;a&gt; is a CLI tool that makes it easy to quickly check information about docker images such as the available tags:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#282a36;color:#f8f8f2;&quot;&gt;&lt;code&gt;&lt;span&gt;$ skopeo inspect docker:&#x2F;&#x2F;ansible&#x2F;galaxy
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;quot;Name&amp;quot;: &amp;quot;docker.io&#x2F;ansible&#x2F;galaxy&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;quot;Digest&amp;quot;: &amp;quot;sha256:24d0b67d936ca6e7bca253169fc268748d7585c0cee723c14e8e51f37cfd3591&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;quot;RepoTags&amp;quot;: [
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;quot;2.3.0&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;quot;2.3.1&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;quot;2.4.0&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;quot;3.0.0&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;quot;3.0.1&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;        ...
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;quot;3.1.6&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;quot;3.1.7&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;quot;3.1.8&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;quot;develop&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;quot;latest&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    ],
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;quot;Created&amp;quot;: &amp;quot;2019-03-15T09:24:18.817740071Z&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;quot;DockerVersion&amp;quot;: &amp;quot;17.09.0-ce&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;quot;Labels&amp;quot;: {
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;quot;org.label-schema.build-date&amp;quot;: &amp;quot;20190305&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;quot;org.label-schema.license&amp;quot;: &amp;quot;GPLv2&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;quot;org.label-schema.name&amp;quot;: &amp;quot;CentOS Base Image&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;quot;org.label-schema.schema-version&amp;quot;: &amp;quot;1.0&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;quot;org.label-schema.vendor&amp;quot;: &amp;quot;CentOS&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    },
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;quot;Architecture&amp;quot;: &amp;quot;amd64&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;quot;Os&amp;quot;: &amp;quot;linux&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;quot;Layers&amp;quot;: [
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;quot;sha256:8ba884070f611d31cb2c42eddb691319dc9facf5e0ec67672fcfa135181ab3df&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;        ...
&lt;&#x2F;span&gt;&lt;span&gt;    ],
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;quot;Env&amp;quot;: [
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;quot;PATH=&#x2F;usr&#x2F;local&#x2F;sbin:&#x2F;usr&#x2F;local&#x2F;bin:&#x2F;usr&#x2F;sbin:&#x2F;usr&#x2F;bin:&#x2F;sbin:&#x2F;bin&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;quot;PIP_NO_CACHE_DIR=off&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;quot;VENV_BIN=&#x2F;var&#x2F;lib&#x2F;galaxy&#x2F;venv&#x2F;bin&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;quot;TINI_VERSION=v0.16.1&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;quot;HOME=&#x2F;var&#x2F;lib&#x2F;galaxy&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;quot;DJANGO_SETTINGS_MODULE=galaxy.settings.production&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;quot;GIT_COMMITTER_NAME=Ansible Galaxy&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;quot;GIT_COMMITTER_EMAIL=galaxy@ansible.com&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    ]
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Creating CI Pipelines with Tekton (Part 2&#x2F;2)</title>
        <published>2020-05-03T00:00:00+00:00</published>
        <updated>2021-02-13T00:00:00+00:00</updated>
        <author>
          <name>Arthur Koziel</name>
        </author>
        <link rel="alternate" href="https://www.arthurkoziel.com/creating-ci-pipelines-with-tekton-part-2/" type="text/html"/>
        <id>https://www.arthurkoziel.com/creating-ci-pipelines-with-tekton-part-2/</id>
        
        <content type="html">&lt;p&gt;In this blog post we&#x27;re going to continue creating a CI pipeline with &lt;a href=&quot;https:&#x2F;&#x2F;tekton.dev&quot;&gt;Tekton&lt;&#x2F;a&gt;. In &lt;a href=&quot;https:&#x2F;&#x2F;www.arthurkoziel.com&#x2F;creating-ci-pipelines-with-tekton-part-1&#x2F;&quot;&gt;Part 1&lt;&#x2F;a&gt; we installed Tekton on a local &lt;a href=&quot;https:&#x2F;&#x2F;kind.sigs.k8s.io&quot;&gt;kind&lt;&#x2F;a&gt; cluster and defined our first Task which clones a GitHub repository and runs application tests for a Go application (&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;arthurk&#x2F;tekton-example&quot;&gt;repo&lt;&#x2F;a&gt;).&lt;&#x2F;p&gt;
&lt;p&gt;In this part we&#x27;re going to create a Task that will build a Docker image for our Go application and push it to &lt;a href=&quot;https:&#x2F;&#x2F;hub.docker.com&quot;&gt;DockerHub&lt;&#x2F;a&gt;. Afterward we will combine our tasks into a Pipeline.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;adding-dockerhub-credentials&quot;&gt;Adding DockerHub Credentials&lt;&#x2F;h2&gt;
&lt;p&gt;To build and push our Docker image we use &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;GoogleContainerTools&#x2F;kaniko&quot;&gt;Kaniko&lt;&#x2F;a&gt;, which can build Docker images inside a Kubernetes cluster without depending on a Docker daemon.&lt;&#x2F;p&gt;
&lt;p&gt;Kaniko will build and push the image in the same command. This means before running our task we need to set up credentials for DockerHub so that the docker image can be pushed to the registry.&lt;&#x2F;p&gt;
&lt;p&gt;The credentials are saved in a Kubernetes Secret. Create a file named &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;arthurk&#x2F;tekton-example&#x2F;blob&#x2F;master&#x2F;04-secret.yaml&quot;&gt;secret.yaml&lt;&#x2F;a&gt; with the following content and replace &lt;code&gt;myusername&lt;&#x2F;code&gt; and &lt;code&gt;mypassword&lt;&#x2F;code&gt; with your DockerHub credentials:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;yaml&quot; style=&quot;background-color:#282a36;color:#f8f8f2;&quot; class=&quot;language-yaml &quot;&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;apiVersion&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;v1
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;kind&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;Secret
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;metadata&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;basic-user-pass
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;annotations&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;tekton.dev&#x2F;docker-0&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;https:&#x2F;&#x2F;index.docker.io&#x2F;v1&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;type&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;kubernetes.io&#x2F;basic-auth
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;stringData&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;username&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;myusername
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;password&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;mypassword
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Note the &lt;code&gt;tekton.dev&#x2F;docker-0&lt;&#x2F;code&gt; annotation in the metadata which tells Tekton the Docker registry these credentials belong to.&lt;&#x2F;p&gt;
&lt;p&gt;Next we create a &lt;code&gt;ServiceAccount&lt;&#x2F;code&gt; that uses the &lt;code&gt;basic-user-pass&lt;&#x2F;code&gt; Secret. Create a file named &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;arthurk&#x2F;tekton-example&#x2F;blob&#x2F;master&#x2F;05-serviceaccount.yaml&quot;&gt;serviceaccount.yaml&lt;&#x2F;a&gt; with the following content:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;yaml&quot; style=&quot;background-color:#282a36;color:#f8f8f2;&quot; class=&quot;language-yaml &quot;&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;apiVersion&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;v1
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;kind&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;ServiceAccount
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;metadata&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;build-bot
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;secrets&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;basic-user-pass
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Apply both files with kubectl:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#282a36;color:#f8f8f2;&quot;&gt;&lt;code&gt;&lt;span&gt;$ kubectl apply -f secret.yaml
&lt;&#x2F;span&gt;&lt;span&gt;secret&#x2F;basic-user-pass created
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;$ kubectl apply -f serviceaccount.yaml
&lt;&#x2F;span&gt;&lt;span&gt;serviceaccount&#x2F;build-bot created
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We can now use this ServiceAccount (named &lt;code&gt;build-bot&lt;&#x2F;code&gt;) when running Tekton tasks or pipelines by specifying a &lt;code&gt;serviceAccountName&lt;&#x2F;code&gt;. We will see examples of this below.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;creating-a-task-to-build-and-push-a-docker-image&quot;&gt;Creating a Task to build and push a Docker image&lt;&#x2F;h2&gt;
&lt;p&gt;Now that the credentials are set up we can continue by creating the Task that will build and push the Docker image.&lt;&#x2F;p&gt;
&lt;p&gt;Create a file called &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;arthurk&#x2F;tekton-example&#x2F;blob&#x2F;master&#x2F;06-task-build-push.yaml&quot;&gt;task-build-push.yaml&lt;&#x2F;a&gt; with the following content:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;yaml&quot; style=&quot;background-color:#282a36;color:#f8f8f2;&quot; class=&quot;language-yaml &quot;&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;apiVersion&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;tekton.dev&#x2F;v1beta1
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;kind&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;Task
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;metadata&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;build-and-push
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;spec&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;resources&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;inputs&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;      - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;repo
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;type&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;git
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;steps&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;build-and-push
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;image&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;gcr.io&#x2F;kaniko-project&#x2F;executor:v1.3.0
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;env&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;        - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;DOCKER_CONFIG
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;value&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&#x2F;tekton&#x2F;home&#x2F;.docker
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;command&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;        - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&#x2F;kaniko&#x2F;executor
&lt;&#x2F;span&gt;&lt;span&gt;        - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;--dockerfile=Dockerfile
&lt;&#x2F;span&gt;&lt;span&gt;        - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;--context=&#x2F;workspace&#x2F;repo&#x2F;src
&lt;&#x2F;span&gt;&lt;span&gt;        - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;--destination=arthurk&#x2F;tekton-test:latest
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Similarly to the first task this task takes a git repo as an input (the input name is &lt;code&gt;repo&lt;&#x2F;code&gt;) and consists of only a single step since Kaniko builds and pushes the image in the same command.&lt;&#x2F;p&gt;
&lt;p&gt;Make sure to create a DockerHub repository and replace &lt;code&gt;arthurk&#x2F;tekton-test&lt;&#x2F;code&gt; with your repository name. In this example it will always tag and push the image with the &lt;code&gt;latest&lt;&#x2F;code&gt; tag.&lt;&#x2F;p&gt;
&lt;p&gt;Tekton has support for &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;tektoncd&#x2F;pipeline&#x2F;blob&#x2F;master&#x2F;docs&#x2F;pipelines.md#specifying-parameters&quot;&gt;parameters&lt;&#x2F;a&gt; to avoid hardcoding values like this. However to keep this tutorial simple I&#x27;ve left them out.&lt;&#x2F;p&gt;
&lt;p&gt;The &lt;code&gt;DOCKER_CONFIG&lt;&#x2F;code&gt; env var is required for Kaniko to be able to &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;tektoncd&#x2F;pipeline&#x2F;pull&#x2F;706&quot;&gt;find the Docker credentials&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Apply the file with kubectl:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#282a36;color:#f8f8f2;&quot;&gt;&lt;code&gt;&lt;span&gt;$ kubectl apply -f task-build-push.yaml
&lt;&#x2F;span&gt;&lt;span&gt;task.tekton.dev&#x2F;build-and-push created
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;There are two ways we can test this Task, either by manually creating a TaskRun definition and then applying it with &lt;code&gt;kubectl&lt;&#x2F;code&gt; or by using the Tekton CLI (&lt;code&gt;tkn&lt;&#x2F;code&gt;).&lt;&#x2F;p&gt;
&lt;p&gt;In the following two sections I will show both methods.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;run-the-task-with-kubectl&quot;&gt;Run the Task with kubectl&lt;&#x2F;h2&gt;
&lt;p&gt;To run the Task with &lt;code&gt;kubectl&lt;&#x2F;code&gt; we create a TaskRun that looks identical to the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;arthurk&#x2F;tekton-example&#x2F;blob&#x2F;master&#x2F;03-taskrun.yaml&quot;&gt;previous&lt;&#x2F;a&gt; with the exception that we now specify a ServiceAccount (&lt;code&gt;serviceAccountName&lt;&#x2F;code&gt;) to use when executing the Task.&lt;&#x2F;p&gt;
&lt;p&gt;Create a file named &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;arthurk&#x2F;tekton-example&#x2F;blob&#x2F;master&#x2F;07-taskrun-build-push.yaml&quot;&gt;taskrun-build-push.yaml&lt;&#x2F;a&gt; with the following content:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;yaml&quot; style=&quot;background-color:#282a36;color:#f8f8f2;&quot; class=&quot;language-yaml &quot;&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;apiVersion&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;tekton.dev&#x2F;v1beta1
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;kind&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;TaskRun
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;metadata&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;build-and-push
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;spec&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;serviceAccountName&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;build-bot
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;taskRef&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;build-and-push
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;resources&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;inputs&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;      - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;repo
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;resourceRef&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;arthurk-tekton-example
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Apply the task and check the log of the Pod by listing all Pods that start with the Task name &lt;code&gt;build-and-push&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#282a36;color:#f8f8f2;&quot;&gt;&lt;code&gt;&lt;span&gt;$ kubectl apply -f taskrun-build-push.yaml
&lt;&#x2F;span&gt;&lt;span&gt;taskrun.tekton.dev&#x2F;build-and-push created
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;$ kubectl get pods | grep build-and-push
&lt;&#x2F;span&gt;&lt;span&gt;build-and-push-pod-c698q   2&#x2F;2     Running     0          4s
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;$ kubectl logs --all-containers build-and-push-pod-c698q --follow
&lt;&#x2F;span&gt;&lt;span&gt;{&amp;quot;level&amp;quot;:&amp;quot;info&amp;quot;,&amp;quot;ts&amp;quot;:1588478267.3476844,&amp;quot;caller&amp;quot;:&amp;quot;creds-init&#x2F;main.go:44&amp;quot;, &amp;quot;msg&amp;quot;:&amp;quot;Credentials initialized.&amp;quot;}
&lt;&#x2F;span&gt;&lt;span&gt;{&amp;quot;level&amp;quot;:&amp;quot;info&amp;quot;,&amp;quot;ts&amp;quot;:1588478279.2681644,&amp;quot;caller&amp;quot;:&amp;quot;git&#x2F;git.go:136&amp;quot;,&amp;quot;msg&amp;quot;:&amp;quot;Successfully cloned https:&#x2F;&#x2F;github.com&#x2F;arthurk&#x2F;tekton-example @ 301aeaa8f7fa6ec01218ba6c5ddf9095b24d5d98 (grafted, HEAD, origin&#x2F;master) in path &#x2F;workspace&#x2F;repo&amp;quot;}
&lt;&#x2F;span&gt;&lt;span&gt;{&amp;quot;level&amp;quot;:&amp;quot;info&amp;quot;,&amp;quot;ts&amp;quot;:1588478279.3249557,&amp;quot;caller&amp;quot;:&amp;quot;git&#x2F;git.go:177&amp;quot;,&amp;quot;msg&amp;quot;:&amp;quot;Successfully initialized and updated submodules in path &#x2F;workspace&#x2F;repo&amp;quot;}
&lt;&#x2F;span&gt;&lt;span&gt;INFO\[0004\] Resolved base name golang:1.14-alpine to golang:1.14-alpine
&lt;&#x2F;span&gt;&lt;span&gt;INFO\[0004\] Retrieving image manifest golang:1.14-alpine
&lt;&#x2F;span&gt;&lt;span&gt;INFO\[0012\] Built cross stage deps: map\[\]
&lt;&#x2F;span&gt;&lt;span&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;INFO\[0048\] Taking snapshot of full filesystem...
&lt;&#x2F;span&gt;&lt;span&gt;INFO\[0048\] Resolving paths
&lt;&#x2F;span&gt;&lt;span&gt;INFO\[0050\] CMD \[&amp;quot;app&amp;quot;\]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The task executed without problems and we can now pull&#x2F;run our Docker image:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#282a36;color:#f8f8f2;&quot;&gt;&lt;code&gt;&lt;span&gt;$ docker run arthurk&#x2F;tekton-test:latest
&lt;&#x2F;span&gt;&lt;span&gt;hello world
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;run-the-task-with-the-tekton-cli&quot;&gt;Run the Task with the Tekton CLI&lt;&#x2F;h2&gt;
&lt;p&gt;Running the Task with the Tekton CLI is more convenient. With a single command it generates a TaskRun manifest from the Task definition, applies it, and follows the logs.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#282a36;color:#f8f8f2;&quot;&gt;&lt;code&gt;&lt;span&gt;$ tkn task start build-and-push --inputresource repo=arthurk-tekton-example --serviceaccount build-bot --showlog
&lt;&#x2F;span&gt;&lt;span&gt;Taskrun started: build-and-push-run-ctjvv
&lt;&#x2F;span&gt;&lt;span&gt;Waiting for logs to be available...
&lt;&#x2F;span&gt;&lt;span&gt;\[git-source-arthurk-tekton-example-p9zxz\] {&amp;quot;level&amp;quot;:&amp;quot;info&amp;quot;,&amp;quot;ts&amp;quot;:1588479279.271127,&amp;quot;caller&amp;quot;:&amp;quot;git&#x2F;git.go:136&amp;quot;,&amp;quot;msg&amp;quot;:&amp;quot;Successfully cloned https:&#x2F;&#x2F;github.com&#x2F;arthurk&#x2F;tekton-example @ 301aeaa8f7fa6ec01218ba6c5ddf9095b24d5d98 (grafted, HEAD, origin&#x2F;master) in path &#x2F;workspace&#x2F;repo&amp;quot;}
&lt;&#x2F;span&gt;&lt;span&gt;\[git-source-arthurk-tekton-example-p9zxz\] {&amp;quot;level&amp;quot;:&amp;quot;info&amp;quot;,&amp;quot;ts&amp;quot;:1588479279.329212,&amp;quot;caller&amp;quot;:&amp;quot;git&#x2F;git.go:177&amp;quot;,&amp;quot;msg&amp;quot;:&amp;quot;Successfully initialized and updated submodules in path &#x2F;workspace&#x2F;repo&amp;quot;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;\[build-and-push\] INFO\[0004\] Resolved base name golang:1.14-alpine to golang:1.14-alpine
&lt;&#x2F;span&gt;&lt;span&gt;\[build-and-push\] INFO\[0008\] Retrieving image manifest golang:1.14-alpine
&lt;&#x2F;span&gt;&lt;span&gt;\[build-and-push\] INFO\[0012\] Built cross stage deps: map\[\]
&lt;&#x2F;span&gt;&lt;span&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;\[build-and-push\] INFO\[0049\] Taking snapshot of full filesystem...
&lt;&#x2F;span&gt;&lt;span&gt;\[build-and-push\] INFO\[0049\] Resolving paths
&lt;&#x2F;span&gt;&lt;span&gt;\[build-and-push\] INFO\[0051\] CMD \[&amp;quot;app&amp;quot;\]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;What happens in the background is similar to what we did with kubectl in the previous section but this time we only have to run a single command.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;creating-a-pipeline&quot;&gt;Creating a Pipeline&lt;&#x2F;h2&gt;
&lt;p&gt;Now that we have both of our Tasks ready (test, build-and-push) we can create a Pipeline that will run them sequentially: First it will run the application tests and if they pass it will build the Docker image and push it to DockerHub.&lt;&#x2F;p&gt;
&lt;p&gt;Create a file named &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;arthurk&#x2F;tekton-example&#x2F;blob&#x2F;master&#x2F;08-pipeline.yaml&quot;&gt;pipeline.yaml&lt;&#x2F;a&gt; with the following content:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;yaml&quot; style=&quot;background-color:#282a36;color:#f8f8f2;&quot; class=&quot;language-yaml &quot;&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;apiVersion&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;tekton.dev&#x2F;v1beta1
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;kind&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;Pipeline
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;metadata&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;test-build-push
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;spec&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;resources&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;repo
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;type&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;git
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;tasks&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6272a4;&quot;&gt;# Run application tests
&lt;&#x2F;span&gt;&lt;span&gt;    - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;test
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;taskRef&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;test
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;resources&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;inputs&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;          - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;repo      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6272a4;&quot;&gt;# name of the Task input (see Task definition)
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;resource&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;repo  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6272a4;&quot;&gt;# name of the Pipeline resource
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6272a4;&quot;&gt;# Build docker image and push to registry
&lt;&#x2F;span&gt;&lt;span&gt;    - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;build-and-push
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;taskRef&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;build-and-push
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;runAfter&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;        - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;test
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;resources&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;inputs&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;          - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;repo      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6272a4;&quot;&gt;# name of the Task input (see Task definition)
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;resource&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;repo  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6272a4;&quot;&gt;# name of the Pipeline resource
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The first thing we need to define is what resources our Pipeline requires. A resource can either be an input or an output. In our case we only have an input: the git repo with our application source code. We name the resource &lt;code&gt;repo&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Next we define our tasks. Each task has a &lt;code&gt;taskRef&lt;&#x2F;code&gt; (a reference to a Task) and passes the tasks required inputs.&lt;&#x2F;p&gt;
&lt;p&gt;Apply the file with kubectl:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#282a36;color:#f8f8f2;&quot;&gt;&lt;code&gt;&lt;span&gt;$ kubectl apply -f pipeline.yaml
&lt;&#x2F;span&gt;&lt;span&gt;pipeline.tekton.dev&#x2F;test-build-push created
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Similar to how we can run as Task by creating a TaskRun, we can run a Pipeline by creating a PipelineRun.&lt;&#x2F;p&gt;
&lt;p&gt;This can either be done with kubectl or the Tekton CLI. In the following two sections I will show both ways.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;run-the-pipeline-with-kubectl&quot;&gt;Run the Pipeline with kubectl&lt;&#x2F;h2&gt;
&lt;p&gt;To run the file with kubectl we have to create a PipelineRun. Create a file named &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;arthurk&#x2F;tekton-example&#x2F;blob&#x2F;master&#x2F;09-pipelinerun.yaml&quot;&gt;pipelinerun.yaml&lt;&#x2F;a&gt; with the following content:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;yaml&quot; style=&quot;background-color:#282a36;color:#f8f8f2;&quot; class=&quot;language-yaml &quot;&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;apiVersion&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;tekton.dev&#x2F;v1beta1
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;kind&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;PipelineRun
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;metadata&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;test-build-push-pr
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;spec&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;serviceAccountName&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;build-bot
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;pipelineRef&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;test-build-push
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;resources&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;repo
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;resourceRef&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;arthurk-tekton-example
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Apply the file, get the Pods that are prefixed with the PiplelineRun name, and view the logs to get the container output:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#282a36;color:#f8f8f2;&quot;&gt;&lt;code&gt;&lt;span&gt;$ kubectl apply -f pipelinerun.yaml
&lt;&#x2F;span&gt;&lt;span&gt;pipelinerun.tekton.dev&#x2F;test-build-push-pr created
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;$ kubectl get pods | grep test-build-push-pr
&lt;&#x2F;span&gt;&lt;span&gt;test-build-push-pr-build-and-push-gh4f4-pod-nn7k7   0&#x2F;2     Completed   0          2m39s
&lt;&#x2F;span&gt;&lt;span&gt;test-build-push-pr-test-d2tck-pod-zh5hn             0&#x2F;2     Completed   0          2m51s
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;$ kubectl logs test-build-push-pr-build-and-push-gh4f4-pod-nn7k7 --all-containers --follow
&lt;&#x2F;span&gt;&lt;span&gt;INFO\[0005\] Resolved base name golang:1.14-alpine to golang:1.14-alpine
&lt;&#x2F;span&gt;&lt;span&gt;INFO\[0005\] Retrieving image manifest golang:1.14-alpine
&lt;&#x2F;span&gt;&lt;span&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;INFO\[0048\] Taking snapshot of full filesystem...
&lt;&#x2F;span&gt;&lt;span&gt;INFO\[0048\] Resolving paths
&lt;&#x2F;span&gt;&lt;span&gt;INFO\[0050\] CMD \[&amp;quot;app&amp;quot;\]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Next we will run the same Pipeline but we&#x27;re going to use the Tekton CLI instead.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;run-the-pipeline-with-tekton-cli&quot;&gt;Run the Pipeline with Tekton CLI&lt;&#x2F;h2&gt;
&lt;p&gt;When using the CLI we don&#x27;t have to write a PipelineRun, it will be generated from the Pipeline manifest. By using the &lt;code&gt;--showlog&lt;&#x2F;code&gt; argument it will also display the Task (container) logs:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#282a36;color:#f8f8f2;&quot;&gt;&lt;code&gt;&lt;span&gt;$ tkn pipeline start test-build-push --resource repo=arthurk-tekton-example --serviceaccount build-bot --showlog
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;Pipelinerun started: test-build-push-run-9lmfj
&lt;&#x2F;span&gt;&lt;span&gt;Waiting for logs to be available...
&lt;&#x2F;span&gt;&lt;span&gt;\[test : git-source-arthurk-tekton-example-k98k8\] {&amp;quot;level&amp;quot;:&amp;quot;info&amp;quot;,&amp;quot;ts&amp;quot;:1588483940.4913514,&amp;quot;caller&amp;quot;:&amp;quot;git&#x2F;git.go:136&amp;quot;,&amp;quot;msg&amp;quot;:&amp;quot;Successfully cloned https:&#x2F;&#x2F;github.com&#x2F;arthurk&#x2F;tekton-example @ 301aeaa8f7fa6ec01218ba6c5ddf9095b24d5d98 (grafted, HEAD, origin&#x2F;master) in path &#x2F;workspace&#x2F;repo&amp;quot;}
&lt;&#x2F;span&gt;&lt;span&gt;\[test : git-source-arthurk-tekton-example-k98k8\] {&amp;quot;level&amp;quot;:&amp;quot;info&amp;quot;,&amp;quot;ts&amp;quot;:1588483940.5485842,&amp;quot;caller&amp;quot;:&amp;quot;git&#x2F;git.go:177&amp;quot;,&amp;quot;msg&amp;quot;:&amp;quot;Successfully initialized and updated submodules in path &#x2F;workspace&#x2F;repo&amp;quot;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;\[test : run-test\] PASS
&lt;&#x2F;span&gt;&lt;span&gt;\[test : run-test\] ok  	\_&#x2F;workspace&#x2F;repo&#x2F;src	0.006s
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;\[build-and-push : git-source-arthurk-tekton-example-2vqls\] {&amp;quot;level&amp;quot;:&amp;quot;info&amp;quot;,&amp;quot;ts&amp;quot;:1588483950.2051432,&amp;quot;caller&amp;quot;:&amp;quot;git&#x2F;git.go:136&amp;quot;,&amp;quot;msg&amp;quot;:&amp;quot;Successfully cloned https:&#x2F;&#x2F;github.com&#x2F;arthurk&#x2F;tekton-example @ 301aeaa8f7fa6ec01218ba6c5ddf9095b24d5d98 (grafted, HEAD, origin&#x2F;master) in path &#x2F;workspace&#x2F;repo&amp;quot;}
&lt;&#x2F;span&gt;&lt;span&gt;\[build-and-push : git-source-arthurk-tekton-example-2vqls\] {&amp;quot;level&amp;quot;:&amp;quot;info&amp;quot;,&amp;quot;ts&amp;quot;:1588483950.2610846,&amp;quot;caller&amp;quot;:&amp;quot;git&#x2F;git.go:177&amp;quot;,&amp;quot;msg&amp;quot;:&amp;quot;Successfully initialized and updated submodules in path &#x2F;workspace&#x2F;repo&amp;quot;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;\[build-and-push : build-and-push\] INFO\[0003\] Resolved base name golang:1.14-alpine to golang:1.14-alpine
&lt;&#x2F;span&gt;&lt;span&gt;\[build-and-push : build-and-push\] INFO\[0003\] Resolved base name golang:1.14-alpine to golang:1.14-alpine
&lt;&#x2F;span&gt;&lt;span&gt;\[build-and-push : build-and-push\] INFO\[0003\] Retrieving image manifest golang:1.14-alpine
&lt;&#x2F;span&gt;&lt;span&gt;...
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;summary&quot;&gt;Summary&lt;&#x2F;h2&gt;
&lt;p&gt;In &lt;a href=&quot;https:&#x2F;&#x2F;www.arthurkoziel.com&#x2F;creating-ci-pipelines-with-tekton-part-1&#x2F;&quot;&gt;Part 1&lt;&#x2F;a&gt; we installed Tekton on a local Kubernetes cluster, defined a Task, and tested it by creating a TaskRun via YAML manifest as well as the Tekton CLI tkn.&lt;&#x2F;p&gt;
&lt;p&gt;In this part we created our first Tektok Pipeline that consists of two tasks. The first one clones a repo from GitHub and runs application tests. The second one builds a Docker image and pushes it to DockerHub.&lt;&#x2F;p&gt;
&lt;p&gt;All code examples are available &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;arthurk&#x2F;tekton-example&quot;&gt;here&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Creating CI Pipelines with Tekton (Part 1&#x2F;2)</title>
        <published>2020-04-26T00:00:00+00:00</published>
        <updated>2021-02-13T00:00:00+00:00</updated>
        <author>
          <name>Arthur Koziel</name>
        </author>
        <link rel="alternate" href="https://www.arthurkoziel.com/creating-ci-pipelines-with-tekton-part-1/" type="text/html"/>
        <id>https://www.arthurkoziel.com/creating-ci-pipelines-with-tekton-part-1/</id>
        
        <content type="html">&lt;p&gt;In this blog post we&#x27;re going to build a continuous integration (CI) pipeline with &lt;a href=&quot;https:&#x2F;&#x2F;tekton.dev&quot;&gt;Tekton&lt;&#x2F;a&gt;, an open-source framework for creating CI&#x2F;CD pipelines in Kubernetes.&lt;&#x2F;p&gt;
&lt;p&gt;We&#x27;re going to provision a local Kubernetes cluster via &lt;a href=&quot;https:&#x2F;&#x2F;kind.sigs.k8s.io&quot;&gt;kind&lt;&#x2F;a&gt; and install Tekton on it. After that we&#x27;ll create a pipeline consisting of two steps which will run application unit tests, build a Docker image, and push it to DockerHub.&lt;&#x2F;p&gt;
&lt;p&gt;This is part 1 of 2 in which we will install Tekton and create a task that runs our application test. The second part is available &lt;a href=&quot;https:&#x2F;&#x2F;www.arthurkoziel.com&#x2F;creating-ci-pipelines-with-tekton-part-2&#x2F;&quot;&gt;here&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;creating-the-k8s-cluster&quot;&gt;Creating the k8s cluster&lt;&#x2F;h2&gt;
&lt;p&gt;We use &lt;a href=&quot;http:&#x2F;&#x2F;kind.sigs.k8s.io&quot;&gt;kind&lt;&#x2F;a&gt; to create a Kubernetes cluster for our Tekton installation:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#282a36;color:#f8f8f2;&quot;&gt;&lt;code&gt;&lt;span&gt;$ kind create cluster --name tekton
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;installing-tekton&quot;&gt;Installing Tekton&lt;&#x2F;h2&gt;
&lt;p&gt;We can install Tekton by applying the &lt;code&gt;release.yaml&lt;&#x2F;code&gt; file from the latest release of the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;tektoncd&#x2F;pipeline&quot;&gt;tektoncd&#x2F;pipeline&lt;&#x2F;a&gt; GitHub repo:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#282a36;color:#f8f8f2;&quot;&gt;&lt;code&gt;&lt;span&gt;$ kubectl apply -f https:&#x2F;&#x2F;storage.googleapis.com&#x2F;tekton-releases&#x2F;pipeline&#x2F;previous&#x2F;v0.20.1&#x2F;release.yaml
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This will install Tekton into the &lt;code&gt;tekton-pipelines&lt;&#x2F;code&gt; namespace. We can check that the installation succeeded by listing the Pods in that namespace and making sure they&#x27;re in &lt;code&gt;Running&lt;&#x2F;code&gt; state.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#282a36;color:#f8f8f2;&quot;&gt;&lt;code&gt;&lt;span&gt;$ kubectl get pods --namespace tekton-pipelines
&lt;&#x2F;span&gt;&lt;span&gt;NAME                                           READY   STATUS    RESTARTS   AGE
&lt;&#x2F;span&gt;&lt;span&gt;tekton-pipelines-controller-74848c44df-m42gf   1&#x2F;1     Running   0          20s
&lt;&#x2F;span&gt;&lt;span&gt;tekton-pipelines-webhook-6f764dc8bf-zq44s      1&#x2F;1     Running   0          19s
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;setting-up-the-tekton-cli&quot;&gt;Setting up the Tekton CLI&lt;&#x2F;h2&gt;
&lt;p&gt;Installing the CLI is optional but I found it to be more convenient than &lt;code&gt;kubectl&lt;&#x2F;code&gt; when managing Tekton resources. The examples later on will show both ways.&lt;&#x2F;p&gt;
&lt;p&gt;We can install it via Homebrew:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#282a36;color:#f8f8f2;&quot;&gt;&lt;code&gt;&lt;span&gt;$ brew tap tektoncd&#x2F;tools
&lt;&#x2F;span&gt;&lt;span&gt;$ brew install tektoncd&#x2F;tools&#x2F;tektoncd-cli
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;$ tkn version
&lt;&#x2F;span&gt;&lt;span&gt;Client version: 0.16.0
&lt;&#x2F;span&gt;&lt;span&gt;Pipeline version: v0.20.1
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;concepts&quot;&gt;Concepts&lt;&#x2F;h2&gt;
&lt;p&gt;Tekton provides custom resource definitions (&lt;a href=&quot;https:&#x2F;&#x2F;kubernetes.io&#x2F;docs&#x2F;concepts&#x2F;extend-kubernetes&#x2F;api-extension&#x2F;custom-resources&#x2F;&quot;&gt;CRDs&lt;&#x2F;a&gt;) for Kubernetes that can be used to define our Pipelines. In this tutorial we will use the following custom resources:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Task: A series of steps that execute commands (In CircleCI this is called a &lt;em&gt;Job&lt;&#x2F;em&gt;)&lt;&#x2F;li&gt;
&lt;li&gt;Pipeline: A set of Tasks (In CircleCI this is called a &lt;em&gt;Workflow&lt;&#x2F;em&gt;)&lt;&#x2F;li&gt;
&lt;li&gt;PipelineResource: Input or Output of a Pipeline (for example a git repo or a tar file)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;We will use the following two resources to define the execution of our Tasks and Pipeline:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;TaskRun: Defines the execution of a Task&lt;&#x2F;li&gt;
&lt;li&gt;PipelineRun: Defines the execution of a Pipeline&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;For example, if we write a Task and want to test it we can execute it with a TaskRun. The same applies for a Pipeline: To execute a Pipeline we need to create a PipelineRun.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;application-code&quot;&gt;Application Code&lt;&#x2F;h2&gt;
&lt;p&gt;In our example Pipeline we&#x27;re going to use a Go application that simply prints the sum of two integers. You can find the application code, test, and Dockerfile in the &lt;code&gt;src&#x2F;&lt;&#x2F;code&gt; directory in &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;arthurk&#x2F;tekton-example&quot;&gt;this repo&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;creating-our-first-task&quot;&gt;Creating our first task&lt;&#x2F;h2&gt;
&lt;p&gt;Our first Task will run the application tests inside the cloned git repo. Create a file called &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;arthurk&#x2F;tekton-example&#x2F;blob&#x2F;master&#x2F;01-task-test.yaml&quot;&gt;01-task-test.yaml&lt;&#x2F;a&gt; with the following content:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;yaml&quot; style=&quot;background-color:#282a36;color:#f8f8f2;&quot; class=&quot;language-yaml &quot;&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;apiVersion&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;tekton.dev&#x2F;v1beta1
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;kind&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;Task
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;metadata&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;test
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;spec&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;resources&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;inputs&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;      - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;repo
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;type&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;git
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;steps&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;run-test
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;image&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;golang:1.14-alpine
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;workingDir&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&#x2F;workspace&#x2F;repo&#x2F;src
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;command&lt;&#x2F;span&gt;&lt;span&gt;: [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;go&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;args&lt;&#x2F;span&gt;&lt;span&gt;: [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;test&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The &lt;code&gt;resources:&lt;&#x2F;code&gt; block defines the inputs that our task needs to execute its steps. Our step (named &lt;code&gt;run-test&lt;&#x2F;code&gt;) needs the cloned &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;arthurk&#x2F;tekton-example&#x2F;&quot;&gt;tekton-example&lt;&#x2F;a&gt; git repository as an input and we can create this input with a PipelineResource.&lt;&#x2F;p&gt;
&lt;p&gt;Create a file called &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;arthurk&#x2F;tekton-example&#x2F;blob&#x2F;master&#x2F;02-pipelineresource.yaml&quot;&gt;02-pipelineresource.yaml&lt;&#x2F;a&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;yaml&quot; style=&quot;background-color:#282a36;color:#f8f8f2;&quot; class=&quot;language-yaml &quot;&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;apiVersion&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;tekton.dev&#x2F;v1alpha1
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;kind&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;PipelineResource
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;metadata&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;arthurk-tekton-example
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;spec&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;type&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;git
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;params&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;url
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;value&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;https:&#x2F;&#x2F;github.com&#x2F;arthurk&#x2F;tekton-example
&lt;&#x2F;span&gt;&lt;span&gt;    - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;revision
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;value&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;master
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The &lt;code&gt;git&lt;&#x2F;code&gt; resource type will use git to clone the repo into the &lt;code&gt;&#x2F;workspace&#x2F;$input_name&lt;&#x2F;code&gt; directory everytime the Task is run. Since our input is named &lt;code&gt;repo&lt;&#x2F;code&gt; the code will be cloned to &lt;code&gt;&#x2F;workspace&#x2F;repo&lt;&#x2F;code&gt;. If our input would be named &lt;code&gt;foobar&lt;&#x2F;code&gt; it would be cloned into &lt;code&gt;&#x2F;workspace&#x2F;foobar&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;The next block in our Task (&lt;code&gt;steps:&lt;&#x2F;code&gt;) specifies the command to execute and the Docker image in which to run that command. We&#x27;re going to use the &lt;a href=&quot;https:&#x2F;&#x2F;hub.docker.com&#x2F;_&#x2F;golang&quot;&gt;golang&lt;&#x2F;a&gt; Docker image as it already has Go installed.&lt;&#x2F;p&gt;
&lt;p&gt;For the &lt;code&gt;go test&lt;&#x2F;code&gt; command to run we need to change the directory. By default the command will run in the &lt;code&gt;&#x2F;workspace&#x2F;repo&lt;&#x2F;code&gt; directory but in our &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;arthurk&#x2F;tekton-example&quot;&gt;tekton-example&lt;&#x2F;a&gt; repo the Go application is in the &lt;code&gt;src&lt;&#x2F;code&gt; directory. We do this by setting &lt;code&gt;workingDir: &#x2F;workspace&#x2F;repo&#x2F;src&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Next we specify the command to run (&lt;code&gt;go test&lt;&#x2F;code&gt;) but note that the command (&lt;code&gt;go&lt;&#x2F;code&gt;) and args (&lt;code&gt;test&lt;&#x2F;code&gt;) need to be defined separately in the YAML file.&lt;&#x2F;p&gt;
&lt;p&gt;Apply the Task and the PipelineResource with kubectl:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#282a36;color:#f8f8f2;&quot;&gt;&lt;code&gt;&lt;span&gt;$ kubectl apply -f 01-task-test.yaml
&lt;&#x2F;span&gt;&lt;span&gt;task.tekton.dev&#x2F;test created
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;$ kubectl apply -f 02-pipelineresource.yaml
&lt;&#x2F;span&gt;&lt;span&gt;pipelineresource.tekton.dev&#x2F;arthurk-tekton-example created
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;running-our-task&quot;&gt;Running our task&lt;&#x2F;h2&gt;
&lt;p&gt;To run our &lt;code&gt;Task&lt;&#x2F;code&gt; we have to create a &lt;code&gt;TaskRun&lt;&#x2F;code&gt; that references the previously created &lt;code&gt;Task&lt;&#x2F;code&gt; and passes in all required inputs (&lt;code&gt;PipelineResource&lt;&#x2F;code&gt;).&lt;&#x2F;p&gt;
&lt;p&gt;Create a file called &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;arthurk&#x2F;tekton-example&#x2F;blob&#x2F;master&#x2F;03-taskrun.yaml&quot;&gt;03-taskrun.yaml&lt;&#x2F;a&gt; with the following content:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;yaml&quot; style=&quot;background-color:#282a36;color:#f8f8f2;&quot; class=&quot;language-yaml &quot;&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;apiVersion&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;tekton.dev&#x2F;v1beta1
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;kind&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;TaskRun
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;metadata&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;testrun
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;spec&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;taskRef&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;test
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;resources&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;inputs&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;      - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;repo
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;resourceRef&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;arthurk-tekton-example
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This will take our Task (&lt;code&gt;taskRef&lt;&#x2F;code&gt; is a reference to our previously created task named &lt;code&gt;test&lt;&#x2F;code&gt;) with our &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;arthurk&#x2F;tekton-example&quot;&gt;tekton-example&lt;&#x2F;a&gt; git repo as an input (&lt;code&gt;resourceRef&lt;&#x2F;code&gt; is a reference to our PipelineResource named &lt;code&gt;arthurk-tekton-example&lt;&#x2F;code&gt;) and execute it.&lt;&#x2F;p&gt;
&lt;p&gt;Apply the file with kubectl and then check the Pods and TaskRun resources. The Pod will go through the &lt;code&gt;Init:0&#x2F;2&lt;&#x2F;code&gt; and &lt;code&gt;PodInitializing&lt;&#x2F;code&gt; status and then succeed:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#282a36;color:#f8f8f2;&quot;&gt;&lt;code&gt;&lt;span&gt;$ kubectl apply -f 03-taskrun.yaml
&lt;&#x2F;span&gt;&lt;span&gt;pipelineresource.tekton.dev&#x2F;arthurk-tekton-example created
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;$ kubectl get pods
&lt;&#x2F;span&gt;&lt;span&gt;NAME                READY   STATUS      RESTARTS   AGE
&lt;&#x2F;span&gt;&lt;span&gt;testrun-pod-pds5z   0&#x2F;2     Completed   0          4m27s
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;$ kubectl get taskrun
&lt;&#x2F;span&gt;&lt;span&gt;NAME      SUCCEEDED   REASON      STARTTIME   COMPLETIONTIME
&lt;&#x2F;span&gt;&lt;span&gt;testrun   True        Succeeded   70s         57s
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;To see the output of the containers we can run the following command. Make sure to replace &lt;code&gt;testrun-pod-pds5z&lt;&#x2F;code&gt; with the the Pod name from the output above (it will be different for each run).&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#282a36;color:#f8f8f2;&quot;&gt;&lt;code&gt;&lt;span&gt;$ kubectl logs testrun-pod-pds5z --all-containers
&lt;&#x2F;span&gt;&lt;span&gt;{&amp;quot;level&amp;quot;:&amp;quot;info&amp;quot;,&amp;quot;ts&amp;quot;:1588477119.3692405,&amp;quot;caller&amp;quot;:&amp;quot;git&#x2F;git.go:136&amp;quot;,&amp;quot;msg&amp;quot;:&amp;quot;Successfully cloned https:&#x2F;&#x2F;github.com&#x2F;arthurk&#x2F;tekton-example @ 301aeaa8f7fa6ec01218ba6c5ddf9095b24d5d98 (grafted, HEAD, origin&#x2F;master) in path &#x2F;workspace&#x2F;repo&amp;quot;}
&lt;&#x2F;span&gt;&lt;span&gt;{&amp;quot;level&amp;quot;:&amp;quot;info&amp;quot;,&amp;quot;ts&amp;quot;:1588477119.4230678,&amp;quot;caller&amp;quot;:&amp;quot;git&#x2F;git.go:177&amp;quot;,&amp;quot;msg&amp;quot;:&amp;quot;Successfully initialized and updated submodules in path &#x2F;workspace&#x2F;repo&amp;quot;}
&lt;&#x2F;span&gt;&lt;span&gt;PASS
&lt;&#x2F;span&gt;&lt;span&gt;ok  	_&#x2F;workspace&#x2F;repo&#x2F;src	0.003s
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Our tests passed and our task succeeded. Next we will use the Tekton CLI to see how we can make this whole process easier.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;using-the-tekton-cli-to-run-a-task&quot;&gt;Using the Tekton CLI to run a Task&lt;&#x2F;h2&gt;
&lt;p&gt;The Tekton CLI provides a faster and more convenient way to run Tasks.&lt;&#x2F;p&gt;
&lt;p&gt;Instead of manually writing a &lt;code&gt;TaskRun&lt;&#x2F;code&gt; manifest we can run the following command which takes our Task (named &lt;code&gt;test&lt;&#x2F;code&gt;), generates a &lt;code&gt;TaskRun&lt;&#x2F;code&gt; (with a random name) and shows its logs:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#282a36;color:#f8f8f2;&quot;&gt;&lt;code&gt;&lt;span&gt;$ tkn task start test --inputresource repo=arthurk-tekton-example --showlog
&lt;&#x2F;span&gt;&lt;span&gt;Taskrun started: test-run-8t46m
&lt;&#x2F;span&gt;&lt;span&gt;Waiting for logs to be available...
&lt;&#x2F;span&gt;&lt;span&gt;[git-source-arthurk-tekton-example-dqjfb] {&amp;quot;level&amp;quot;:&amp;quot;info&amp;quot;,&amp;quot;ts&amp;quot;:1588477372.740875,&amp;quot;caller&amp;quot;:&amp;quot;git&#x2F;git.go:136&amp;quot;,&amp;quot;msg&amp;quot;:&amp;quot;Successfully cloned https:&#x2F;&#x2F;github.com&#x2F;arthurk&#x2F;tekton-example @ 301aeaa8f7fa6ec01218ba6c5ddf9095b24d5d98 (grafted, HEAD, origin&#x2F;master) in path &#x2F;workspace&#x2F;repo&amp;quot;}
&lt;&#x2F;span&gt;&lt;span&gt;[git-source-arthurk-tekton-example-dqjfb] {&amp;quot;level&amp;quot;:&amp;quot;info&amp;quot;,&amp;quot;ts&amp;quot;:1588477372.7954974,&amp;quot;caller&amp;quot;:&amp;quot;git&#x2F;git.go:177&amp;quot;,&amp;quot;msg&amp;quot;:&amp;quot;Successfully initialized and updated submodules in path &#x2F;workspace&#x2F;repo&amp;quot;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;[run-test] PASS
&lt;&#x2F;span&gt;&lt;span&gt;[run-test] ok  	_&#x2F;workspace&#x2F;repo&#x2F;src	0.006s
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;&#x2F;h2&gt;
&lt;p&gt;We have successfully installed Tekton on a local Kubernetes cluster, defined a Task, and tested it by creating a TaskRun via YAML manifest as well as the Tekton CLI &lt;code&gt;tkn&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;All example code is available &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;arthurk&#x2F;tekton-example&quot;&gt;here&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;In the next part we&#x27;re going to create a task that will use &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;GoogleContainerTools&#x2F;kaniko&quot;&gt;Kaniko&lt;&#x2F;a&gt; to build a Docker image for our application and then push it to DockerHub. We will then create a Pipeline that runs both of our tasks sequentially (run application tests, build and push).&lt;&#x2F;p&gt;
&lt;p&gt;Part 2 is available &lt;a href=&quot;https:&#x2F;&#x2F;www.arthurkoziel.com&#x2F;creating-ci-pipelines-with-tekton-part-2&#x2F;&quot;&gt;here&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Running Knative with Istio in a Kind Cluster</title>
        <published>2020-04-19T00:00:00+00:00</published>
        <updated>2020-04-19T00:00:00+00:00</updated>
        <author>
          <name>Arthur Koziel</name>
        </author>
        <link rel="alternate" href="https://www.arthurkoziel.com/running-knative-with-istio-in-kind/" type="text/html"/>
        <id>https://www.arthurkoziel.com/running-knative-with-istio-in-kind/</id>
        
        <content type="html">&lt;p&gt;In this blog post I&#x27;m going to show how to run &lt;a href=&quot;https:&#x2F;&#x2F;knative.dev&quot;&gt;Knative&lt;&#x2F;a&gt; with &lt;a href=&quot;https:&#x2F;&#x2F;istio.io&quot;&gt;Istio&lt;&#x2F;a&gt; as a networking layer on a local &lt;a href=&quot;https:&#x2F;&#x2F;kind.sigs.k8s.io&quot;&gt;kind&lt;&#x2F;a&gt; cluster.&lt;&#x2F;p&gt;
&lt;p&gt;I&#x27;m assuming that kind and kubectl are installed. Installation instructions for kind are &lt;a href=&quot;https:&#x2F;&#x2F;kind.sigs.k8s.io&#x2F;docs&#x2F;user&#x2F;quick-start&#x2F;#installation&quot;&gt;here&lt;&#x2F;a&gt; and kubectl &lt;a href=&quot;https:&#x2F;&#x2F;kubernetes.io&#x2F;docs&#x2F;tasks&#x2F;tools&#x2F;install-kubectl&#x2F;&quot;&gt;here&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#282a36;color:#f8f8f2;&quot;&gt;&lt;code&gt;&lt;span&gt;$ kind --version
&lt;&#x2F;span&gt;&lt;span&gt;kind kind version 0.7.0
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;$ kubectl version --client
&lt;&#x2F;span&gt;&lt;span&gt;Client Version: version.Info{Major:&amp;quot;1&amp;quot;, Minor:&amp;quot;15&amp;quot;, GitVersion:&amp;quot;v1.15.5&amp;quot;, GitCommit:&amp;quot;20c265fef0741dd71a66480e35bd69f18351daea&amp;quot;, GitTreeState:&amp;quot;clean&amp;quot;, BuildDate:&amp;quot;2019-10-15T19:16:51Z&amp;quot;, GoVersion:&amp;quot;go1.12.10&amp;quot;, Compiler:&amp;quot;gc&amp;quot;, Platform:&amp;quot;darwin&#x2F;amd64&amp;quot;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;setup-a-kind-cluster&quot;&gt;Setup a kind cluster&lt;&#x2F;h2&gt;
&lt;p&gt;To get traffic into our cluster we need to create our kind cluster with a custom configuration that sets up a port forward from host to ingress controller.&lt;&#x2F;p&gt;
&lt;p&gt;In this setup we&#x27;re going to use port &lt;code&gt;32000&lt;&#x2F;code&gt;. Later we will configure the Istio ingress gateway to accept connections on this port.&lt;&#x2F;p&gt;
&lt;p&gt;Create a file named &lt;code&gt;kind-config-istio.yml&lt;&#x2F;code&gt; with the following content:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;yaml&quot; style=&quot;background-color:#282a36;color:#f8f8f2;&quot; class=&quot;language-yaml &quot;&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;kind&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;Cluster
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;apiVersion&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;kind.sigs.k8s.io&#x2F;v1alpha3
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;nodes&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;role&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;control-plane
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;extraPortMappings&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;containerPort&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bd93f9;&quot;&gt;32000
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;hostPort&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bd93f9;&quot;&gt;80
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;To create the cluster with our custom configuration we use the &lt;code&gt;--config&lt;&#x2F;code&gt; argument:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#282a36;color:#f8f8f2;&quot;&gt;&lt;code&gt;&lt;span&gt;$ kind create cluster --config kind-config-istio.yml
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;Creating cluster &amp;quot;kind&amp;quot; ...
&lt;&#x2F;span&gt;&lt;span&gt; ✓ Ensuring node image (kindest&#x2F;node:v1.17.0) 🖼
&lt;&#x2F;span&gt;&lt;span&gt; ✓ Preparing nodes 📦
&lt;&#x2F;span&gt;&lt;span&gt; ✓ Writing configuration 📜
&lt;&#x2F;span&gt;&lt;span&gt; ✓ Starting control-plane 🕹️
&lt;&#x2F;span&gt;&lt;span&gt; ✓ Installing CNI 🔌
&lt;&#x2F;span&gt;&lt;span&gt; ✓ Installing StorageClass 💾
&lt;&#x2F;span&gt;&lt;span&gt;Set kubectl context to &amp;quot;kind-kind&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;You can now use your cluster with:
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;kubectl cluster-info --context kind-kind
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;install-istio&quot;&gt;Install Istio&lt;&#x2F;h2&gt;
&lt;p&gt;We&#x27;re going to install Istio via the &lt;a href=&quot;https:&#x2F;&#x2F;istio.io&#x2F;docs&#x2F;reference&#x2F;commands&#x2F;istioctl&#x2F;&quot;&gt;istioctl&lt;&#x2F;a&gt; command-line tool. The following command will download version istioctl v1.5.1 for macOS and extract it into the current directory:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#282a36;color:#f8f8f2;&quot;&gt;&lt;code&gt;&lt;span&gt;$ curl -L https:&#x2F;&#x2F;github.com&#x2F;istio&#x2F;istio&#x2F;releases&#x2F;download&#x2F;1.5.1&#x2F;istioctl-1.5.1-osx.tar.gz | tar xvz -
&lt;&#x2F;span&gt;&lt;span&gt;$ .&#x2F;istioctl version --remote=false
&lt;&#x2F;span&gt;&lt;span&gt;1.5.1
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Istio can be installed with different configuration profiles. In this example we are going to use the &lt;code&gt;default&lt;&#x2F;code&gt; profile which will install the pilot, ingressgateway and prometheus. A list of all built-in configuration profiles and their differences can be found &lt;a href=&quot;https:&#x2F;&#x2F;istio.io&#x2F;docs&#x2F;setup&#x2F;additional-setup&#x2F;config-profiles&#x2F;&quot;&gt;here&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;The following command will perform the installation:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#282a36;color:#f8f8f2;&quot;&gt;&lt;code&gt;&lt;span&gt;$ .&#x2F;istioctl manifest apply --set profile=default
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;Detected that your cluster does not support third party JWT authentication. Falling back to less secure first party JWT. See https:&#x2F;&#x2F;istio.io&#x2F;docs&#x2F;ops&#x2F;best-practices&#x2F;security&#x2F;#configure-third-party-service-account-tokens for details.
&lt;&#x2F;span&gt;&lt;span&gt;- Applying manifest for component Base...
&lt;&#x2F;span&gt;&lt;span&gt;✔ Finished applying manifest for component Base.
&lt;&#x2F;span&gt;&lt;span&gt;- Applying manifest for component Pilot...
&lt;&#x2F;span&gt;&lt;span&gt;✔ Finished applying manifest for component Pilot.
&lt;&#x2F;span&gt;&lt;span&gt;- Applying manifest for component IngressGateways...
&lt;&#x2F;span&gt;&lt;span&gt;- Applying manifest for component AddonComponents...
&lt;&#x2F;span&gt;&lt;span&gt;✔ Finished applying manifest for component AddonComponents.
&lt;&#x2F;span&gt;&lt;span&gt;✔ Finished applying manifest for component IngressGateways.
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;✔ Installation complete
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We can check that the pods are running via kubectl:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#282a36;color:#f8f8f2;&quot;&gt;&lt;code&gt;&lt;span&gt;$ kubectl get pods -n istio-system
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;NAME                                    READY   STATUS    RESTARTS   AGE
&lt;&#x2F;span&gt;&lt;span&gt;istio-ingressgateway-5f54974979-crw9d   1&#x2F;1     Running   0          21s
&lt;&#x2F;span&gt;&lt;span&gt;istiod-6548b95486-djvd6                 1&#x2F;1     Running   0          6m57s
&lt;&#x2F;span&gt;&lt;span&gt;prometheus-6c88c4cb8-wtdtn              2&#x2F;2     Running   0          21s
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;To verify the installation we can run the &lt;code&gt;verify-install&lt;&#x2F;code&gt; command and pass in the manifest of the default configuration profile:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#282a36;color:#f8f8f2;&quot;&gt;&lt;code&gt;&lt;span&gt;$ .&#x2F;istioctl manifest generate --set profile=default | .&#x2F;istioctl verify-install -f -
&lt;&#x2F;span&gt;&lt;span&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;Checked 25 crds
&lt;&#x2F;span&gt;&lt;span&gt;Checked 1 Istio Deployments
&lt;&#x2F;span&gt;&lt;span&gt;Istio is installed successfully
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The configuration profile will set the ingress type to &lt;code&gt;LoadBalancer&lt;&#x2F;code&gt;, which is not working on a local cluster.&lt;&#x2F;p&gt;
&lt;p&gt;For the ingress gateway to accept incoming connections we have to change the type from &lt;code&gt;LoadBalancer&lt;&#x2F;code&gt; to &lt;code&gt;NodePort&lt;&#x2F;code&gt; and change the assigned port to &lt;code&gt;32000&lt;&#x2F;code&gt; (the port we forwarded during the cluster creation).&lt;&#x2F;p&gt;
&lt;p&gt;Create a file named &lt;code&gt;patch-ingressgateway-nodeport.yaml&lt;&#x2F;code&gt; with the following content:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;yaml&quot; style=&quot;background-color:#282a36;color:#f8f8f2;&quot; class=&quot;language-yaml &quot;&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;spec&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;type&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;NodePort
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;ports&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;http2
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;nodePort&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bd93f9;&quot;&gt;32000
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;port&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bd93f9;&quot;&gt;80
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;protocol&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;TCP
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;targetPort&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bd93f9;&quot;&gt;80
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We apply the file with &lt;code&gt;kubectl patch&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#282a36;color:#f8f8f2;&quot;&gt;&lt;code&gt;&lt;span&gt;$ kubectl patch service istio-ingressgateway -n istio-system --patch &amp;quot;$(cat patch-ingressgateway-nodeport.yaml)&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;service&#x2F;istio-ingressgateway patched
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Istio is now set up and ready to accept connections.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;install-knative&quot;&gt;Install Knative&lt;&#x2F;h2&gt;
&lt;p&gt;Knative consists of two components: &lt;a href=&quot;https:&#x2F;&#x2F;knative.dev&#x2F;docs&#x2F;serving&#x2F;&quot;&gt;Serving&lt;&#x2F;a&gt; and &lt;a href=&quot;https:&#x2F;&#x2F;knative.dev&#x2F;docs&#x2F;eventing&#x2F;&quot;&gt;Eventing&lt;&#x2F;a&gt;. In this example we&#x27;re going to install the Serving component.&lt;&#x2F;p&gt;
&lt;p&gt;We start by applying the Kubernetes manifests for the CRDs, Core and Istio ingress controller:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#282a36;color:#f8f8f2;&quot;&gt;&lt;code&gt;&lt;span&gt;$ kubectl apply -f https:&#x2F;&#x2F;github.com&#x2F;knative&#x2F;serving&#x2F;releases&#x2F;download&#x2F;v0.14.0&#x2F;serving-crds.yaml
&lt;&#x2F;span&gt;&lt;span&gt;$ kubectl apply -f https:&#x2F;&#x2F;github.com&#x2F;knative&#x2F;serving&#x2F;releases&#x2F;download&#x2F;v0.14.0&#x2F;serving-core.yaml
&lt;&#x2F;span&gt;&lt;span&gt;$ kubectl apply -f https:&#x2F;&#x2F;github.com&#x2F;knative&#x2F;net-istio&#x2F;releases&#x2F;download&#x2F;v0.14.0&#x2F;net-istio.yaml
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We check the pods via kubectl and wait until they have the status &lt;code&gt;Running&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#282a36;color:#f8f8f2;&quot;&gt;&lt;code&gt;&lt;span&gt;$ kubectl get pods --namespace knative-serving
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;NAME                                READY   STATUS    RESTARTS   AGE
&lt;&#x2F;span&gt;&lt;span&gt;activator-65fc4d666-2bj8r           2&#x2F;2     Running   0          9m
&lt;&#x2F;span&gt;&lt;span&gt;autoscaler-74b4bb97bd-9rql4         2&#x2F;2     Running   0          9m
&lt;&#x2F;span&gt;&lt;span&gt;controller-6b6978c965-rks25         2&#x2F;2     Running   0          9m
&lt;&#x2F;span&gt;&lt;span&gt;istio-webhook-856d84fbf9-8nswp      2&#x2F;2     Running   0          8m58s
&lt;&#x2F;span&gt;&lt;span&gt;networking-istio-6845f7cf59-6h25b   1&#x2F;1     Running   0          8m58s
&lt;&#x2F;span&gt;&lt;span&gt;webhook-577576647-rw264             2&#x2F;2     Running   0          9m
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Knative will create a custom URL for each service and for this to work it needs to have DNS configured. Since our cluster is running locally we need to use a wildcard DNS service (for example &lt;a href=&quot;https:&#x2F;&#x2F;nip.io&quot;&gt;nip.io&lt;&#x2F;a&gt;).&lt;&#x2F;p&gt;
&lt;p&gt;We patch the Knative config via kubectl and set the domain to &lt;code&gt;127.0.0.1.nip.io&lt;&#x2F;code&gt; which will forward all requests to &lt;code&gt;127.0.0.1&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#282a36;color:#f8f8f2;&quot;&gt;&lt;code&gt;&lt;span&gt;$ kubectl patch configmap&#x2F;config-domain \
&lt;&#x2F;span&gt;&lt;span&gt;  --namespace knative-serving \
&lt;&#x2F;span&gt;&lt;span&gt;  --type merge \
&lt;&#x2F;span&gt;&lt;span&gt;  --patch &amp;#39;{&amp;quot;data&amp;quot;:{&amp;quot;127.0.0.1.nip.io&amp;quot;:&amp;quot;&amp;quot;}}&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;configmap&#x2F;config-domain patched
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Knative is now installed and ready to use.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;creating-a-test-service&quot;&gt;Creating a test service&lt;&#x2F;h2&gt;
&lt;p&gt;To check that Knative is working correctly we deploy a test service that consists of an &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;jmalloc&#x2F;echo-server&quot;&gt;echo-server&lt;&#x2F;a&gt; which will return the request headers and body.&lt;&#x2F;p&gt;
&lt;p&gt;We start by creating a file named &lt;code&gt;knative-echoserver.yaml&lt;&#x2F;code&gt; with the following content:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;yaml&quot; style=&quot;background-color:#282a36;color:#f8f8f2;&quot; class=&quot;language-yaml &quot;&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;apiVersion&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;serving.knative.dev&#x2F;v1
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;kind&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;Service
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;metadata&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;helloworld
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;namespace&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;default
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;spec&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;template&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;spec&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;containers&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;        - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;image&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;jmalloc&#x2F;echo-server
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We enable Istio sidecar injection for the default namespace and deploy the Knative service in it:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#282a36;color:#f8f8f2;&quot;&gt;&lt;code&gt;&lt;span&gt;$ kubectl label namespace default istio-injection=enabled
&lt;&#x2F;span&gt;&lt;span&gt;namespace&#x2F;default labeled
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;$ kubectl apply -f knative-echoserver.yaml
&lt;&#x2F;span&gt;&lt;span&gt;service.serving.knative.dev&#x2F;helloworld created
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We can check the deployment of the pods via kubectl:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#282a36;color:#f8f8f2;&quot;&gt;&lt;code&gt;&lt;span&gt;$ kubectl get pods
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;NAME                                           READY   STATUS    RESTARTS   AGE
&lt;&#x2F;span&gt;&lt;span&gt;helloworld-96c68-deployment-6744444b5f-6htld   3&#x2F;3     Running   0          108s
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;When all pods are running we can get the URL of the service and make an HTTP request to it:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#282a36;color:#f8f8f2;&quot;&gt;&lt;code&gt;&lt;span&gt;$ kubectl get ksvc
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;NAME         URL                                          LATESTCREATED      LATESTREADY        READY   REASON
&lt;&#x2F;span&gt;&lt;span&gt;helloworld   http:&#x2F;&#x2F;helloworld.default.127.0.0.1.nip.io   helloworld-96c68   helloworld-96c68   True
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;$ curl http:&#x2F;&#x2F;helloworld.default.127.0.0.1.nip.io
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;Request served by helloworld-96c68-deployment-6744444b5f-6htld
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;HTTP&#x2F;1.1 GET &#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;Host: helloworld.default.127.0.0.1.nip.io
&lt;&#x2F;span&gt;&lt;span&gt;X-Request-Id: 9e5bf3c9-0bc8-4551-9302-ea2eca5f6446
&lt;&#x2F;span&gt;&lt;span&gt;User-Agent: curl&#x2F;7.64.1
&lt;&#x2F;span&gt;&lt;span&gt;Accept-Encoding: gzip
&lt;&#x2F;span&gt;&lt;span&gt;Forwarded: for=10.244.0.1;proto=http, for=127.0.0.1
&lt;&#x2F;span&gt;&lt;span&gt;X-B3-Traceid: d22e218318367687170ce339b13b0c91
&lt;&#x2F;span&gt;&lt;span&gt;X-Forwarded-For: 10.244.0.1, 127.0.0.1, 127.0.0.1
&lt;&#x2F;span&gt;&lt;span&gt;X-B3-Spanid: 0e3174748253699d
&lt;&#x2F;span&gt;&lt;span&gt;X-Forwarded-Proto: http
&lt;&#x2F;span&gt;&lt;span&gt;Accept: \*&#x2F;\*
&lt;&#x2F;span&gt;&lt;span&gt;K-Proxy-Request: activator
&lt;&#x2F;span&gt;&lt;span&gt;X-B3-Parentspanid: c39ad4d28b42b25f
&lt;&#x2F;span&gt;&lt;span&gt;X-B3-Sampled: 0
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The response shows the pod which served the request (&lt;code&gt;helloworld-96c68-deployment-6744444b5f-6htld&lt;&#x2F;code&gt;) and the tracing headers that Istio will add to every request.&lt;&#x2F;p&gt;
&lt;p&gt;If we wait a few minutes we can see that Knative will scale down our service to zero replicas (no incoming requests). In this case we can make another request to the service and see it scale up again.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Writing tar.gz files in Go</title>
        <published>2020-04-12T00:00:00+00:00</published>
        <updated>2020-04-12T00:00:00+00:00</updated>
        <author>
          <name>Arthur Koziel</name>
        </author>
        <link rel="alternate" href="https://www.arthurkoziel.com/writing-tar-gz-files-in-go/" type="text/html"/>
        <id>https://www.arthurkoziel.com/writing-tar-gz-files-in-go/</id>
        
        <content type="html">&lt;p&gt;In this blog post I&#x27;m going to explain how to use the Go &lt;code&gt;archive&#x2F;tar&lt;&#x2F;code&gt; and &lt;code&gt;compress&#x2F;gzip&lt;&#x2F;code&gt; packages to create a tar archive and compress it with gzip.&lt;&#x2F;p&gt;
&lt;p&gt;Below is the full example code and after that there&#x27;s an explanation of the parts.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;full-code&quot;&gt;Full Code&lt;&#x2F;h2&gt;
&lt;pre data-lang=&quot;go&quot; style=&quot;background-color:#282a36;color:#f8f8f2;&quot; class=&quot;language-go &quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;package &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;main
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;io&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;archive&#x2F;tar&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;compress&#x2F;gzip&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;log&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;fmt&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;os&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#8be9fd;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50fa7b;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6272a4;&quot;&gt;&#x2F;&#x2F; Files which to include in the tar.gz archive
&lt;&#x2F;span&gt;&lt;span&gt;	files &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span&gt;[]&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#66d9ef;&quot;&gt;string&lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;example.txt&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;test&#x2F;test.txt&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6272a4;&quot;&gt;&#x2F;&#x2F; Create output file
&lt;&#x2F;span&gt;&lt;span&gt;	out, err &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;os&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50fa7b;&quot;&gt;Create&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;output.tar.gz&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;!= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bd93f9;&quot;&gt;nil &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;log&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50fa7b;&quot;&gt;Fatalln&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;Error writing archive:&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;err&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;	}
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;defer &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;out&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50fa7b;&quot;&gt;Close&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6272a4;&quot;&gt;&#x2F;&#x2F; Create the archive and write the output to the &amp;quot;out&amp;quot; Writer
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50fa7b;&quot;&gt;createArchive&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;files&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;out&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;!= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bd93f9;&quot;&gt;nil &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;log&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50fa7b;&quot;&gt;Fatalln&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;Error creating archive:&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;err&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;	}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;fmt&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50fa7b;&quot;&gt;Println&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;Archive created successfully&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#8be9fd;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50fa7b;&quot;&gt;createArchive&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#ffb86c;&quot;&gt;files &lt;&#x2F;span&gt;&lt;span&gt;[]&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#66d9ef;&quot;&gt;string&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#ffb86c;&quot;&gt;buf &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;io&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#8be9fd;&quot;&gt;Writer&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#66d9ef;&quot;&gt;error &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6272a4;&quot;&gt;&#x2F;&#x2F; Create new Writers for gzip and tar
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6272a4;&quot;&gt;&#x2F;&#x2F; These writers are chained. Writing to the tar writer will
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6272a4;&quot;&gt;&#x2F;&#x2F; write to the gzip writer which in turn will write to
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6272a4;&quot;&gt;&#x2F;&#x2F; the &amp;quot;buf&amp;quot; writer
&lt;&#x2F;span&gt;&lt;span&gt;	gw &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;gzip&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50fa7b;&quot;&gt;NewWriter&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;buf&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;defer &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;gw&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50fa7b;&quot;&gt;Close&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;	tw &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;tar&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50fa7b;&quot;&gt;NewWriter&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;gw&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;defer &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;tw&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50fa7b;&quot;&gt;Close&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6272a4;&quot;&gt;&#x2F;&#x2F; Iterate over files and add them to the tar archive
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bd93f9;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;, file &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;:= range &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;files &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;		err &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50fa7b;&quot;&gt;addToArchive&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;tw&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;file&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;!= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bd93f9;&quot;&gt;nil &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;			&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;err
&lt;&#x2F;span&gt;&lt;span&gt;		}
&lt;&#x2F;span&gt;&lt;span&gt;	}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bd93f9;&quot;&gt;nil
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#8be9fd;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50fa7b;&quot;&gt;addToArchive&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#ffb86c;&quot;&gt;tw &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;tar&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#8be9fd;&quot;&gt;Writer&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#ffb86c;&quot;&gt;filename &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#66d9ef;&quot;&gt;string&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#66d9ef;&quot;&gt;error &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6272a4;&quot;&gt;&#x2F;&#x2F; Open the file which will be written into the archive
&lt;&#x2F;span&gt;&lt;span&gt;	file, err &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;os&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50fa7b;&quot;&gt;Open&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;filename&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;!= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bd93f9;&quot;&gt;nil &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;err
&lt;&#x2F;span&gt;&lt;span&gt;	}
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;defer &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;file&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50fa7b;&quot;&gt;Close&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6272a4;&quot;&gt;&#x2F;&#x2F; Get FileInfo about our file providing file size, mode, etc.
&lt;&#x2F;span&gt;&lt;span&gt;	info, err &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;file&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50fa7b;&quot;&gt;Stat&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;!= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bd93f9;&quot;&gt;nil &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;err
&lt;&#x2F;span&gt;&lt;span&gt;	}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6272a4;&quot;&gt;&#x2F;&#x2F; Create a tar Header from the FileInfo data
&lt;&#x2F;span&gt;&lt;span&gt;	header, err &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;tar&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50fa7b;&quot;&gt;FileInfoHeader&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;info&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;info&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50fa7b;&quot;&gt;Name&lt;&#x2F;span&gt;&lt;span&gt;())
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;!= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bd93f9;&quot;&gt;nil &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;err
&lt;&#x2F;span&gt;&lt;span&gt;	}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6272a4;&quot;&gt;&#x2F;&#x2F; Use full path as name (FileInfoHeader only takes the basename)
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6272a4;&quot;&gt;&#x2F;&#x2F; If we don&amp;#39;t do this the directory strucuture would
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6272a4;&quot;&gt;&#x2F;&#x2F; not be preserved
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6272a4;&quot;&gt;&#x2F;&#x2F; https:&#x2F;&#x2F;golang.org&#x2F;src&#x2F;archive&#x2F;tar&#x2F;common.go?#L626
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;header&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;Name &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;filename
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6272a4;&quot;&gt;&#x2F;&#x2F; Write file header to the tar archive
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;tw&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50fa7b;&quot;&gt;WriteHeader&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;header&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;!= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bd93f9;&quot;&gt;nil &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;err
&lt;&#x2F;span&gt;&lt;span&gt;	}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6272a4;&quot;&gt;&#x2F;&#x2F; Copy file content to tar archive
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bd93f9;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;io&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50fa7b;&quot;&gt;Copy&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;tw&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;file&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;!= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bd93f9;&quot;&gt;nil &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;err
&lt;&#x2F;span&gt;&lt;span&gt;	}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bd93f9;&quot;&gt;nil
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;explanation&quot;&gt;Explanation&lt;&#x2F;h2&gt;
&lt;p&gt;In the main function we first declare &lt;code&gt;files&lt;&#x2F;code&gt; as a string slice. It contains the paths of the files that will be included in the archive.&lt;&#x2F;p&gt;
&lt;p&gt;For this example I&#x27;ve created two text files. I placed one of them in the same directory as the &lt;code&gt;main.go&lt;&#x2F;code&gt; file and the other one in a subdirectory. The purpose of this is to test that the directory structure will be correctly restored after extraction.&lt;&#x2F;p&gt;
&lt;p&gt;We then create the output file with &lt;a href=&quot;https:&#x2F;&#x2F;golang.org&#x2F;pkg&#x2F;os&#x2F;#Create&quot;&gt;os.Create()&lt;&#x2F;a&gt; and pass it to the &lt;code&gt;createArchive&lt;&#x2F;code&gt; function along with our file paths.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;go&quot; style=&quot;background-color:#282a36;color:#f8f8f2;&quot; class=&quot;language-go &quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span style=&quot;font-style:italic;color:#8be9fd;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50fa7b;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6272a4;&quot;&gt;&#x2F;&#x2F; Files which to include in the tar.gz archive
&lt;&#x2F;span&gt;&lt;span&gt;	files &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span&gt;[]&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#66d9ef;&quot;&gt;string&lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;example.txt&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;test&#x2F;test.txt&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6272a4;&quot;&gt;&#x2F;&#x2F; Create output file
&lt;&#x2F;span&gt;&lt;span&gt;	out, err &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;os&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50fa7b;&quot;&gt;Create&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;output.tar.gz&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;!= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bd93f9;&quot;&gt;nil &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;log&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50fa7b;&quot;&gt;Fatalln&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;Error writing archive:&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;err&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;	}
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;defer &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;out&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50fa7b;&quot;&gt;Close&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6272a4;&quot;&gt;&#x2F;&#x2F; Create the archive and write the output to the &amp;quot;out&amp;quot; Writer
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50fa7b;&quot;&gt;createArchive&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;files&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;out&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;!= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bd93f9;&quot;&gt;nil &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;log&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50fa7b;&quot;&gt;Fatalln&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;Error creating archive:&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;err&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;	}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;fmt&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50fa7b;&quot;&gt;Println&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;Archive created successfully&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The &lt;code&gt;createArchive&lt;&#x2F;code&gt; function creates two Writer: The &lt;a href=&quot;https:&#x2F;&#x2F;golang.org&#x2F;pkg&#x2F;archive&#x2F;tar&#x2F;#NewWriter&quot;&gt;tar Writer&lt;&#x2F;a&gt; and the &lt;a href=&quot;https:&#x2F;&#x2F;golang.org&#x2F;pkg&#x2F;compress&#x2F;gzip&#x2F;#NewWriter&quot;&gt;gzip Writer&lt;&#x2F;a&gt;. Both implement the &lt;a href=&quot;https:&#x2F;&#x2F;golang.org&#x2F;pkg&#x2F;io&#x2F;#Writer&quot;&gt;io.Writer&lt;&#x2F;a&gt; interface.&lt;&#x2F;p&gt;
&lt;p&gt;The Writers are chained which means that bytes written to the tar Writer &lt;code&gt;tw&lt;&#x2F;code&gt; will simultaneously be written to the gzip Writer &lt;code&gt;gw&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;We will then iterate over the files in the &lt;code&gt;files&lt;&#x2F;code&gt; slice and call the &lt;code&gt;addToArchive&lt;&#x2F;code&gt; function for each of them with the filename and the tar Writer as arguments.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;go&quot; style=&quot;background-color:#282a36;color:#f8f8f2;&quot; class=&quot;language-go &quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span style=&quot;font-style:italic;color:#8be9fd;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50fa7b;&quot;&gt;createArchive&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#ffb86c;&quot;&gt;files &lt;&#x2F;span&gt;&lt;span&gt;[]&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#66d9ef;&quot;&gt;string&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#ffb86c;&quot;&gt;buf &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;io&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#8be9fd;&quot;&gt;Writer&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#66d9ef;&quot;&gt;error &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6272a4;&quot;&gt;&#x2F;&#x2F; Create new Writers for gzip and tar
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6272a4;&quot;&gt;&#x2F;&#x2F; These writers are chained. Writing to the tar Writer will
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6272a4;&quot;&gt;&#x2F;&#x2F; write to the gzip writer which in turn will write to
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6272a4;&quot;&gt;&#x2F;&#x2F; the &amp;quot;buf&amp;quot; writer
&lt;&#x2F;span&gt;&lt;span&gt;	gw &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;gzip&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50fa7b;&quot;&gt;NewWriter&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;buf&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;defer &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;gw&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50fa7b;&quot;&gt;Close&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;	tw &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;tar&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50fa7b;&quot;&gt;NewWriter&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;gw&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;defer &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;tw&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50fa7b;&quot;&gt;Close&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6272a4;&quot;&gt;&#x2F;&#x2F; Iterate over files and and add them to the tar archive
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bd93f9;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;, file &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;:= range &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;files &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;		err &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50fa7b;&quot;&gt;addToArchive&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;tw&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;file&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;!= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bd93f9;&quot;&gt;nil &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;			&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;err
&lt;&#x2F;span&gt;&lt;span&gt;		}
&lt;&#x2F;span&gt;&lt;span&gt;	}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bd93f9;&quot;&gt;nil
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Inside the &lt;code&gt;addToArchive&lt;&#x2F;code&gt; function we open the file and get a &lt;a href=&quot;https:&#x2F;&#x2F;golang.org&#x2F;pkg&#x2F;os&#x2F;#FileInfo&quot;&gt;FileInfo&lt;&#x2F;a&gt;. The FileInfo contains information such as the file name, size or mode which is necessary for the next step.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;go&quot; style=&quot;background-color:#282a36;color:#f8f8f2;&quot; class=&quot;language-go &quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span style=&quot;color:#6272a4;&quot;&gt;&#x2F;&#x2F; Open the file which will be written into the archive
&lt;&#x2F;span&gt;&lt;span&gt;file, err &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;os&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50fa7b;&quot;&gt;Open&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;filename&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;!= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bd93f9;&quot;&gt;nil &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;err
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;defer &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;file&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50fa7b;&quot;&gt;Close&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6272a4;&quot;&gt;&#x2F;&#x2F; Get FileInfo about our file providing file size, mode, etc.
&lt;&#x2F;span&gt;&lt;span&gt;info, err &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;file&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50fa7b;&quot;&gt;Stat&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;!= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bd93f9;&quot;&gt;nil &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;err
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Each file in a tar archive has a &lt;a href=&quot;https:&#x2F;&#x2F;golang.org&#x2F;pkg&#x2F;archive&#x2F;tar&#x2F;#Header&quot;&gt;header&lt;&#x2F;a&gt; containing metadata about the file followed by the file content. In this step we create the header by calling &lt;a href=&quot;https:&#x2F;&#x2F;golang.org&#x2F;pkg&#x2F;archive&#x2F;tar&#x2F;#FileInfoHeader&quot;&gt;FileInfoHeader&lt;&#x2F;a&gt; which will take our FileInfo &lt;code&gt;info&lt;&#x2F;code&gt; and generate a valid tar Header from it.&lt;&#x2F;p&gt;
&lt;p&gt;The os.FileInfo &lt;code&gt;info&lt;&#x2F;code&gt; only stores the base name of the file. For example if we pass in &lt;code&gt;test&#x2F;test.txt&lt;&#x2F;code&gt; it will only store the filename &lt;code&gt;test.txt&lt;&#x2F;code&gt;. This is a problem when creating the tar archive as it would omit the directory structure of our files. To fix this we have to set &lt;code&gt;header.Name&lt;&#x2F;code&gt; to the full file path.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;go&quot; style=&quot;background-color:#282a36;color:#f8f8f2;&quot; class=&quot;language-go &quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span style=&quot;color:#6272a4;&quot;&gt;&#x2F;&#x2F; Create a tar Header from the FileInfo data
&lt;&#x2F;span&gt;&lt;span&gt;header, err &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;tar&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50fa7b;&quot;&gt;FileInfoHeader&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;info&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;info&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50fa7b;&quot;&gt;Name&lt;&#x2F;span&gt;&lt;span&gt;())
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;!= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bd93f9;&quot;&gt;nil &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;err
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6272a4;&quot;&gt;&#x2F;&#x2F; Use full path as name (FileInfoHeader only takes the basename)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6272a4;&quot;&gt;&#x2F;&#x2F; If we don&amp;#39;t do this the directory strucuture would
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6272a4;&quot;&gt;&#x2F;&#x2F; not be preserved
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6272a4;&quot;&gt;&#x2F;&#x2F; https:&#x2F;&#x2F;golang.org&#x2F;src&#x2F;archive&#x2F;tar&#x2F;common.go?#L626
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;header&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;Name &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;filename
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Now we can write the header and the file content to the Writer.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;go&quot; style=&quot;background-color:#282a36;color:#f8f8f2;&quot; class=&quot;language-go &quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span style=&quot;color:#6272a4;&quot;&gt;&#x2F;&#x2F; Write file header to the tar archive
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;tw&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50fa7b;&quot;&gt;WriteHeader&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;header&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;!= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bd93f9;&quot;&gt;nil &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;err
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6272a4;&quot;&gt;&#x2F;&#x2F; Copy file content to tar archive
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bd93f9;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;io&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50fa7b;&quot;&gt;Copy&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;tw&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;file&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;!= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bd93f9;&quot;&gt;nil &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;err
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;run-the-program&quot;&gt;Run the program&lt;&#x2F;h2&gt;
&lt;p&gt;We can now run our program and check that the files can be extracted.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#282a36;color:#f8f8f2;&quot;&gt;&lt;code&gt;&lt;span&gt;$ go run main.go
&lt;&#x2F;span&gt;&lt;span&gt;Archive created successfully
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;$ tar xzfv output.tar.gz
&lt;&#x2F;span&gt;&lt;span&gt;x example.txt
&lt;&#x2F;span&gt;&lt;span&gt;x test&#x2F;test.txt
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;$ exa --tree
&lt;&#x2F;span&gt;&lt;span&gt;.
&lt;&#x2F;span&gt;&lt;span&gt;├── example.txt
&lt;&#x2F;span&gt;&lt;span&gt;├── output.tar.gz
&lt;&#x2F;span&gt;&lt;span&gt;└── test
&lt;&#x2F;span&gt;&lt;span&gt;   └── test.txt
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Both files have been extracted successfully.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Notes about Google CloudSQL for Postgres</title>
        <published>2020-04-05T00:00:00+00:00</published>
        <updated>2020-04-05T00:00:00+00:00</updated>
        <author>
          <name>Arthur Koziel</name>
        </author>
        <link rel="alternate" href="https://www.arthurkoziel.com/notes-about-google-cloudsql-for-postgres/" type="text/html"/>
        <id>https://www.arthurkoziel.com/notes-about-google-cloudsql-for-postgres/</id>
        
        <content type="html">&lt;p&gt;Here are a few things that I&#x27;ve learned about Google CloudSQL for Postgres during the last 2 years in which I&#x27;ve been using it.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;price&quot;&gt;Price&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;It&#x27;s usually the most expensive part of the project accounting for around 80% of the total cost. The parts that need to be paid for are CPU Cores, RAM, Disk Storage and Network Internet Egress. Automated backups and HA are optional and cost extra.&lt;&#x2F;li&gt;
&lt;li&gt;There&#x27;s a &lt;a href=&quot;https:&#x2F;&#x2F;cloud.google.com&#x2F;products&#x2F;calculator&quot;&gt;pricing calculator&lt;&#x2F;a&gt; available but I haven&#x27;t been able to replicate the price on the invoice (at least in my case the total on the invoice was &lt;em&gt;lower&lt;&#x2F;em&gt; than what the calculator showed). I suggest to just try it for one or two months and see for yourself. Make sure to set a budget in GCP so the cost doesn&#x27;t go too high.&lt;&#x2F;li&gt;
&lt;li&gt;Read-only replicas need to have at least the same hardware as the master instance. This means each read-replica will double the cost.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;replication&quot;&gt;Replication&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;As mentioned above a read-replica needs to have at least the same hardware (cores, memory, storage) as the master instance. It can have better hardware.&lt;&#x2F;li&gt;
&lt;li&gt;External replication is not supported. You can create read-only replicas in CloudSQL but it&#x27;s not possible to use streaming replication to an external Postgres instance.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;ha-high-availability&quot;&gt;HA (High Availability)&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;Failover will take place after the master instance is unresponsive for 1 minute. In total it takes 2-3 minutes for connections to be re-established.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;backups&quot;&gt;Backups&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;Deleting the instance will delete all of its backups too. Always make sure to have an additional backup job running that will export the data to another location.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;performance&quot;&gt;Performance&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;Network throughput (MB&#x2F;s) depends on the number of CPU cores. More CPU Cores = More throughput. 1 CPU core has 250 MB&#x2F;s throughput and the maximum is 2000 MB&#x2F;s which is reached at 8 cores.&lt;&#x2F;li&gt;
&lt;li&gt;Disk throughput and IOPS depend on the disk size. The minimum size is 10 GB which has 4.8 MB&#x2F;s of read&#x2F;write throughput and 300 IOPS (read&#x2F;write). The maximum is 800 MB&#x2F;s read and 400 MB&#x2F;s write throughput with 15,000 IOPS (read&#x2F;write) which is reached at 500 GB disk size.&lt;&#x2F;li&gt;
&lt;li&gt;The network latency from a GKE instance to CloudSQL is around 3ms. There is no difference in latency between using a private and public ip.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;maintenance&quot;&gt;Maintenance&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;The maintenance downtime is 1-2 minutes and occurs during a selected time window.&lt;&#x2F;li&gt;
&lt;li&gt;Maintenance notifications were recently added. Only e-mail notifications are supported.&lt;&#x2F;li&gt;
&lt;li&gt;Upgrading Postgres to a new major version is only possible by dumping the data and then importing it after the upgrade. For our 128 GB database it took around 40 minutes to export and 5 hours to import (pg_restore). This is not including the time it took to download the export from Cloud Storage.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Managing Helm Charts with Helmfile</title>
        <published>2020-03-29T00:00:00+00:00</published>
        <updated>2020-03-29T00:00:00+00:00</updated>
        <author>
          <name>Arthur Koziel</name>
        </author>
        <link rel="alternate" href="https://www.arthurkoziel.com/managing-helm-charts-with-helmfile/" type="text/html"/>
        <id>https://www.arthurkoziel.com/managing-helm-charts-with-helmfile/</id>
        
        <content type="html">&lt;p&gt;In this blog post I&#x27;m going to show how &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;roboll&#x2F;helmfile&quot;&gt;Helmfile&lt;&#x2F;a&gt; makes it easier to manage Helm charts and environments.&lt;&#x2F;p&gt;
&lt;p&gt;To do this I&#x27;m going to walk through an example where at the beginning we install helm charts over the CLI using the &lt;code&gt;helm&lt;&#x2F;code&gt; command, and then refactor the code in steps to use the &lt;code&gt;helmfile&lt;&#x2F;code&gt; command instead.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;setup&quot;&gt;Setup&lt;&#x2F;h2&gt;
&lt;p&gt;Our setup consists of 2 applications (backend and frontend) and Prometheus for metrics. We have helm charts for:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Backend (custom chart)&lt;&#x2F;li&gt;
&lt;li&gt;Frontend (custom chart)&lt;&#x2F;li&gt;
&lt;li&gt;Prometheus (chart from the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;helm&#x2F;charts&#x2F;tree&#x2F;master&#x2F;stable&#x2F;prometheus&quot;&gt;helm stable repo&lt;&#x2F;a&gt;)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;which are deployed into these environments:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Development&lt;&#x2F;li&gt;
&lt;li&gt;Staging&lt;&#x2F;li&gt;
&lt;li&gt;Production&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;The files are organized in this directory structure:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#282a36;color:#f8f8f2;&quot;&gt;&lt;code&gt;&lt;span&gt;.
&lt;&#x2F;span&gt;&lt;span&gt;└── charts
&lt;&#x2F;span&gt;&lt;span&gt;   ├── backend
&lt;&#x2F;span&gt;&lt;span&gt;   │  ├── Chart.yaml
&lt;&#x2F;span&gt;&lt;span&gt;   │  ├── templates
&lt;&#x2F;span&gt;&lt;span&gt;   │  └── values-development.yaml
&lt;&#x2F;span&gt;&lt;span&gt;   │  └── values-staging.yaml
&lt;&#x2F;span&gt;&lt;span&gt;   │  └── values-production.yaml
&lt;&#x2F;span&gt;&lt;span&gt;   │  └── secrets-development.yaml
&lt;&#x2F;span&gt;&lt;span&gt;   │  └── secrets-staging.yaml
&lt;&#x2F;span&gt;&lt;span&gt;   │  └── secrets-production.yaml
&lt;&#x2F;span&gt;&lt;span&gt;   └── frontend
&lt;&#x2F;span&gt;&lt;span&gt;   │  ├── Chart.yaml
&lt;&#x2F;span&gt;&lt;span&gt;   │  ├── templates
&lt;&#x2F;span&gt;&lt;span&gt;   │  └── values-development.yaml
&lt;&#x2F;span&gt;&lt;span&gt;   │  └── values-staging.yaml
&lt;&#x2F;span&gt;&lt;span&gt;   │  └── values-production.yaml
&lt;&#x2F;span&gt;&lt;span&gt;   │  └── secrets-development.yaml
&lt;&#x2F;span&gt;&lt;span&gt;   │  └── secrets-staging.yaml
&lt;&#x2F;span&gt;&lt;span&gt;   │  └── secrets-production.yaml
&lt;&#x2F;span&gt;&lt;span&gt;   └── prometheus
&lt;&#x2F;span&gt;&lt;span&gt;      └── values-development.yaml
&lt;&#x2F;span&gt;&lt;span&gt;      └── values-staging.yaml
&lt;&#x2F;span&gt;&lt;span&gt;      └── values-production.yaml
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Each values-development.yaml, values-staging.yaml, values-production.yaml file contains values that are specific to that environment.&lt;&#x2F;p&gt;
&lt;p&gt;For example the development environment only needs to deploy 1 replica of the backend while the staging and production environments need 3 replicas.&lt;&#x2F;p&gt;
&lt;p&gt;We use &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;fstech&#x2F;helm-secrets&quot;&gt;helm-secrets&lt;&#x2F;a&gt; to manage secrets. Each secrets file is encrypted and has to be manually decrypted before deploying the chart. After the deployment is done the decrypted file has to be deleted.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;installation-and-upgrades&quot;&gt;Installation and Upgrades&lt;&#x2F;h2&gt;
&lt;p&gt;With the above setup we use the following commands to deploy (install&#x2F;upgrade) the backend chart in the staging environment:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#282a36;color:#f8f8f2;&quot;&gt;&lt;code&gt;&lt;span&gt;helm secrets dec .&#x2F;charts&#x2F;backend&#x2F;secrets-backend.yaml
&lt;&#x2F;span&gt;&lt;span&gt;helm upgrade --install --atomic --cleanup-on-fail -f .&#x2F;charts&#x2F;backend&#x2F;values-staging.yaml -f .&#x2F;charts&#x2F;backend&#x2F;secrets-staging.yaml backend .&#x2F;charts&#x2F;backend
&lt;&#x2F;span&gt;&lt;span&gt;rm .&#x2F;charts&#x2F;backend&#x2F;secrets-backend.yaml.dec
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We use the &lt;code&gt;helm upgrade&lt;&#x2F;code&gt; command with the &lt;code&gt;--install&lt;&#x2F;code&gt; flag to be able to install and upgrade charts with the same command. We also use the &lt;code&gt;--atomic&lt;&#x2F;code&gt; and &lt;code&gt;--cleanup-on-fail&lt;&#x2F;code&gt; flags to rollback changes in case a chart upgrade fails.&lt;&#x2F;p&gt;
&lt;p&gt;To deploy the other charts we have to repeat the same commands (for the prometheus chart we can leave out the part that handles secrets).&lt;&#x2F;p&gt;
&lt;p&gt;Now the problem is that it&#x27;s hard to remember the exact commands to run when deploying a chart (especially when the upgrades are not very frequent). When multiple people are responsible for deployments it&#x27;s also difficult to make sure the same commands are used. If, for example, the secrets were not decrypted beforehand it will lead to encrypted values being deployed and probably crash the application.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;writing-bash-scripts&quot;&gt;Writing Bash Scripts&lt;&#x2F;h2&gt;
&lt;p&gt;To fix the issues mentioned above we can write bash scripts that execute the exact commands needed for a deployment. We create one script per environment in each chart directory which leads to the following directory tree for the backend chart:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#282a36;color:#f8f8f2;&quot;&gt;&lt;code&gt;&lt;span&gt;.
&lt;&#x2F;span&gt;&lt;span&gt;└── charts
&lt;&#x2F;span&gt;&lt;span&gt;   ├── backend
&lt;&#x2F;span&gt;&lt;span&gt;      ├── Chart.yaml
&lt;&#x2F;span&gt;&lt;span&gt;      ├── templates&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;      └── values-development.yaml
&lt;&#x2F;span&gt;&lt;span&gt;      └── values-staging.yaml
&lt;&#x2F;span&gt;&lt;span&gt;      └── values-production.yaml
&lt;&#x2F;span&gt;&lt;span&gt;      └── secrets-development.yaml
&lt;&#x2F;span&gt;&lt;span&gt;      └── secrets-staging.yaml
&lt;&#x2F;span&gt;&lt;span&gt;      └── secrets-production.yaml
&lt;&#x2F;span&gt;&lt;span&gt;      └── deploy-development.sh
&lt;&#x2F;span&gt;&lt;span&gt;      └── deploy-staging.sh
&lt;&#x2F;span&gt;&lt;span&gt;      └── deploy-production.sh
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;When we want to deploy the backend chart in the staging environment we can run:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#282a36;color:#f8f8f2;&quot;&gt;&lt;code&gt;&lt;span&gt;.&#x2F;charts&#x2F;backend&#x2F;deploy-staging.sh
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This works fine for small environments like in the example above, but for larger environments with 15 or 20 charts it will lead to a lot of similar-looking bash scripts with large amounts of code duplication.&lt;&#x2F;p&gt;
&lt;p&gt;Provisioning a new environment would mean that a new deploy script has to be created in each chart directory. If we have 15 charts that means we have to copy one of the existing deploy scripts 15 times and search&#x2F;replace the contents to match the new environment name.&lt;&#x2F;p&gt;
&lt;p&gt;To avoid duplicating the same code over and over again we could consolidate all of our small deploy scripts into one large deploy script. But this comes with a cost: We have to spend time maintaining it, fixing bugs and possibly extend it to handle new environments.&lt;&#x2F;p&gt;
&lt;p&gt;At this point Helmfile comes in handy. Instead of writing our custom deploy script we can declare our environments in a YAML file and let it handle the deployment logic for us.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;using-a-helmfile&quot;&gt;Using a Helmfile&lt;&#x2F;h2&gt;
&lt;p&gt;Using the backend chart as an example we can write the following content into a &lt;code&gt;helmfile.yaml&lt;&#x2F;code&gt; file to manage the staging deployment:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;yaml&quot; style=&quot;background-color:#282a36;color:#f8f8f2;&quot; class=&quot;language-yaml &quot;&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;releases&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;backend
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;chart&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;charts&#x2F;backend
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;values&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;charts&#x2F;backend&#x2F;values-staging.yaml
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;secrets&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;charts&#x2F;backend&#x2F;secrets-staging.yaml
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We can deploy the chart by running:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#282a36;color:#f8f8f2;&quot;&gt;&lt;code&gt;&lt;span&gt;helmfile sync
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;In the background Helmfile will run the same &lt;code&gt;helm upgrade --install ...&lt;&#x2F;code&gt; command as before.&lt;&#x2F;p&gt;
&lt;p&gt;Note that there&#x27;s no need to manually decrypt secrets anymore as Helmfile has built-in support for helm-secrets. This means that any file that is listed under &lt;code&gt;secrets:&lt;&#x2F;code&gt; will automatically be decrypted and after the deployment is finished the decrypted file will automatically be removed.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;environments&quot;&gt;Environments&lt;&#x2F;h2&gt;
&lt;p&gt;The above example uses the &lt;code&gt;values-staging.yaml&lt;&#x2F;code&gt; file as chart values. To be able to use multiple environments we can list them under the &lt;code&gt;environments:&lt;&#x2F;code&gt; key at the beginning of the helmfile and then use the environment name as a variable in the release definition. The file would now look like this:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;yaml&quot; style=&quot;background-color:#282a36;color:#f8f8f2;&quot; class=&quot;language-yaml &quot;&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;environments&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;development&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;staging&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;production&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;releases&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;backend
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;chart&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;charts&#x2F;backend
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;values&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;charts&#x2F;backend&#x2F;values-{{ .Environment.Name }}.yaml
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;secrets&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;charts&#x2F;backend&#x2F;secrets-{{ .Environment.Name }}.yaml
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;When deploying the chart we now have to use the &lt;code&gt;--environment&#x2F;-e&lt;&#x2F;code&gt; option when executing the helmfile command:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#282a36;color:#f8f8f2;&quot;&gt;&lt;code&gt;&lt;span&gt;helmfile -e staging sync
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We can now easily create new environments by listing them under &lt;code&gt;environments&lt;&#x2F;code&gt; instead of duplicating our bash scripts.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;templates&quot;&gt;Templates&lt;&#x2F;h2&gt;
&lt;p&gt;After adding all of our helm charts into the helmfile the file content would look like this:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;yaml&quot; style=&quot;background-color:#282a36;color:#f8f8f2;&quot; class=&quot;language-yaml &quot;&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;environments&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;development&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;staging&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;production&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;releases&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;backend
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;chart&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;charts&#x2F;backend
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;values&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;charts&#x2F;backend&#x2F;values-{{ .Environment.Name }}.yaml
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;secrets&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;charts&#x2F;backend&#x2F;secrets-{{ .Environment.Name }}.yaml
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;frontend
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;chart&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;charts&#x2F;frontend
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;values&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;charts&#x2F;frontend&#x2F;values-{{ .Environment.Name }}.yaml
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;secrets&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;charts&#x2F;frontend&#x2F;secrets-{{ .Environment.Name }}.yaml
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;prometheus
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;chart&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;stable&#x2F;prometheus
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;version&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bd93f9;&quot;&gt;11.0.4
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;values&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;charts&#x2F;prometheus&#x2F;values-{{ .Environment.Name }}.yaml
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The same pattern (for values and secrets) is repeated for each release. While in the example above we only have 3 releases the pattern will continue for future additions and eventually lead to much duplicated code.&lt;&#x2F;p&gt;
&lt;p&gt;We can avoid copy&#x2F;pasting the release definitions by using Helmfile templates. A template is defined at the top of the file and then referenced in the release by using &lt;a href=&quot;https:&#x2F;&#x2F;confluence.atlassian.com&#x2F;bitbucket&#x2F;yaml-anchors-960154027.html&quot;&gt;YAML anchors&lt;&#x2F;a&gt;. This is our helmfile after using templates:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;yaml&quot; style=&quot;background-color:#282a36;color:#f8f8f2;&quot; class=&quot;language-yaml &quot;&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;environments&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;development&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;staging&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;production&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;templates&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;default&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;default
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;chart&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;charts&#x2F;{{`{{ .Release.Name }}`}}
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;missingFileHandler&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;Warn
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;values&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;charts&#x2F;{{`{{ .Release.Name }}`}}&#x2F;values-{{ .Environment.Name }}.yaml
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;secrets&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;charts&#x2F;{{`{{ .Release.Name }}`}}&#x2F;secrets-{{ .Environment.Name }}.yaml
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;releases&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;backend
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bd93f9;&quot;&gt;&amp;lt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;default
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;frontend
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bd93f9;&quot;&gt;&amp;lt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;default
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;prometheus
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bd93f9;&quot;&gt;&amp;lt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;default
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6272a4;&quot;&gt;# override the defaults since it&amp;#39;s a remote chart
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;chart&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;stable&#x2F;prometheus
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;version&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bd93f9;&quot;&gt;11.0.4
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We have removed much of the duplicated code from our helmfile and can now easily add new environments and releases.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;helm-defaults&quot;&gt;Helm Defaults&lt;&#x2F;h2&gt;
&lt;p&gt;We&#x27;ve previously used the the &lt;code&gt;--atomic&lt;&#x2F;code&gt; and &lt;code&gt;--cleanup-on-fail&lt;&#x2F;code&gt; options when deploying charts. To do the same when using Helmfile we just have to specify them under &lt;code&gt;helmDefaults&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;yaml&quot; style=&quot;background-color:#282a36;color:#f8f8f2;&quot; class=&quot;language-yaml &quot;&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;helmDefaults&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;atomic&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bd93f9;&quot;&gt;true
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;cleanupOnFail&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bd93f9;&quot;&gt;true
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;running-helmfile-commands&quot;&gt;Running Helmfile Commands&lt;&#x2F;h2&gt;
&lt;p&gt;Here are a few examples of helmfile commands for common operations.&lt;&#x2F;p&gt;
&lt;p&gt;To install or upgrade all charts in an environment (using staging as an example) we run:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#282a36;color:#f8f8f2;&quot;&gt;&lt;code&gt;&lt;span&gt;helmfile -e staging sync
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;If we just want to sync (meaning to install&#x2F;upgrade) a single chart we can use selectors. This command will sync the backend chart in the staging environment with our local values:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#282a36;color:#f8f8f2;&quot;&gt;&lt;code&gt;&lt;span&gt;helmfile -e staging -l name=backend sync
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;To show the changes an operation would perform on a cluster without actually applying them we can run the following command (requires the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;databus23&#x2F;helm-diff&quot;&gt;helm-diff&lt;&#x2F;a&gt; plugin):&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#282a36;color:#f8f8f2;&quot;&gt;&lt;code&gt;&lt;span&gt;helmfile -e staging -l name=prometheus diff
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;full-example-code&quot;&gt;Full Example Code&lt;&#x2F;h2&gt;
&lt;p&gt;This is the final content of our helmfile.yaml file:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;yaml&quot; style=&quot;background-color:#282a36;color:#f8f8f2;&quot; class=&quot;language-yaml &quot;&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;environments&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;development&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;staging&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;production&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;helmDefaults&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;atomic&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bd93f9;&quot;&gt;true
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;cleanupOnFail&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bd93f9;&quot;&gt;true
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;templates&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;default&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;default
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;chart&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;charts&#x2F;{{`{{ .Release.Name }}`}}
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;missingFileHandler&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;Warn
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;values&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;charts&#x2F;{{`{{ .Release.Name }}`}}&#x2F;values-{{ .Environment.Name }}.yaml
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;secrets&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;charts&#x2F;{{`{{ .Release.Name }}`}}&#x2F;secrets-{{ .Environment.Name }}.yaml
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;releases&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;backend
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bd93f9;&quot;&gt;&amp;lt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;default
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;frontend
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bd93f9;&quot;&gt;&amp;lt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;default
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;prometheus
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bd93f9;&quot;&gt;&amp;lt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;default
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;chart&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;stable&#x2F;prometheus
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;version&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bd93f9;&quot;&gt;11.0.4
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The directory structure did not change and is the same as described at the top of the post.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Setting up Vim for YAML editing</title>
        <published>2020-03-23T00:00:00+00:00</published>
        <updated>2020-03-23T00:00:00+00:00</updated>
        <author>
          <name>Arthur Koziel</name>
        </author>
        <link rel="alternate" href="https://www.arthurkoziel.com/setting-up-vim-for-yaml/" type="text/html"/>
        <id>https://www.arthurkoziel.com/setting-up-vim-for-yaml/</id>
        
        <content type="html">&lt;p&gt;In this blog post I&#x27;m going to show how to set up Vim for easier YAML editing.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;www.arthurkoziel.com&#x2F;setting-up-vim-for-yaml&#x2F;full-example.png&quot; alt=&quot;Screenshot of Vim&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;You can scroll down to the end for a summary of all installed plugins and config file changes.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;syntax-highlighting&quot;&gt;Syntax Highlighting&lt;&#x2F;h2&gt;
&lt;p&gt;There&#x27;s not much to do here. VIM has YAML syntax highlighting built-in and it&#x27;s great.&lt;&#x2F;p&gt;
&lt;p&gt;A few years back YAML highlighting in Vim was very slow, and there was often a noticeable lag when opening large files. The workaround was to use the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;stephpy&#x2F;vim-yaml&quot;&gt;vim-yaml&lt;&#x2F;a&gt; plugin for fast syntax highlighting.&lt;&#x2F;p&gt;
&lt;p&gt;I decided to make a performance benchmark. I loaded up a &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;istio&#x2F;istio&#x2F;blob&#x2F;master&#x2F;manifests&#x2F;base&#x2F;files&#x2F;gen-istio-cluster.yaml&quot;&gt;large YAML file&lt;&#x2F;a&gt; (6100 lines) and compared the time:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#282a36;color:#f8f8f2;&quot;&gt;&lt;code&gt;&lt;span&gt;# default syntax highlighting
&lt;&#x2F;span&gt;&lt;span&gt;$ vim gen-istio-cluster.yaml --startuptime default.log
&lt;&#x2F;span&gt;&lt;span&gt;$ tail -1 default.log
&lt;&#x2F;span&gt;&lt;span&gt;055.563
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;# vim-yaml plugin
&lt;&#x2F;span&gt;&lt;span&gt;$ vim gen-istio-cluster.yaml --startuptime vimyaml.log
&lt;&#x2F;span&gt;&lt;span&gt;$ tail -1 vimyaml.log
&lt;&#x2F;span&gt;&lt;span&gt;060.320
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;As we can see the default syntax highlighting is just as fast as the plugin and there&#x27;s no need to install a separate plugin to fix the slow syntax highlighting anymore.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;indentation&quot;&gt;Indentation&lt;&#x2F;h2&gt;
&lt;p&gt;Indentation probably the most annoying part about editing YAML files. Large documents with deeply nested blocks are often hard to track and errors are easily made.&lt;&#x2F;p&gt;
&lt;p&gt;YAML documents are required to have a 2 space indentation. However, Vim does not set this by default but it&#x27;s an easy fix by putting the following line in the vim config:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;vim&quot; style=&quot;background-color:#282a36;color:#f8f8f2;&quot; class=&quot;language-vim &quot;&gt;&lt;code class=&quot;language-vim&quot; data-lang=&quot;vim&quot;&gt;&lt;span style=&quot;color:#8be9fd;&quot;&gt;autocmd &lt;&#x2F;span&gt;&lt;span&gt;FileType yaml &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8be9fd;&quot;&gt;setlocal&lt;&#x2F;span&gt;&lt;span&gt; ts=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bd93f9;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt; sts=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bd93f9;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt; sw=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bd93f9;&quot;&gt;2 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8be9fd;&quot;&gt;expandtab
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We can also setup Indentation guides. Indentation guides are thin vertical lines at each indentation level and useful to help line up nested YAML blocks.&lt;&#x2F;p&gt;
&lt;p&gt;We can display those lines by using the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;Yggdroot&#x2F;indentLine&quot;&gt;indentLine plugin&lt;&#x2F;a&gt;. I&#x27;ve modified the indentation character to display a thinner line (default is &amp;quot;¦&amp;quot;):&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;vim&quot; style=&quot;background-color:#282a36;color:#f8f8f2;&quot; class=&quot;language-vim &quot;&gt;&lt;code class=&quot;language-vim&quot; data-lang=&quot;vim&quot;&gt;&lt;span style=&quot;color:#8be9fd;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;g:indentLine_char&lt;&#x2F;span&gt;&lt;span&gt; = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;#39;⦙&amp;#39;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The result should look like this:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;www.arthurkoziel.com&#x2F;setting-up-vim-for-yaml&#x2F;indentlines.png&quot; alt=&quot;Screenshot of Vim showing the indentLine plugin&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;folding&quot;&gt;Folding&lt;&#x2F;h2&gt;
&lt;p&gt;With folding we can hide parts of the file that are not relevant to our current task.&lt;&#x2F;p&gt;
&lt;p&gt;Vim has built-in support for folding based on the indentation level but the default folding rules make it hard to tell what is folded. This is because the folding starts on the line &lt;em&gt;following&lt;&#x2F;em&gt; the start of a block. To change this we can install the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;pedrohdz&#x2F;vim-yaml-folds&quot;&gt;vim-yaml-folds&lt;&#x2F;a&gt; plugin.&lt;&#x2F;p&gt;
&lt;p&gt;Here&#x27;s a side-by-side comparison of the default folding (left) compared to vim-yaml-folds (right):&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;www.arthurkoziel.com&#x2F;setting-up-vim-for-yaml&#x2F;folding-compare.png&quot; alt=&quot;comparison of default folding with vim-yaml-folds&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;To work with folding we need to remember a few keyboard commands. Vimcasts has a great episode on this &lt;a href=&quot;http:&#x2F;&#x2F;vimcasts.org&#x2F;episodes&#x2F;how-to-fold&#x2F;&quot;&gt;here&lt;&#x2F;a&gt;. Most of the time I use the following commands:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;za: Toggle current fold&lt;&#x2F;li&gt;
&lt;li&gt;zR: Expand all folds&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;After the plugin is installed and folding is enabled the default settings will fold all blocks by default. To start with unfolded content we can set:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;vim&quot; style=&quot;background-color:#282a36;color:#f8f8f2;&quot; class=&quot;language-vim &quot;&gt;&lt;code class=&quot;language-vim&quot; data-lang=&quot;vim&quot;&gt;&lt;span style=&quot;color:#8be9fd;&quot;&gt;set&lt;&#x2F;span&gt;&lt;span&gt; foldlevelstart=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bd93f9;&quot;&gt;20
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;There&#x27;s also a plugin called &lt;a href=&quot;https:&#x2F;&#x2F;www.vim.org&#x2F;scripts&#x2F;script.php?script_id=4021&quot;&gt;restore_view&lt;&#x2F;a&gt; which will save the folds for each file. But be aware that this plugin will create an extra file with folding information for each opened document.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;linting&quot;&gt;Linting&lt;&#x2F;h2&gt;
&lt;p&gt;Linting will analyze the code and show any potential errors while we&#x27;re writing it which helps us catch formatting or syntax errors early on.&lt;&#x2F;p&gt;
&lt;p&gt;To do this in Vim we can use &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;dense-analysis&#x2F;ale&quot;&gt;ALE&lt;&#x2F;a&gt;, an asynchronous linting framework that has support for many languages and tools including YAML. To enable YAML linting in ALE we have to install &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;adrienverge&#x2F;yamllint&quot;&gt;yamllint&lt;&#x2F;a&gt;, a Python-based YAML linter.&lt;&#x2F;p&gt;
&lt;p&gt;Installation instructions are &lt;a href=&quot;https:&#x2F;&#x2F;yamllint.readthedocs.io&#x2F;en&#x2F;stable&#x2F;quickstart.html#installing-yamllint&quot;&gt;here&lt;&#x2F;a&gt;. On macOS we can install it with Homebrew:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#282a36;color:#f8f8f2;&quot;&gt;&lt;code&gt;&lt;span&gt;$ brew install yamllint
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The default configuration is fairly strict and shows errors in document style such as line length, trailing spaces or comment indentation.&lt;&#x2F;p&gt;
&lt;p&gt;We can modify the configuration to be less strict. Yamllint already comes with a &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;adrienverge&#x2F;yamllint&#x2F;blob&#x2F;master&#x2F;yamllint&#x2F;conf&#x2F;relaxed.yaml&quot;&gt;relaxed&lt;&#x2F;a&gt; version of the default config that is a good starting point. The only additional thing I&#x27;ve decided to disable is line length checking.&lt;&#x2F;p&gt;
&lt;p&gt;To do this we open up &lt;code&gt;~&#x2F;.config&#x2F;yamllint&#x2F;config&lt;&#x2F;code&gt; and paste the following:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;yaml&quot; style=&quot;background-color:#282a36;color:#f8f8f2;&quot; class=&quot;language-yaml &quot;&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;extends&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;relaxed
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;rules&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;line-length&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;disable
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;I&#x27;ve modified the ALE configuration to change the message format, error symbols and only lint when the file is saved:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;vim&quot; style=&quot;background-color:#282a36;color:#f8f8f2;&quot; class=&quot;language-vim &quot;&gt;&lt;code class=&quot;language-vim&quot; data-lang=&quot;vim&quot;&gt;&lt;span style=&quot;color:#8be9fd;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;g:ale_echo_msg_format&lt;&#x2F;span&gt;&lt;span&gt; = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;#39;[%linter%] %s [%severity%]&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8be9fd;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;g:ale_sign_error&lt;&#x2F;span&gt;&lt;span&gt; = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;#39;✘&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8be9fd;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;g:ale_sign_warning&lt;&#x2F;span&gt;&lt;span&gt; = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;#39;⚠&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8be9fd;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;g:ale_lint_on_text_changed&lt;&#x2F;span&gt;&lt;span&gt; = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;#39;never&amp;#39;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We can see the errors and warnings on the left side:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;www.arthurkoziel.com&#x2F;setting-up-vim-for-yaml&#x2F;full-example.png&quot; alt=&quot;Screenshot of Vim&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;summary&quot;&gt;Summary&lt;&#x2F;h2&gt;
&lt;p&gt;Here&#x27;s a summary of the plugins, applications and config modifications:&lt;&#x2F;p&gt;
&lt;h3 id=&quot;vim-plugins&quot;&gt;Vim Plugins&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;Yggdroot&#x2F;indentLine&quot;&gt;indentLine&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;pedrohdz&#x2F;vim-yaml-folds&quot;&gt;vim-yaml-folds&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;dense-analysis&#x2F;ale&quot;&gt;ALE&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;applications&quot;&gt;Applications&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;adrienverge&#x2F;yamllint&quot;&gt;yamllint&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;config&quot;&gt;Config&lt;&#x2F;h3&gt;
&lt;p&gt;In &lt;code&gt;~&#x2F;.vimrc&lt;&#x2F;code&gt; or &lt;code&gt;~&#x2F;.config&#x2F;nvim&#x2F;init.vim&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;vim&quot; style=&quot;background-color:#282a36;color:#f8f8f2;&quot; class=&quot;language-vim &quot;&gt;&lt;code class=&quot;language-vim&quot; data-lang=&quot;vim&quot;&gt;&lt;span style=&quot;color:#8be9fd;&quot;&gt;autocmd &lt;&#x2F;span&gt;&lt;span&gt;FileType yaml &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8be9fd;&quot;&gt;setlocal&lt;&#x2F;span&gt;&lt;span&gt; ts=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bd93f9;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt; sts=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bd93f9;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt; sw=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bd93f9;&quot;&gt;2 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8be9fd;&quot;&gt;expandtab
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8be9fd;&quot;&gt;set&lt;&#x2F;span&gt;&lt;span&gt; foldlevelstart=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bd93f9;&quot;&gt;20
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8be9fd;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;g:ale_echo_msg_format&lt;&#x2F;span&gt;&lt;span&gt; = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;#39;[%linter%] %s [%severity%]&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8be9fd;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;g:ale_sign_error&lt;&#x2F;span&gt;&lt;span&gt; = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;#39;✘&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8be9fd;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;g:ale_sign_warning&lt;&#x2F;span&gt;&lt;span&gt; = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;#39;⚠&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8be9fd;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;g:ale_lint_on_text_changed&lt;&#x2F;span&gt;&lt;span&gt; = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;#39;never&amp;#39;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;In &lt;code&gt;~&#x2F;.config&#x2F;yamllint&#x2F;config&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;yaml&quot; style=&quot;background-color:#282a36;color:#f8f8f2;&quot; class=&quot;language-yaml &quot;&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;extends&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;relaxed
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;rules&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;line-length&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;disable
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Private Helm Repo with GCS and GitHub Actions</title>
        <published>2020-03-08T00:00:00+00:00</published>
        <updated>2020-03-08T00:00:00+00:00</updated>
        <author>
          <name>Arthur Koziel</name>
        </author>
        <link rel="alternate" href="https://www.arthurkoziel.com/private-helm-repo-with-gcs-and-github-actions/" type="text/html"/>
        <id>https://www.arthurkoziel.com/private-helm-repo-with-gcs-and-github-actions/</id>
        
        <content type="html">&lt;p&gt;In this blog post I&#x27;m going to show how to setup a private Helm chart repository on Google Cloud Storage (GCS) and use GitHub Actions to automatically push charts on new commits.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;setting-up-the-gcs-bucket&quot;&gt;Setting up the GCS Bucket&lt;&#x2F;h2&gt;
&lt;p&gt;The first step is to create a GCS bucket that will hold our charts. We can do this over the CLI with the gcloud-sdk or over the Web UI. I&#x27;m going to use the CLI for the following examples.&lt;&#x2F;p&gt;
&lt;p&gt;To make it easier to handle access permissions we use the &lt;code&gt;-b on&lt;&#x2F;code&gt; flag to enable uniform bucket-level access. It let&#x27;s us manage permissions on a bucket-level rather than on an object-level:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#282a36;color:#f8f8f2;&quot;&gt;&lt;code&gt;&lt;span&gt;$ gsutil mb -b on gs:&#x2F;&#x2F;my-chart-repo-arthurk
&lt;&#x2F;span&gt;&lt;span&gt;Creating gs:&#x2F;&#x2F;my-chart-repo-arthurk&#x2F;...
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;For Helm to be able to push charts to this bucket we need a Cloud IAM service account (with key) with &lt;em&gt;Storage Object Admin&lt;&#x2F;em&gt; permissions:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#282a36;color:#f8f8f2;&quot;&gt;&lt;code&gt;&lt;span&gt;$ gcloud iam service-accounts create my-chart-repo-svc-acc
&lt;&#x2F;span&gt;&lt;span&gt;Created service account [my-chart-repo-svc-acc].
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;$ gcloud iam service-accounts keys create service-account.json --iam-account=my-chart-repo-svc-acc@PROJECT.iam.gserviceaccount.com
&lt;&#x2F;span&gt;&lt;span&gt;created key [123123123] of type [json] as [service-account.json] for [my-chart-repo-svc-acc@PROJECT.iam.gserviceaccount.com]
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;$ gsutil iam ch serviceAccount:my-chart-repo-svc-acc@PROJECT.iam.gserviceaccount.com:roles&#x2F;storage.objectAdmin gs:&#x2F;&#x2F;my-chart-repo-arthurk
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;When referring to the service account we have to use the email (not the name) which has the format &lt;code&gt;SERVICE_ACCOUNT_NAME@PROJECT_ID.iam.gserviceaccount.com&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;setting-up-github-actions&quot;&gt;Setting up GitHub Actions&lt;&#x2F;h2&gt;
&lt;p&gt;In this step we&#x27;re going to setup GitHub Actions to detect charts that have changed and add them to our helm repo.&lt;&#x2F;p&gt;
&lt;p&gt;We start by creating the &lt;code&gt;.github&#x2F;workflows&#x2F;helm-ci.yml&lt;&#x2F;code&gt; file and add:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;yaml&quot; style=&quot;background-color:#282a36;color:#f8f8f2;&quot; class=&quot;language-yaml &quot;&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;Helm Charts
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bd93f9;&quot;&gt;on&lt;&#x2F;span&gt;&lt;span&gt;: [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;push&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;jobs&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;release&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;Release
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;runs-on&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;ubuntu-latest
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;steps&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;      - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;Checkout
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;uses&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;actions&#x2F;checkout@v2
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;with&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;fetch-depth&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bd93f9;&quot;&gt;2
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;By default the checkout action will clone the repo with a detached HEAD. To later compare files that have changed between the current HEAD and the previous commit we have to pass &lt;code&gt;fetch-depth: 2&lt;&#x2F;code&gt; to the action.&lt;&#x2F;p&gt;
&lt;p&gt;After pushing the code we can open GitHub Actions in the browser and check the workflow. It should look like this:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;www.arthurkoziel.com&#x2F;private-helm-repo-with-gcs-and-github-actions&#x2F;gh-actions-1.png&quot; alt=&quot;GitHub Actions checkout step finished successfully&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;installing-helm-and-helm-gcs&quot;&gt;Installing Helm and helm-gcs&lt;&#x2F;h2&gt;
&lt;p&gt;The next step in the CI pipeline is to install Helm and the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;hayorov&#x2F;helm-gcs&quot;&gt;helm-gcs plugin&lt;&#x2F;a&gt;. We add the following step to our workflow:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;yaml&quot; style=&quot;background-color:#282a36;color:#f8f8f2;&quot; class=&quot;language-yaml &quot;&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span&gt;- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;Install helm and plugins
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;run&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;.&#x2F;scripts&#x2F;install.sh
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;and then create the &lt;code&gt;scripts&#x2F;install.sh&lt;&#x2F;code&gt; file with the following content:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#282a36;color:#f8f8f2;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#6272a4;&quot;&gt;#!&#x2F;usr&#x2F;bin&#x2F;env bash
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8be9fd;&quot;&gt;set &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#ffb86c;&quot;&gt;-o&lt;&#x2F;span&gt;&lt;span&gt; errexit
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;HELM_VERSION&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;3.1.1
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;HELM_GCS_VERSION&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;0.3.1
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8be9fd;&quot;&gt;echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;Installing Helm...&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50fa7b;&quot;&gt;wget&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#ffb86c;&quot;&gt; -q&lt;&#x2F;span&gt;&lt;span&gt; https:&#x2F;&#x2F;get.helm.sh&#x2F;helm-v${&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;HELM_VERSION&lt;&#x2F;span&gt;&lt;span&gt;}-linux-amd64.tar.gz
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50fa7b;&quot;&gt;tar&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#ffb86c;&quot;&gt; -zxf&lt;&#x2F;span&gt;&lt;span&gt; helm-v${&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;HELM_VERSION&lt;&#x2F;span&gt;&lt;span&gt;}-linux-amd64.tar.gz
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50fa7b;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span&gt; mv linux-amd64&#x2F;helm &#x2F;usr&#x2F;local&#x2F;bin&#x2F;helm
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50fa7b;&quot;&gt;helm&lt;&#x2F;span&gt;&lt;span&gt; version
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8be9fd;&quot;&gt;echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;Installing helm-gcs plugin...&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50fa7b;&quot;&gt;helm&lt;&#x2F;span&gt;&lt;span&gt; plugin install https:&#x2F;&#x2F;github.com&#x2F;hayorov&#x2F;helm-gcs&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#ffb86c;&quot;&gt; --version &lt;&#x2F;span&gt;&lt;span&gt;${&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;HELM_GCS_VERSION&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Set &lt;code&gt;chmod u+x scripts&#x2F;install.sh&lt;&#x2F;code&gt; and push the file. We can check GitHub Actions to make sure everything installed correctly:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;www.arthurkoziel.com&#x2F;private-helm-repo-with-gcs-and-github-actions&#x2F;gh-actions-2.png&quot; alt=&quot;GitHub Actions showing that helm and helm-gcs have been installed successfully&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;This shows us that Helm 3.1.1 and helm-gcs 0.3.0 have been successfully installed&lt;&#x2F;p&gt;
&lt;h2 id=&quot;initializing-the-helm-repository&quot;&gt;Initializing the helm repository&lt;&#x2F;h2&gt;
&lt;p&gt;We can now initialize the helm repository. For this to work we need to add our previously created service account key to GitHub. To do this we navigate to the repository and click on &lt;strong&gt;&amp;quot;Settings&amp;quot; → &amp;quot;Secrets&amp;quot; → &amp;quot;Add a new secret&amp;quot;&lt;&#x2F;strong&gt;. There we set the name to be &lt;code&gt;GCLOUD_SERVICE_ACCOUNT_KEY&lt;&#x2F;code&gt; and as a value add the content of the service-account.json file. After saving the secret it should look like this:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;www.arthurkoziel.com&#x2F;private-helm-repo-with-gcs-and-github-actions&#x2F;gh-actions-3.png&quot; alt=&quot;GitHub showing that a secret has been added to the project&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;We can now modify the workflow to pass the secret as an environment variable to our next shell script:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;yaml&quot; style=&quot;background-color:#282a36;color:#f8f8f2;&quot; class=&quot;language-yaml &quot;&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span&gt;- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;Release charts
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;run&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;.&#x2F;scripts&#x2F;release.sh
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;env&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;GCLOUD_SERVICE_ACCOUNT_KEY&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;${{ secrets.GCLOUD_SERVICE_ACCOUNT_KEY }}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;In the release.sh script we save the service account to a file and point the &lt;code&gt;GOOGLE_APPLICATION_CREDENTIALS&lt;&#x2F;code&gt; environment variable to it. This is needed for helm-gcs plugin to authenticate. Afterwards we initialize the GCS repo which will create an empty &lt;code&gt;index.yaml&lt;&#x2F;code&gt; file in the GCS bucket. Finally we can add the repo to helm so it can access its packages.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#282a36;color:#f8f8f2;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#6272a4;&quot;&gt;#!&#x2F;usr&#x2F;bin&#x2F;env bash
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8be9fd;&quot;&gt;set &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#ffb86c;&quot;&gt;-o&lt;&#x2F;span&gt;&lt;span&gt; errexit
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8be9fd;&quot;&gt;set &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#ffb86c;&quot;&gt;-o&lt;&#x2F;span&gt;&lt;span&gt; nounset
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8be9fd;&quot;&gt;set &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#ffb86c;&quot;&gt;-o&lt;&#x2F;span&gt;&lt;span&gt; pipefail
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;GCS_BUCKET_NAME&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;gs:&#x2F;&#x2F;my-chart-repo-arthurk&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6272a4;&quot;&gt;# setup service account for helm-gcs plugin
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8be9fd;&quot;&gt;echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;${&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;GCLOUD_SERVICE_ACCOUNT_KEY&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;}&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; svc-acc.json
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;export &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;GOOGLE_APPLICATION_CREDENTIALS&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;svc-acc.json
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6272a4;&quot;&gt;# initializing helm repo
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6272a4;&quot;&gt;# (only needed on first run but will do nothing if already exists)&amp;lt;&#x2F;span&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8be9fd;&quot;&gt;echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;Initializing helm repo&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50fa7b;&quot;&gt;helm&lt;&#x2F;span&gt;&lt;span&gt; gcs init ${&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;GCS_BUCKET_NAME&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6272a4;&quot;&gt;# add gcs bucket as helm repo
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8be9fd;&quot;&gt;echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;Adding gcs bucket repo ${&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;GCS_BUCKET_NAME&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;}&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50fa7b;&quot;&gt;helm&lt;&#x2F;span&gt;&lt;span&gt; repo add private ${&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;GCS_BUCKET_NAME&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Before committing the file make sure to mark it as executable with &lt;code&gt;chmod u+x scripts&#x2F;release.sh&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;packaging-and-pushing-changed-charts&quot;&gt;Packaging and Pushing changed Charts&lt;&#x2F;h2&gt;
&lt;p&gt;In the final step of our CI script we need to identify which charts have changed and then package and push them to the helm repo. We do this by running &lt;code&gt;git diff&lt;&#x2F;code&gt; on the previous revision with the following arguments:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;--find-renames&lt;&#x2F;code&gt; detect if a file has been renamed&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;--diff-filter=d&lt;&#x2F;code&gt; will ignore deleted files (we can&#x27;t package&#x2F;push a deleted chart)&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;--name-only&lt;&#x2F;code&gt; only print the name of the changed file&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;cut -d &#x27;&#x2F;&#x27; -f 2 | uniq&lt;&#x2F;code&gt; we only need unique directory names of files that have changed&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;We add the following content to the release.sh file:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#282a36;color:#f8f8f2;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;prev_rev&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;$(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50fa7b;&quot;&gt;git&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt; rev-parse HEAD^)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8be9fd;&quot;&gt;echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;Identifying changed charts since git rev ${&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;prev_rev&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;}&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;changed_charts&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8be9fd;&quot;&gt;readarray &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#ffb86c;&quot;&gt;-t&lt;&#x2F;span&gt;&lt;span&gt; changed_charts &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;&amp;lt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;$(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50fa7b;&quot;&gt;git&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt; diff&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#ffb86c;&quot;&gt; --find-renames --diff-filter&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;d&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#ffb86c;&quot;&gt; --name-only &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;prev_rev&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt; --&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt; charts &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50fa7b;&quot;&gt;cut&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#ffb86c;&quot;&gt; -d &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;#39;&#x2F;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#ffb86c;&quot;&gt; -f&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt; 2 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50fa7b;&quot;&gt;uniq&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;)&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8be9fd;&quot;&gt;[[ &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#ffb86c;&quot;&gt;-n &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;${&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;changed_charts[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bd93f9;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;}&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8be9fd;&quot;&gt;]]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;; then
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt; chart &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;${&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;changed_charts[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bd93f9;&quot;&gt;@&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;}&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;; do
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8be9fd;&quot;&gt;echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;Packaging chart &amp;#39;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;chart&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;#39;...&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;chart_file&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;$(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50fa7b;&quot;&gt;helm&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt; package &amp;quot;charts&#x2F;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;chart&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50fa7b;&quot;&gt;awk &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;#39;{print $NF}&amp;#39;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8be9fd;&quot;&gt;echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;Pushing $&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;chart_file&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;...&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50fa7b;&quot;&gt;helm&lt;&#x2F;span&gt;&lt;span&gt; gcs push &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;chart_file&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt; private
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;done
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;else
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8be9fd;&quot;&gt;echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;No chart changes detected&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;fi
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Commit and push the changes. After the CI run has finished, the GCS bucket will be initialized and have an &lt;code&gt;index.yaml&lt;&#x2F;code&gt; file in it. This file is an index of all the helm charts in the repo. As we currently have no charts indexed it has the following content:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#282a36;color:#f8f8f2;&quot;&gt;&lt;code&gt;&lt;span&gt;$ gsutil cat gs:&#x2F;&#x2F;my-chart-repo-arthurk&#x2F;index.yaml
&lt;&#x2F;span&gt;&lt;span&gt;apiVersion: v1
&lt;&#x2F;span&gt;&lt;span&gt;entries: {}
&lt;&#x2F;span&gt;&lt;span&gt;generated: &amp;quot;2020-03-08T06:51:49.496564824Z&amp;quot;&amp;lt;&#x2F;span&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;releasing-our-first-chart&quot;&gt;Releasing our first chart&lt;&#x2F;h2&gt;
&lt;p&gt;We can now create and add the first chart to our helm repository. We do this by creating a &lt;em&gt;chart&#x2F;&lt;&#x2F;em&gt; directory and running &lt;code&gt;helm create&lt;&#x2F;code&gt; to create an example chart:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#282a36;color:#f8f8f2;&quot;&gt;&lt;code&gt;&lt;span&gt;$ mkdir charts
&lt;&#x2F;span&gt;&lt;span&gt;$ helm create charts&#x2F;foo
&lt;&#x2F;span&gt;&lt;span&gt;Creating charts&#x2F;foo&amp;lt;&#x2F;span&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Add, commit and push all new files, then check GitHub Actions. It will show us that the chart was successfully packaged and pushed to the repo:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;www.arthurkoziel.com&#x2F;private-helm-repo-with-gcs-and-github-actions&#x2F;gh-actions-4.png&quot; alt=&quot;GitHub Actions showing that the chart has been successfully added to the repo&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Note that it&#x27;s not possible to push the same chart version to the same repo. The push will fail. We need to always make sure to increase the &lt;code&gt;version&lt;&#x2F;code&gt; value in the &lt;code&gt;Chart.yaml&lt;&#x2F;code&gt; file when releasing a new chart.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;trying-it-out&quot;&gt;Trying it out&lt;&#x2F;h2&gt;
&lt;p&gt;To try out our private helm repo we can add it to helm on our client machine and list the repo contents:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#282a36;color:#f8f8f2;&quot;&gt;&lt;code&gt;&lt;span&gt;$ helm plugin install https:&#x2F;&#x2F;github.com&#x2F;hayorov&#x2F;helm-gcs
&lt;&#x2F;span&gt;&lt;span&gt;$ gcloud auth application-default login
&lt;&#x2F;span&gt;&lt;span&gt;$ helm repo add private-repo gs:&#x2F;&#x2F;my-chart-repo-arthurk
&lt;&#x2F;span&gt;&lt;span&gt;$ helm repo update
&lt;&#x2F;span&gt;&lt;span&gt;$ helm search repo private-repo -l
&lt;&#x2F;span&gt;&lt;span&gt;NAME            	CHART VERSION	APP VERSION	DESCRIPTION
&lt;&#x2F;span&gt;&lt;span&gt;private-repo&#x2F;foo	0.1.0        	1.16.0     	A Helm chart for Kubernetes&amp;lt;&#x2F;span&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;As you can see the chart was successfully added to the registry. It can now be used as any other chart, for example by installing it with &lt;code&gt;helm install private-repo&#x2F;foo --version 0.1.0&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;The source code for all examples is available &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;arthurk&#x2F;private-gcs-helm&quot;&gt;in this GitHub repo&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Writing Reusable Helm Charts</title>
        <published>2020-03-01T00:00:00+00:00</published>
        <updated>2020-03-01T00:00:00+00:00</updated>
        <author>
          <name>Arthur Koziel</name>
        </author>
        <link rel="alternate" href="https://www.arthurkoziel.com/writing-reusable-helm-charts/" type="text/html"/>
        <id>https://www.arthurkoziel.com/writing-reusable-helm-charts/</id>
        
        <content type="html">&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;helm.sh&#x2F;&quot;&gt;Helm charts&lt;&#x2F;a&gt; make it possible to easily package &lt;a href=&quot;https:&#x2F;&#x2F;kubernetes.io&#x2F;&quot;&gt;Kubernetes&lt;&#x2F;a&gt; manifests, version them and share them with other developers. To use a Helm chart across projects with different requirements it needs to be &lt;em&gt;reusable&lt;&#x2F;em&gt;, meaning that common parts of the Kubernetes manifests can be changed in a values file without having to re-write the templates.&lt;&#x2F;p&gt;
&lt;p&gt;Let&#x27;s say we are looking into deploying Prometheus via Helm into our Kubernetes cluster. We search around and find a chart that is stable, well documented and actively maintained. It looks like a good choice. But there are a few options that you need to change in order to fit our requirements. Normally this could be done by creating a &lt;code&gt;values.yaml&lt;&#x2F;code&gt; file and overriding the default settings. However, the chart that is available is not reusable enough and the options that we need to change are not available.&lt;&#x2F;p&gt;
&lt;p&gt;In such a case the only option for us is to copy the whole chart and modify it to fit the requirements even if the modification is only 1 or 2 lines of code. After copying the chart we also have to maintain it and keep it up to date with the upstream branch. It would&#x27;ve saved us a lot of time and work if the chart added a few options to make it reusable for projects that have different requirements.&lt;&#x2F;p&gt;
&lt;p&gt;In the next sections I&#x27;m going to go over the templates from the default Helm chart template (that is created when running &lt;code&gt;helm create&lt;&#x2F;code&gt;) and explain what makes them reusable (and what can be improved).&lt;&#x2F;p&gt;
&lt;h2 id=&quot;ingress&quot;&gt;Ingress&lt;&#x2F;h2&gt;
&lt;p&gt;An Ingress allows external users to access Kubernetes Services. It provides a reverse-proxy, configurable traffic routing and TLS termination. There are several Ingress controllers available such as &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;kubernetes&#x2F;ingress-nginx&quot;&gt;nginx&lt;&#x2F;a&gt;, &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;kubernetes&#x2F;ingress-gce&quot;&gt;GCE&lt;&#x2F;a&gt;, &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;containous&#x2F;traefik&quot;&gt;Traefik&lt;&#x2F;a&gt;, &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;haproxytech&#x2F;kubernetes-ingress&#x2F;&quot;&gt;HAProxy&lt;&#x2F;a&gt;, &lt;a href=&quot;https:&#x2F;&#x2F;kubernetes.io&#x2F;docs&#x2F;concepts&#x2F;services-networking&#x2F;ingress-controllers&#x2F;&quot;&gt;and more&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;For a reusable Ingress template we need to consider the following requirements:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Using the Ingress should be optional. Not every developer wants to expose their service to external users&lt;&#x2F;li&gt;
&lt;li&gt;It should be possible to choose an ingress controller such as nginx or GCE&lt;&#x2F;li&gt;
&lt;li&gt;Traffic routing should be configurable&lt;&#x2F;li&gt;
&lt;li&gt;TLS should be optional&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;The &lt;a href=&quot;https:&#x2F;&#x2F;gist.github.com&#x2F;arthurk&#x2F;d872e92fabfca4f2e6af84662da10106&quot;&gt;default Ingress template&lt;&#x2F;a&gt; meets all of our requirements and is a great example of a reusable template. The custom annotations are a very important part. A typical usage example of would look like this:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;yaml&quot; style=&quot;background-color:#282a36;color:#f8f8f2;&quot; class=&quot;language-yaml &quot;&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;ingress&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;enabled&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bd93f9;&quot;&gt;true
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;annotations&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;kubernetes.io&#x2F;ingress.class&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;nginx
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;nginx.ingress.kubernetes.io&#x2F;server-snippet&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;|
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;      add_header X-Frame-Options &amp;quot;DENY&amp;quot;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;      proxy_set_header X-Frame-Options &amp;quot;DENY&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;certmanager.k8s.io&#x2F;cluster-issuer&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;letsencrypt
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;certmanager.k8s.io&#x2F;acme-challenge-type&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;dns01
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;certmanager.k8s.io&#x2F;acme-dns01-provider&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;cloudflare
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We have the ingress enabled and use nginx as a controller. We specify a custom &lt;code&gt;server-snippet&lt;&#x2F;code&gt; (used by the nginx-ingress to inject custom code into the server config) that adds a custom header (&lt;code&gt;X-Frame-Options&lt;&#x2F;code&gt;). We use annotations to signal &lt;a href=&quot;https:&#x2F;&#x2F;www.arthurkoziel.com&#x2F;writing-reusable-helm-charts&#x2F;cert-manager.readthedocs.io&#x2F;&quot;&gt;cert-manager&lt;&#x2F;a&gt; to provision a SSL certificate for this host.&lt;&#x2F;p&gt;
&lt;p&gt;Other ingress controllers such as &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;kubernetes&#x2F;ingress-gce&quot;&gt;GCE&lt;&#x2F;a&gt; also make use of annotations to integrate with Google Cloud services. In this example we assign an external static IP and provision an SSL certificate (with &lt;a href=&quot;http:&#x2F;&#x2F;github.com&#x2F;GoogleCloudPlatform&#x2F;gke-managed-certs&quot;&gt;gke-managed-certs&lt;&#x2F;a&gt;):&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;yaml&quot; style=&quot;background-color:#282a36;color:#f8f8f2;&quot; class=&quot;language-yaml &quot;&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;ingress&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;enabled&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bd93f9;&quot;&gt;true
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;annotations&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;kubernetes.io&#x2F;ingress.class&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;gce
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;kubernetes.io&#x2F;ingress.global-static-ip-name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;my-external-ip
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;kubernetes.io&#x2F;ingress.allow-http&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;#39;false&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;networking.gke.io&#x2F;managed-certificates&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;example-certificate
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;hosts&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;host&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;example.org
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;paths&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;        - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;&#x2F;*&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;tls&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;hosts&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;        - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;example.org
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;secretName&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;example-org-tls&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;service&quot;&gt;Service&lt;&#x2F;h2&gt;
&lt;p&gt;A Service is an abstraction for a grouping of pods. It selects pods based on labels and allows network access to them. There are several Service types that Kubernetes supports such as ClusterIP, LoadBalancer or NodePort.&lt;&#x2F;p&gt;
&lt;p&gt;The requirements for a Service template in a reusable Helm chart are:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;It should be possible to pick a Service type. Not everyone wants to run an application behind a Load Balancer&lt;&#x2F;li&gt;
&lt;li&gt;It should be possible to add annotations&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;These are fairly simple requirements and the &lt;a href=&quot;https:&#x2F;&#x2F;gist.github.com&#x2F;arthurk&#x2F;e7bec72e9e7f4ea8785656f582846421&quot;&gt;default Service template&lt;&#x2F;a&gt; meets all of them. A usage example looks like this:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;yaml&quot; style=&quot;background-color:#282a36;color:#f8f8f2;&quot; class=&quot;language-yaml &quot;&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;service&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;type&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;ClusterIP
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;port&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bd93f9;&quot;&gt;80
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;annotations&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;prometheus.io&#x2F;scrape&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;true&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;prometheus.io&#x2F;port&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;4000&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The service has a &lt;code&gt;ClusterIP&lt;&#x2F;code&gt; Service type. In environments where higher availability is required this could be changed to a &lt;code&gt;LoadBalancer&lt;&#x2F;code&gt;. The annotations are used by the Prometheus Helm chart: The prometheus server looks for all services in a cluster that have the &lt;code&gt;prometheus.io&#x2F;scrape: &amp;quot;true&amp;quot;&lt;&#x2F;code&gt; annotation and automatically scrapes them every minute.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;deployment&quot;&gt;Deployment&lt;&#x2F;h2&gt;
&lt;p&gt;A Deployment is an abstraction for pods. It runs multiple replicas of an application and keeps them in the desired state. If an application fails or becomes unresponsive it will be replaced automatically.&lt;&#x2F;p&gt;
&lt;p&gt;In a reusable Deployment template we should be able to:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Set the number of replicas&lt;&#x2F;strong&gt;: Depending on the environment we should be able to adjust this value. A test environment doesn&#x27;t need to run as many replicas as a production environment.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Add Pod annotations&lt;&#x2F;strong&gt;: Applications such as &lt;a href=&quot;https:&#x2F;&#x2F;linkerd.io&#x2F;&quot;&gt;Linkerd&lt;&#x2F;a&gt; use annotations to identify Pods into which to inject a sidecar container (&lt;code&gt;linkerd.io&#x2F;inject: enabled&lt;&#x2F;code&gt;)&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Pull the Docker image from a custom (private) registry&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Modify arguments and environment variables&lt;&#x2F;strong&gt;: As an example we should be able to pass &lt;code&gt;--log.level=debug&lt;&#x2F;code&gt; to a container to see debug logs in case we have to identify problems with our application. Environment variables such as &lt;code&gt;MIX_ENV=prod&lt;&#x2F;code&gt; often tell the application in which environment it is running and which configuration it should load&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Add custom ConfigMaps and Secrets&lt;&#x2F;strong&gt;: It should be possible to load application-specific configuration files or secrets that were added externally (for example SSL certificates for a database connection or API keys)&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Add Liveness and Readiness probes&lt;&#x2F;strong&gt; to check if the container is started and alive&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Configure container resource limits and requests&lt;&#x2F;strong&gt;: In test or staging environments we should be able to disable it or set it to a low value&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Run Sidecar Containers&lt;&#x2F;strong&gt;: If the application requires a database connection but the database is on CloudSQL it is often recommended to run &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;GoogleCloudPlatform&#x2F;cloudsql-proxy&#x2F;&quot;&gt;cloudsql-proxy&lt;&#x2F;a&gt; as a sidecar container to establish a secure connection to the database&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Allow to set Affinity and Tolerations&lt;&#x2F;strong&gt;: To optimize the performance of the application we should be able to run it on the same machine as certain other applications or have it scheduled on a specific node pool&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Unlike the Ingress and Service templates, the &lt;a href=&quot;https:&#x2F;&#x2F;gist.github.com&#x2F;arthurk&#x2F;5f833ec5b264b84b6e1bedbd8eac69ea&quot;&gt;default template&lt;&#x2F;a&gt; doesn&#x27;t meet the requirements from above. Specifically we need to allow to:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Add Pod annotations so that other applications such as Linkerd know where to inject sidecar containers&lt;&#x2F;li&gt;
&lt;li&gt;Replace &lt;code&gt;appVersion&lt;&#x2F;code&gt; with &lt;code&gt;image.tag&lt;&#x2F;code&gt;. This allows to change the docker image tag without having to re-package the chart with a different &lt;code&gt;appVersion&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Add &lt;code&gt;extraArgs&lt;&#x2F;code&gt; to allow additional arguments to be passed into the container&lt;&#x2F;li&gt;
&lt;li&gt;Add &lt;code&gt;env&lt;&#x2F;code&gt; to allow additional environment variables to be passed into the container&lt;&#x2F;li&gt;
&lt;li&gt;Replace the default livenessProbe&#x2F;readinessProbe with a block that allows us to set all values (the default template only allows &lt;code&gt;httpGet&lt;&#x2F;code&gt; probes on &lt;code&gt;&#x2F;&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Add &lt;code&gt;extraVolumes&lt;&#x2F;code&gt; and &lt;code&gt;extraVolumeMounts&lt;&#x2F;code&gt; to allow mounting of custom ConfigMaps and Secrets&lt;&#x2F;li&gt;
&lt;li&gt;Add &lt;code&gt;sidecarContainers&lt;&#x2F;code&gt; to allow to inject additional containers into the pod (such as &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;GoogleCloudPlatform&#x2F;cloudsql-proxy&#x2F;&quot;&gt;cloudsql-proxy&lt;&#x2F;a&gt;)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;The modified template code looks as follows (&lt;span class=&quot;diff_add&quot;&gt;green&lt;&#x2F;span&gt; text marks added and changed code):&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;yaml&quot; style=&quot;background-color:#282a36;color:#f8f8f2;&quot; class=&quot;language-yaml &quot;&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;apiVersion&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;apps&#x2F;v1
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;kind&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;Deployment
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;metadata&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: {{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;include &amp;quot;mychart.fullname&amp;quot; . &lt;&#x2F;span&gt;&lt;span&gt;}}
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;labels&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    {{- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;include &amp;quot;mychart.labels&amp;quot; . | nindent 4 &lt;&#x2F;span&gt;&lt;span&gt;}}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;spec&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;replicas&lt;&#x2F;span&gt;&lt;span&gt;: {{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;.Values.replicaCount &lt;&#x2F;span&gt;&lt;span&gt;}}
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;selector&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;matchLabels&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;      {{- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;include &amp;quot;mychart.selectorLabels&amp;quot; . | nindent 6 &lt;&#x2F;span&gt;&lt;span&gt;}}
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;template&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;metadata&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;labels&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;        {{- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;include &amp;quot;mychart.selectorLabels&amp;quot; . | nindent 8 &lt;&#x2F;span&gt;&lt;span&gt;}} &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;&amp;lt;span class=&amp;quot;diff_add&amp;quot;&amp;gt;annotations&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;      {{- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;if .Values.podAnnotations &lt;&#x2F;span&gt;&lt;span&gt;}}
&lt;&#x2F;span&gt;&lt;span&gt;        {{- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;toYaml .Values.podAnnotations | nindent 8 &lt;&#x2F;span&gt;&lt;span&gt;}}
&lt;&#x2F;span&gt;&lt;span&gt;      {{- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;end &lt;&#x2F;span&gt;&lt;span&gt;}}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;lt;&#x2F;span&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;spec&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    {{- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;with .Values.imagePullSecrets &lt;&#x2F;span&gt;&lt;span&gt;}}
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;imagePullSecrets&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;        {{- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;toYaml . | nindent 8 &lt;&#x2F;span&gt;&lt;span&gt;}}
&lt;&#x2F;span&gt;&lt;span&gt;    {{- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;end &lt;&#x2F;span&gt;&lt;span&gt;}}
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;serviceAccountName&lt;&#x2F;span&gt;&lt;span&gt;: {{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;include &amp;quot;mychart.serviceAccountName&amp;quot; . &lt;&#x2F;span&gt;&lt;span&gt;}}
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;securityContext&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;        {{- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;toYaml .Values.podSecurityContext | nindent 8 &lt;&#x2F;span&gt;&lt;span&gt;}}
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;containers&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;        - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: {{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;.Chart.Name &lt;&#x2F;span&gt;&lt;span&gt;}}
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;securityContext&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;            {{- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;toYaml .Values.securityContext | nindent 12 &lt;&#x2F;span&gt;&lt;span&gt;}} &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;&amp;lt;span class=&amp;quot;diff_add&amp;quot;&amp;gt;image&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;{{ .Values.image.repository }}:{{ .Values.image.tag }}&amp;quot;&amp;lt;&#x2F;span&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;imagePullPolicy&lt;&#x2F;span&gt;&lt;span&gt;: {{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;.Values.image.pullPolicy &lt;&#x2F;span&gt;&lt;span&gt;}} &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;&amp;lt;span class=&amp;quot;diff_add&amp;quot;&amp;gt;args&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;          {{- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;range $key&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;$value := .Values.extraArgs &lt;&#x2F;span&gt;&lt;span&gt;}}
&lt;&#x2F;span&gt;&lt;span&gt;            - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;--{{ $key }}={{ $value }}
&lt;&#x2F;span&gt;&lt;span&gt;          {{- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;end &lt;&#x2F;span&gt;&lt;span&gt;}}
&lt;&#x2F;span&gt;&lt;span&gt;          {{- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;if .Values.env &lt;&#x2F;span&gt;&lt;span&gt;}}
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;env&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;            {{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;toYaml .Values.env | nindent 12&lt;&#x2F;span&gt;&lt;span&gt;}}
&lt;&#x2F;span&gt;&lt;span&gt;          {{- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;end &lt;&#x2F;span&gt;&lt;span&gt;}}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;lt;&#x2F;span&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;ports&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;            - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;http
&lt;&#x2F;span&gt;&lt;span&gt;              &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;containerPort&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bd93f9;&quot;&gt;80
&lt;&#x2F;span&gt;&lt;span&gt;              &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;protocol&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;TCP &amp;lt;span class=&amp;quot;diff_add&amp;quot;&amp;gt;{{- with .Values.livenessProbe }}
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;livenessProbe&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;            {{- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;toYaml . | nindent 12 &lt;&#x2F;span&gt;&lt;span&gt;}}
&lt;&#x2F;span&gt;&lt;span&gt;          {{- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;end &lt;&#x2F;span&gt;&lt;span&gt;}}
&lt;&#x2F;span&gt;&lt;span&gt;          {{- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;with .Values.readinessProbe &lt;&#x2F;span&gt;&lt;span&gt;}}
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;readinessProbe&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;            {{- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;toYaml . | nindent 12 &lt;&#x2F;span&gt;&lt;span&gt;}}
&lt;&#x2F;span&gt;&lt;span&gt;          {{- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;end &lt;&#x2F;span&gt;&lt;span&gt;}}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;lt;&#x2F;span&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;resources&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;            {{- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;toYaml .Values.resources | nindent 12 &lt;&#x2F;span&gt;&lt;span&gt;}} &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;&amp;lt;span class=&amp;quot;diff_add&amp;quot;&amp;gt;volumeMounts&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;          {{- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;if .Values.extraVolumeMounts &lt;&#x2F;span&gt;&lt;span&gt;}}
&lt;&#x2F;span&gt;&lt;span&gt;          {{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;toYaml .Values.extraVolumeMounts | nindent 12 &lt;&#x2F;span&gt;&lt;span&gt;}}
&lt;&#x2F;span&gt;&lt;span&gt;          {{- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;end &lt;&#x2F;span&gt;&lt;span&gt;}}
&lt;&#x2F;span&gt;&lt;span&gt;       {{- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;if .Values.sidecarContainers &lt;&#x2F;span&gt;&lt;span&gt;}}
&lt;&#x2F;span&gt;&lt;span&gt;       {{- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;toYaml .Values.sidecarContainers | nindent 8 &lt;&#x2F;span&gt;&lt;span&gt;}}
&lt;&#x2F;span&gt;&lt;span&gt;       {{- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;end &lt;&#x2F;span&gt;&lt;span&gt;}}
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;volumes&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;      {{- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;if .Values.extraVolumes &lt;&#x2F;span&gt;&lt;span&gt;}}
&lt;&#x2F;span&gt;&lt;span&gt;      {{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;toYaml .Values.extraVolumes | nindent 8&lt;&#x2F;span&gt;&lt;span&gt;}}
&lt;&#x2F;span&gt;&lt;span&gt;      {{- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;end &lt;&#x2F;span&gt;&lt;span&gt;}}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;lt;&#x2F;span&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;      {{- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;with .Values.nodeSelector &lt;&#x2F;span&gt;&lt;span&gt;}}
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;nodeSelector&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;        {{- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;toYaml . | nindent 8 &lt;&#x2F;span&gt;&lt;span&gt;}}
&lt;&#x2F;span&gt;&lt;span&gt;      {{- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;end &lt;&#x2F;span&gt;&lt;span&gt;}}
&lt;&#x2F;span&gt;&lt;span&gt;    {{- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;with .Values.affinity &lt;&#x2F;span&gt;&lt;span&gt;}}
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;affinity&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;        {{- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;toYaml . | nindent 8 &lt;&#x2F;span&gt;&lt;span&gt;}}
&lt;&#x2F;span&gt;&lt;span&gt;    {{- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;end &lt;&#x2F;span&gt;&lt;span&gt;}}
&lt;&#x2F;span&gt;&lt;span&gt;    {{- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;with .Values.tolerations &lt;&#x2F;span&gt;&lt;span&gt;}}
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;tolerations&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;        {{- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;toYaml . | nindent 8 &lt;&#x2F;span&gt;&lt;span&gt;}}
&lt;&#x2F;span&gt;&lt;span&gt;    {{- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;end &lt;&#x2F;span&gt;&lt;span&gt;}}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;&#x2F;h2&gt;
&lt;p&gt;The default helm chart template is a great starting point for building reusable helm charts. The Ingress and Service templates are perfect examples. The Deployment template is lacking a few options to be reusable enough but can easily be modified and improved.&lt;&#x2F;p&gt;
&lt;p&gt;For good examples of reusable Helm charts I recommend checking the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;helm&#x2F;charts&#x2F;tree&#x2F;master&#x2F;stable&quot;&gt;helm&#x2F;charts stable repo&lt;&#x2F;a&gt;. Charts such as &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;helm&#x2F;charts&#x2F;tree&#x2F;master&#x2F;stable&#x2F;prometheus&quot;&gt;Prometheus&lt;&#x2F;a&gt;, &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;helm&#x2F;charts&#x2F;tree&#x2F;master&#x2F;stable&#x2F;grafana&quot;&gt;Grafana&lt;&#x2F;a&gt; or &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;helm&#x2F;charts&#x2F;tree&#x2F;master&#x2F;stable&#x2F;nginx-ingress&quot;&gt;nginx-ingress&lt;&#x2F;a&gt; are actively maintained and constantly improved. They are good references to look at when writing a new Helm chart.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Pre-Installed Daemons on Google Compute Engine</title>
        <published>2020-02-23T00:00:00+00:00</published>
        <updated>2020-02-23T00:00:00+00:00</updated>
        <author>
          <name>Arthur Koziel</name>
        </author>
        <link rel="alternate" href="https://www.arthurkoziel.com/pre-installed-daemons-on-google-compute-engine/" type="text/html"/>
        <id>https://www.arthurkoziel.com/pre-installed-daemons-on-google-compute-engine/</id>
        
        <content type="html">&lt;p&gt;I found out that Google Compute Engine instances will come with the &lt;a href=&quot;https:&#x2F;&#x2F;cloud.google.com&#x2F;compute&#x2F;docs&#x2F;images&#x2F;guest-environment&quot;&gt;Google Guest Environment&lt;&#x2F;a&gt; pre-installed which runs daemons in the background. This is unlike AWS EC2 instances which don&#x27;t install any daemons (but come with &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;aws&#x2F;aws-cli&quot;&gt;aws-cli&lt;&#x2F;a&gt; pre-installed). We can see the following output when listing the running processes on a new Debian GCE intance:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#282a36;color:#f8f8f2;&quot;&gt;&lt;code&gt;&lt;span&gt;$ ps ax | grep google
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;418 ?        Ssl    2:52 &#x2F;usr&#x2F;bin&#x2F;google_osconfig_agent
&lt;&#x2F;span&gt;&lt;span&gt;526 ?        Ss     2:17 &#x2F;usr&#x2F;bin&#x2F;python3 &#x2F;usr&#x2F;bin&#x2F;google_network_daemon
&lt;&#x2F;span&gt;&lt;span&gt;528 ?        Ss     3:32 &#x2F;usr&#x2F;bin&#x2F;python3 &#x2F;usr&#x2F;bin&#x2F;google_accounts_daemon
&lt;&#x2F;span&gt;&lt;span&gt;529 ?        Ss     1:14 &#x2F;usr&#x2F;bin&#x2F;python3 &#x2F;usr&#x2F;bin&#x2F;google_clock_skew_daemon
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We can check all installed google packages:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#282a36;color:#f8f8f2;&quot;&gt;&lt;code&gt;&lt;span&gt;$ apt list --installed | grep google
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;gce-disk-expand
&lt;&#x2F;span&gt;&lt;span&gt;google-cloud-packages-archive-keyring
&lt;&#x2F;span&gt;&lt;span&gt;google-cloud-sdk
&lt;&#x2F;span&gt;&lt;span&gt;google-compute-engine-oslogin
&lt;&#x2F;span&gt;&lt;span&gt;google-compute-engine
&lt;&#x2F;span&gt;&lt;span&gt;google-osconfig-agent
&lt;&#x2F;span&gt;&lt;span&gt;python-google-compute-engine
&lt;&#x2F;span&gt;&lt;span&gt;python3-google-compute-engine
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;and systemd services:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#282a36;color:#f8f8f2;&quot;&gt;&lt;code&gt;&lt;span&gt;$ systemctl list-unit-files | grep google
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;google-accounts-daemon.service         enabled
&lt;&#x2F;span&gt;&lt;span&gt;google-clock-skew-daemon.service       enabled
&lt;&#x2F;span&gt;&lt;span&gt;google-instance-setup.service          enabled
&lt;&#x2F;span&gt;&lt;span&gt;google-network-daemon.service          enabled
&lt;&#x2F;span&gt;&lt;span&gt;google-osconfig-agent.service          enabled
&lt;&#x2F;span&gt;&lt;span&gt;google-shutdown-scripts.service        enabled
&lt;&#x2F;span&gt;&lt;span&gt;google-startup-scripts.service         enabled
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;These packages and services are part of the Google &lt;a href=&quot;https:&#x2F;&#x2F;cloud.google.com&#x2F;compute&#x2F;docs&#x2F;images&#x2F;guest-environment&quot;&gt;Linux Guest Environment&lt;&#x2F;a&gt; and &lt;a href=&quot;https:&#x2F;&#x2F;cloud.google.com&#x2F;compute&#x2F;docs&#x2F;instances&#x2F;managing-instance-access&quot;&gt;OS Login Guest Environment&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;The GCP docs have some information on the &lt;a href=&quot;https:&#x2F;&#x2F;cloud.google.com&#x2F;compute&#x2F;docs&#x2F;images&#x2F;guest-environment&quot;&gt;Guest Environment&lt;&#x2F;a&gt; but it lacks details on the specifics of each daemon&#x2F;script. A better source is the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;GoogleCloudPlatform&#x2F;compute-image-packages&#x2F;tree&#x2F;master&#x2F;packages&#x2F;python-google-compute-engine&quot;&gt;GitHub repo&lt;&#x2F;a&gt; where we can find a good explanation for each daemon and script:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;google-network-daemon:&lt;&#x2F;strong&gt; handles network setup for multiple network interfaces on boot and integrates network load balancing with forwarding rule changes into the guest&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;google-accounts-daemon:&lt;&#x2F;strong&gt; daemon to setup and manage user accounts, and to enable SSH key based authentication&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;google-clock-skew-daemon:&lt;&#x2F;strong&gt; daemon to keep the system clock in sync after VM start and stop events&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;google-instance-setup:&lt;&#x2F;strong&gt; scripts to execute VM configuration scripts during boot&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;google-startup-scripts&#x2F;google-shutdown-scripts:&lt;&#x2F;strong&gt; run user-provided scripts at VM startup and shutdown&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;The remaining daemon is the agent for the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;GoogleCloudPlatform&#x2F;guest-oslogin&quot;&gt;OS Login Guest Environment&lt;&#x2F;a&gt;. It manages access control when using the &lt;a href=&quot;https:&#x2F;&#x2F;cloud.google.com&#x2F;compute&#x2F;docs&#x2F;oslogin&#x2F;&quot;&gt;OS Login&lt;&#x2F;a&gt; feature by linking linux user accounts to Google accounts (which can then be managed with Cloud IAM). This feature is disabled by default and I&#x27;m not sure why the package is installed and the daemon is running.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;uninstall&quot;&gt;Uninstall&lt;&#x2F;h2&gt;
&lt;p&gt;If all that&#x27;s needed is a simple VM instance without Google Cloud integration, all daemons and scripts can be uninstalled by removing the packages:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#282a36;color:#f8f8f2;&quot;&gt;&lt;code&gt;&lt;span&gt;$ apt-get remove python-google-compute-engine python3-google-compute-engine \
&lt;&#x2F;span&gt;&lt;span&gt;                 google-osconfig-agent google-compute-engine-oslogin
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;I think it&#x27;s good to at least remove the &lt;code&gt;google-osconfig-agent&lt;&#x2F;code&gt; package and get rid of the &lt;code&gt;google_osconfig_agent&lt;&#x2F;code&gt; daemon running in the background. The package can be re-installed before enabling OS Login.&lt;&#x2F;p&gt;
&lt;p&gt;Each daemon can also be disabled separately:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#282a36;color:#f8f8f2;&quot;&gt;&lt;code&gt;&lt;span&gt;$ systemctl disable google-accounts-daemon.service
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Generating Ethereum Addresses in Python</title>
        <published>2020-02-16T00:00:00+00:00</published>
        <updated>2020-02-16T00:00:00+00:00</updated>
        <author>
          <name>Arthur Koziel</name>
        </author>
        <link rel="alternate" href="https://www.arthurkoziel.com/generating-ethereum-addresses-in-python/" type="text/html"/>
        <id>https://www.arthurkoziel.com/generating-ethereum-addresses-in-python/</id>
        
        <content type="html">&lt;p&gt;I&#x27;ve been wondering how long it would take to generate all Ethereum private keys with addresses on my laptop.&lt;&#x2F;p&gt;
&lt;p&gt;I know there is &lt;a href=&quot;https:&#x2F;&#x2F;bitcointalk.org&#x2F;index.php?topic=7769.msg1010711#msg1010711&quot;&gt;not enough energy in our star system&lt;&#x2F;a&gt; to do this in a reasonable timeframe, even on an imaginative computer that would use the absolute minimum of energy possible. This was more of a learning experience for me to get to know more about SHA-3 and KECCAK hashes, ECDSA curves, Public Keys and Ethereum addresses.&lt;&#x2F;p&gt;
&lt;p&gt;Due to its slow interpreter, Python is usually not a good choice when it comes to writing performant applications. The exception being Python modules which use an interface that calls C&#x2F;C++ code. These modules are usually very fast, popular examples are &lt;a href=&quot;https:&#x2F;&#x2F;www.tensorflow.org&#x2F;&quot;&gt;Tensorflow&lt;&#x2F;a&gt; and &lt;a href=&quot;https:&#x2F;&#x2F;numpy.org&#x2F;&quot;&gt;Numpy&lt;&#x2F;a&gt;. To generate Ethereum addresses we can use the following two Python modules which are both C based and have a good performance:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ofek&#x2F;coincurve&#x2F;&quot;&gt;coincurve&lt;&#x2F;a&gt;: Cross-platform Python CFFI bindings for libsecp256k1&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;tiran&#x2F;pysha3&quot;&gt;pysha3&lt;&#x2F;a&gt;: SHA-3 wrapper for Python (with support for keccak)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Generating Ethereum addresses is a 3-step process:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;Generate a private key&lt;&#x2F;li&gt;
&lt;li&gt;Derive the public key from the private key&lt;&#x2F;li&gt;
&lt;li&gt;Derive the Ethereum address from the public key&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;Note that public keys and Ethereum addresses are not the same. Addresses are hashes of public keys. It&#x27;s not possible to send funds to a public key.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;step-1-generate-a-private-key&quot;&gt;Step 1: Generate a private key&lt;&#x2F;h2&gt;
&lt;p&gt;Ethereum private keys are based on &lt;a href=&quot;https:&#x2F;&#x2F;keccak.team&#x2F;keccak.html&quot;&gt;KECCAK-256 hashes&lt;&#x2F;a&gt;. To generate such a hash we use the &lt;code&gt;keccak_256&lt;&#x2F;code&gt; function from the pysha3 module on a random 32 byte seed:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#282a36;color:#f8f8f2;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;secrets
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;from &lt;&#x2F;span&gt;&lt;span&gt;sha3 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;keccak_256
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;private_key &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50fa7b;&quot;&gt;keccak_256&lt;&#x2F;span&gt;&lt;span&gt;(secrets&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50fa7b;&quot;&gt;token_bytes&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bd93f9;&quot;&gt;32&lt;&#x2F;span&gt;&lt;span&gt;))&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50fa7b;&quot;&gt;digest&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Note that a KECCAK hash is not the same as a SHA-3 hash. KECCAK won a competition to become the SHA-3 standard but was slightly modified before it became standardized. Some SHA3 libraries such as pysha3 include the legacy KECCAK algorithm while others, such as the &lt;a href=&quot;https:&#x2F;&#x2F;docs.python.org&#x2F;3.7&#x2F;library&#x2F;hashlib.html&quot;&gt;Python hashlib module&lt;&#x2F;a&gt;, only implement the official SHA-3 standard.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;step-2-derive-the-public-key-from-the-private-key&quot;&gt;Step 2: Derive the public key from the private key&lt;&#x2F;h2&gt;
&lt;p&gt;To get our public key we need to sign our private key with an Elliptic Curve Digital Signature Algorithm (ECDSA). Ethereum uses the &lt;a href=&quot;https:&#x2F;&#x2F;en.bitcoin.it&#x2F;wiki&#x2F;Secp256k1&quot;&gt;secp256k1 curve ECDSA&lt;&#x2F;a&gt;. Coincurve uses this as a default so we don&#x27;t need to explicitly specify it when calling the function:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#282a36;color:#f8f8f2;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;from &lt;&#x2F;span&gt;&lt;span&gt;coincurve &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;PublicKey
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;public_key &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;PublicKey&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50fa7b;&quot;&gt;from_valid_secret&lt;&#x2F;span&gt;&lt;span&gt;(private_key)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50fa7b;&quot;&gt;format&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#ffb86c;&quot;&gt;compressed&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bd93f9;&quot;&gt;False&lt;&#x2F;span&gt;&lt;span&gt;)[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bd93f9;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;:]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The &lt;a href=&quot;https:&#x2F;&#x2F;ethereum.github.io&#x2F;yellowpaper&#x2F;paper.pdf&quot;&gt;Ethereum Yellow Paper&lt;&#x2F;a&gt; states that the public key has to be a byte array of size 64.&lt;&#x2F;p&gt;
&lt;p&gt;By default coincurve uses the compressed format for public keys (libsecp256k1 was developed for Bitcoin where compressed keys are commonly used) which is 33 bytes in size. Uncompressed keys are 65 bytes in size. Additionally all public keys are prepended with a single byte to indicate if they are compressed or uncompressed. This means we first need to get the uncompressed 65 byte key (&lt;code&gt;compressed=False&lt;&#x2F;code&gt;) and then strip the first byte (&lt;code&gt;[1:]&lt;&#x2F;code&gt;) to get our 64 byte Ethereum public key.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;step-3-derive-the-ethereum-address-from-the-public-key&quot;&gt;Step 3: Derive the Ethereum address from the public key&lt;&#x2F;h2&gt;
&lt;p&gt;We can now generate our Ethereum address:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#282a36;color:#f8f8f2;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span&gt;addr &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50fa7b;&quot;&gt;keccak_256&lt;&#x2F;span&gt;&lt;span&gt;(public_key)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50fa7b;&quot;&gt;digest&lt;&#x2F;span&gt;&lt;span&gt;()[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bd93f9;&quot;&gt;20&lt;&#x2F;span&gt;&lt;span&gt;:]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;As specified in the &lt;a href=&quot;https:&#x2F;&#x2F;ethereum.github.io&#x2F;yellowpaper&#x2F;paper.pdf&quot;&gt;Yellow Paper&lt;&#x2F;a&gt; we take the right most 20 bytes of the 32 byte KECCAK hash of the corresponding ECDSA public key.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;full-example&quot;&gt;Full Example&lt;&#x2F;h2&gt;
&lt;p&gt;This is the full example code from the above steps. It generates a random private key, derives the address and prints them in hex format:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#282a36;color:#f8f8f2;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;from &lt;&#x2F;span&gt;&lt;span&gt;secrets &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;token_bytes
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;from &lt;&#x2F;span&gt;&lt;span&gt;coincurve &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;PublicKey
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;from &lt;&#x2F;span&gt;&lt;span&gt;sha3 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;keccak_256
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;private_key &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50fa7b;&quot;&gt;keccak_256&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50fa7b;&quot;&gt;token_bytes&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bd93f9;&quot;&gt;32&lt;&#x2F;span&gt;&lt;span&gt;))&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50fa7b;&quot;&gt;digest&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;public_key &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;PublicKey&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50fa7b;&quot;&gt;from_valid_secret&lt;&#x2F;span&gt;&lt;span&gt;(private_key)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50fa7b;&quot;&gt;format&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#ffb86c;&quot;&gt;compressed&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bd93f9;&quot;&gt;False&lt;&#x2F;span&gt;&lt;span&gt;)[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bd93f9;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;:]
&lt;&#x2F;span&gt;&lt;span&gt;addr &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50fa7b;&quot;&gt;keccak_256&lt;&#x2F;span&gt;&lt;span&gt;(public_key)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50fa7b;&quot;&gt;digest&lt;&#x2F;span&gt;&lt;span&gt;()[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bd93f9;&quot;&gt;20&lt;&#x2F;span&gt;&lt;span&gt;:]
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8be9fd;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;#39;private_key:&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, private_key&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50fa7b;&quot;&gt;hex&lt;&#x2F;span&gt;&lt;span&gt;())
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8be9fd;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;#39;eth addr: 0x&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span&gt;addr&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50fa7b;&quot;&gt;hex&lt;&#x2F;span&gt;&lt;span&gt;())
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6272a4;&quot;&gt;### Output ###
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6272a4;&quot;&gt;# private_key: 7bf19806aa6d5b31d7b7ea9e833c202e51ff8ee6311df6a036f0261f216f09ef
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6272a4;&quot;&gt;# eth addr: 0x3db763bbbb1ac900eb2eb8b106218f85f9f64a13
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;&#x2F;h2&gt;
&lt;p&gt;I used the Python &lt;code&gt;timeit&lt;&#x2F;code&gt; module to do &lt;a href=&quot;https:&#x2F;&#x2F;gist.github.com&#x2F;arthurk&#x2F;fbc876951379e2b0c889ea71b5167b4e&quot;&gt;a quick benchmark&lt;&#x2F;a&gt; with the above code. The result is that my laptop can generate 18k addresses per second on a single cpu core. Using all 4 cpu cores that&#x27;s 72k addresses per second, ~6.2 billion (6.220.800.000) addresses per day or around two trillion (2.270.592.000.000) addresses per year.&lt;&#x2F;p&gt;
&lt;p&gt;Ethereum&#x27;s address space is 2^160. This means that by using this method it would take my laptop 643665439999999976814879449351716864 (six hundred and forty-three decillion ...) years to generate all Ethereum private keys with addresses.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Validating Helm Chart Values with JSON Schemas</title>
        <published>2020-02-08T00:00:00+00:00</published>
        <updated>2020-02-08T00:00:00+00:00</updated>
        <author>
          <name>Arthur Koziel</name>
        </author>
        <link rel="alternate" href="https://www.arthurkoziel.com/validate-helm-chart-values-with-json-schemas/" type="text/html"/>
        <id>https://www.arthurkoziel.com/validate-helm-chart-values-with-json-schemas/</id>
        
        <content type="html">&lt;p&gt;Helm v3 &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;helm&#x2F;helm&#x2F;pull&#x2F;5350&quot;&gt;added support&lt;&#x2F;a&gt; to validate values in a chart&#x27;s &lt;code&gt;values.yaml&lt;&#x2F;code&gt; file with &lt;a href=&quot;https:&#x2F;&#x2F;json-schema.org&#x2F;&quot;&gt;JSON schemas&lt;&#x2F;a&gt;. It allows us to do:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Requirement checks. Example: An &lt;code&gt;API_KEY&lt;&#x2F;code&gt; environment variable is set&lt;&#x2F;li&gt;
&lt;li&gt;Type validation. Example: The image tag is a string such as &lt;code&gt;&amp;quot;1.5&amp;quot;&lt;&#x2F;code&gt; and not the number &lt;code&gt;1.5&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Range validation. Example: The value for a CPU utilization percentage key is between 1 and 100&lt;&#x2F;li&gt;
&lt;li&gt;Constraint Validation. Example: The &lt;code&gt;pullPolicy&lt;&#x2F;code&gt; is &lt;code&gt;IfNotPresent&lt;&#x2F;code&gt;, &lt;code&gt;Always&lt;&#x2F;code&gt;, or &lt;code&gt;Never&lt;&#x2F;code&gt;; A URL has the format &lt;code&gt;http(s):&#x2F;&#x2F;&amp;lt;host&amp;gt;:&amp;lt;port&amp;gt;&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;In this post I&#x27;m going to show how to create a JSON schema and use it to validate a chart&#x27;s &lt;code&gt;values.yaml&lt;&#x2F;code&gt; file. After that I&#x27;m going to show how to automatically generate a schema from an existing values file.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;example&quot;&gt;Example&lt;&#x2F;h2&gt;
&lt;p&gt;For this example I&#x27;m using the chart that is created when running &lt;code&gt;helm create mychart&lt;&#x2F;code&gt;. We&#x27;ll create a JSON schema that will validate that the following conditions are met:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;image.repository&lt;&#x2F;code&gt; is a valid docker image name&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;image.pullPolicy&lt;&#x2F;code&gt; is &lt;code&gt;IfNotPresent&lt;&#x2F;code&gt;, &lt;code&gt;Always&lt;&#x2F;code&gt; or &lt;code&gt;Never&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;The relevant part in the &lt;code&gt;values.yaml&lt;&#x2F;code&gt; file is:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;yaml&quot; style=&quot;background-color:#282a36;color:#f8f8f2;&quot; class=&quot;language-yaml &quot;&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;image&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;repository&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;my-docker-image
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;pullPolicy&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;IfNotPresent
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The JSON schema needs to be in a file named &lt;code&gt;values.schema.json&lt;&#x2F;code&gt;. It has to be located in the same directory as the &lt;code&gt;values.yaml&lt;&#x2F;code&gt; file. To match the requirements from above the file needs to have the following content:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;json&quot; style=&quot;background-color:#282a36;color:#f8f8f2;&quot; class=&quot;language-json &quot;&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eeeeee;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;$schema&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eeeeee;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eeeeee;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;http:&#x2F;&#x2F;json-schema.org&#x2F;schema#&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eeeeee;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eeeeee;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;type&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eeeeee;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eeeeee;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;object&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eeeeee;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eeeeee;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;required&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eeeeee;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: [
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eeeeee;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;image&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eeeeee;&quot;&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;  ],
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eeeeee;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;properties&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eeeeee;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eeeeee;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;image&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eeeeee;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: {
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eeeeee;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;type&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eeeeee;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eeeeee;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;object&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eeeeee;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eeeeee;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;required&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eeeeee;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: [
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eeeeee;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;repository&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eeeeee;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eeeeee;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;pullPolicy&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eeeeee;&quot;&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;      ],
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eeeeee;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;properties&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eeeeee;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eeeeee;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;repository&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eeeeee;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: {
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eeeeee;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;type&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eeeeee;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eeeeee;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;string&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eeeeee;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eeeeee;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;pattern&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eeeeee;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eeeeee;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;^[a-z0-9-_]+$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eeeeee;&quot;&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;        },
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eeeeee;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;pullPolicy&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eeeeee;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: {
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eeeeee;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;type&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eeeeee;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eeeeee;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;string&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eeeeee;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eeeeee;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;pattern&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eeeeee;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eeeeee;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;^(Always|Never|IfNotPresent)$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eeeeee;&quot;&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;      }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Note that putting a key in the &lt;code&gt;required&lt;&#x2F;code&gt; array does not mean that it has a value. In YAML if a key doesn&#x27;t have a value it will be set to an empty string. To make sure the value was set, a regex for the &lt;code&gt;pattern&lt;&#x2F;code&gt; key has to be added that matches a non-empty string.&lt;&#x2F;p&gt;
&lt;p&gt;To demonstrate that the validation is working I&#x27;m leaving the &lt;code&gt;repo&lt;&#x2F;code&gt; empty and set &lt;code&gt;pullPolicy&lt;&#x2F;code&gt; to an invalid value. Running lint shows the following output:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#282a36;color:#f8f8f2;&quot;&gt;&lt;code&gt;&lt;span&gt;$ helm lint .
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;==&amp;gt; Linting .
&lt;&#x2F;span&gt;&lt;span&gt;[ERROR] values.yaml: - image.repository: Invalid type. Expected: string, given: null
&lt;&#x2F;span&gt;&lt;span&gt;- image.pullPolicy: Does not match pattern &amp;#39;^(Always|Never|IfNotPresent)$&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;[ERROR] templates&#x2F;: values don&amp;#39;t meet the specifications of the schema(s) in the following chart(s):
&lt;&#x2F;span&gt;&lt;span&gt;mychart:
&lt;&#x2F;span&gt;&lt;span&gt;- image.repository: Invalid type. Expected: string, given: null
&lt;&#x2F;span&gt;&lt;span&gt;- image.pullPolicy: Does not match pattern &amp;#39;^(Always|Never|IfNotPresent)$&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;Error: 1 chart(s) linted, 1 chart(s) failed
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The schema is automatically validated when running the following commands:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;helm install&lt;&#x2F;li&gt;
&lt;li&gt;helm upgrade&lt;&#x2F;li&gt;
&lt;li&gt;helm lint&lt;&#x2F;li&gt;
&lt;li&gt;helm template&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;The YAML values and the JSON schema need to be kept in sync manually. Helm will not check if keys from the YAML values file are missing from the schema. It will only validate fields that are specified in the schema.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;creating-a-json-schema-for-existing-yaml-values&quot;&gt;Creating a JSON Schema for existing YAML values&lt;&#x2F;h2&gt;
&lt;p&gt;We can infer a schema from existing YAML values and use it as a starting point when writing a new schema. The steps are:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;Convert your values YAML file to JSON on &lt;a href=&quot;https:&#x2F;&#x2F;www.json2yaml.com&#x2F;&quot;&gt;https:&#x2F;&#x2F;www.json2yaml.com&#x2F;&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Paste the JSON on &lt;a href=&quot;https:&#x2F;&#x2F;www.jsonschema.net&quot;&gt;https:&#x2F;&#x2F;www.jsonschema.net&#x2F;&lt;&#x2F;a&gt; and click on &amp;quot;Infer Schema&amp;quot;&lt;&#x2F;li&gt;
&lt;li&gt;Paste the schema into the &lt;code&gt;values.schema.json&lt;&#x2F;code&gt; file&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;We can run &lt;code&gt;helm lint&lt;&#x2F;code&gt; to make sure the schema has been generated correctly:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#282a36;color:#f8f8f2;&quot;&gt;&lt;code&gt;&lt;span&gt;$ helm lint mychart&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;==&amp;gt; Linting .
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;1 chart(s) linted, 0 chart(s) failed
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The inferred schema will mark all keys as required and set their type. A regex can be added to keys to make sure they have a value set. The &lt;code&gt;id&lt;&#x2F;code&gt;, &lt;code&gt;title&lt;&#x2F;code&gt;, &lt;code&gt;default&lt;&#x2F;code&gt; and &lt;code&gt;examples&lt;&#x2F;code&gt; fields are not necessary for validating helm charts and can be removed.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Extracting Data from Invoices with Google AutoML Natural Language</title>
        <published>2020-02-02T00:00:00+00:00</published>
        <updated>2020-02-02T00:00:00+00:00</updated>
        <author>
          <name>Arthur Koziel</name>
        </author>
        <link rel="alternate" href="https://www.arthurkoziel.com/automl-invoice-data-extraction/" type="text/html"/>
        <id>https://www.arthurkoziel.com/automl-invoice-data-extraction/</id>
        
        <content type="html">&lt;p&gt;In this tutorial I will show how to use &lt;a href=&quot;https:&#x2F;&#x2F;cloud.google.com&#x2F;natural-language&#x2F;automl&#x2F;docs&#x2F;&quot;&gt;Google AutoML Natural Language&lt;&#x2F;a&gt; to setup a machine learning model that will automatically extract the total from invoices.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;why&quot;&gt;Why?&lt;&#x2F;h2&gt;
&lt;p&gt;Manually extracting data from invoices and entering them into an accounting system is time-consuming and tedious work.&lt;&#x2F;p&gt;
&lt;p&gt;To automate this there are template-based systems like &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;invoice-x&#x2F;invoice2data&quot;&gt;invoice2data&lt;&#x2F;a&gt; available. They extract the data using predefined extraction rules (regular expressions):&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#282a36;color:#f8f8f2;&quot;&gt;&lt;code&gt;&lt;span&gt;Invoice Total: \$(\d+.\d{2})
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;With such a system there&#x27;s still manual work required. YAML templates with extraction rules need to be written for each supplier and then maintained as invoice structures change over time. In the example above the supplier could decide to change &lt;code&gt;Invoice Total&lt;&#x2F;code&gt; to &lt;code&gt;Total&lt;&#x2F;code&gt; on the next invoice. The extraction would fail and the rule would have to be adjusted.&lt;&#x2F;p&gt;
&lt;p&gt;A better solution is to use a machine learning model that can extract the information without writing extraction rules. In this post I&#x27;m going to show how to setup such a model.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;steps-to-do&quot;&gt;Steps To Do&lt;&#x2F;h2&gt;
&lt;p&gt;To build our invoice data extraction ML model we have to do the following steps:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Collect the training documents&lt;&#x2F;li&gt;
&lt;li&gt;Upload the documents to Google Cloud Storage&lt;&#x2F;li&gt;
&lt;li&gt;Create a CSV and JSONL file for AutoML to import the uploaded documents&lt;&#x2F;li&gt;
&lt;li&gt;Import the documents&lt;&#x2F;li&gt;
&lt;li&gt;Annotate the documents&lt;&#x2F;li&gt;
&lt;li&gt;Build&#x2F;Train the model&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;After that we can manually test the model by uploading invoices and checking how well it&#x27;s able to extract the data.&lt;&#x2F;p&gt;
&lt;p&gt;I&#x27;m using Google AutoML Natural Language which is part of Google Cloud Platform and a GCP account is required. Regarding cost there are two things to note: Google will give $300 free credit for new GCP accounts and $25 promotional credit for developers using AutoML for the first time.&lt;&#x2F;p&gt;
&lt;p&gt;Note that for the &lt;code&gt;gsutil&lt;&#x2F;code&gt; commands below I installed the &lt;a href=&quot;https:&#x2F;&#x2F;cloud.google.com&#x2F;sdk&#x2F;&quot;&gt;Google Cloud SDK&lt;&#x2F;a&gt; but it&#x27;s not necessary to do so, the GCS operations from below can also be done over the Web UI.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;training-documents&quot;&gt;Training Documents&lt;&#x2F;h2&gt;
&lt;p&gt;The first step is to collect training documents that are structured in the same way as the documents we want the model to handle later on. I was able to collect 150 invoices from different consultants. All invoices are text based PDF files with either 1 or 2 pages and the total written somewhere in the bottom right (single page invoices) or top-right (two-page invoices).&lt;&#x2F;p&gt;
&lt;p&gt;This is almost the minimum amount of training documents that is required by AutoML to work. Feel free to add more. The more training documents the better the model&#x27;s performance.&lt;&#x2F;p&gt;
&lt;p&gt;It&#x27;s important to use documents that have a similar structure. AutoML will use those documents to build the model by trying out different algorithms to find patterns. If those documents are structured differently it won&#x27;t be able to find any patterns and the model will have a poor performance.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;uploading-documents-to-gcs&quot;&gt;Uploading Documents to GCS&lt;&#x2F;h2&gt;
&lt;p&gt;All documents need to be stored in a Google Cloud Storage (GCS) bucket. AutoML doesn&#x27;t support other document sources. There are three important restrictions when creating the bucket:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;The &lt;em&gt;Location Type&lt;&#x2F;em&gt; has to be &lt;code&gt;Region&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;The &lt;em&gt;Location&lt;&#x2F;em&gt; has to be &lt;code&gt;us-central1 (Iowa)&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;The &lt;em&gt;Storage Class&lt;&#x2F;em&gt; has to be &lt;code&gt;Standard&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;The bucket can be created by running:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#282a36;color:#f8f8f2;&quot;&gt;&lt;code&gt;&lt;span&gt;gsutil mb -l us-central1 gs:&#x2F;&#x2F;automl-nlp-example
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;I have all my training documents in a folder called &lt;code&gt;invoices&#x2F;&lt;&#x2F;code&gt; and named with the same pattern: &lt;code&gt;invoice-X&lt;&#x2F;code&gt; where X is the number of the invoice (1 to 150). I recommend using the same pattern for all the invoice files as we will need to iterate over them later on. We can upload the folder with the invoices by running:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#282a36;color:#f8f8f2;&quot;&gt;&lt;code&gt;&lt;span&gt;gsutil -m cp -r invoices&#x2F; gs:&#x2F;&#x2F;automl-nlp-example&#x2F;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;importing-the-documents&quot;&gt;Importing the documents&lt;&#x2F;h2&gt;
&lt;p&gt;For AutoML to be able to import the training documents we need to create a CSV file. The CSV file contains a link to a &lt;a href=&quot;http:&#x2F;&#x2F;jsonlines.org&#x2F;&quot;&gt;JSONL&lt;&#x2F;a&gt; document and the JSONL file then contains links to the actual invoice PDF files. The files are imported in the following way:&lt;&#x2F;p&gt;
&lt;p&gt;AutoML -&amp;gt; CSV file → JSONL file → PDF file(s)&lt;&#x2F;p&gt;
&lt;h2 id=&quot;creating-the-csv-file&quot;&gt;Creating the CSV file&lt;&#x2F;h2&gt;
&lt;p&gt;Creating the CSV file is simple and requires only one line:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#282a36;color:#f8f8f2;&quot;&gt;&lt;code&gt;&lt;span&gt;,gs:&#x2F;&#x2F;automl-nlp-example&#x2F;data.jsonl
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;It&#x27;s important to have the comma at the beginning of the line which will make AutoML randomly assign the documents to different sets (TRAIN, VALIDATION, TEST). It will use:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;80% of the PDF documents for training the model&lt;&#x2F;li&gt;
&lt;li&gt;10% for validating the results during training&lt;&#x2F;li&gt;
&lt;li&gt;10% for verifying the model&#x27;s results after it has been trained&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;We can upload the CSV file to GCS:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#282a36;color:#f8f8f2;&quot;&gt;&lt;code&gt;&lt;span&gt;gsutil cp data.csv gs:&#x2F;&#x2F;automl-nlp-example&#x2F;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;creating-the-jsonl-file&quot;&gt;Creating the JSONL File&lt;&#x2F;h2&gt;
&lt;p&gt;The JSONL file contains links to the invoice PDF documents. Each line links to one PDF document and needs to have the following structure:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;json&quot; style=&quot;background-color:#282a36;color:#f8f8f2;&quot; class=&quot;language-json &quot;&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eeeeee;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;document&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eeeeee;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eeeeee;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;input_config&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eeeeee;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eeeeee;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;gcs_source&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eeeeee;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eeeeee;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;input_uris&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eeeeee;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: [ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eeeeee;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;gs:&#x2F;&#x2F;automl-nlp-example&#x2F;invoice-1.pdf&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eeeeee;&quot;&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span&gt;]}}}}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We need to repeat this line for all documents and change the value of &lt;code&gt;input_uris&lt;&#x2F;code&gt; to use the actual filename of the PDF file. I used a small Python script to generate the file (this is easy since my documents follow the same filename pattern) and upload it to GCS:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#282a36;color:#f8f8f2;&quot;&gt;&lt;code&gt;&lt;span&gt;python3 -c &amp;#39;for x in range(1, 151): print(&amp;quot;&amp;quot;&amp;quot;{&amp;quot;document&amp;quot;: {&amp;quot;input_config&amp;quot;: {&amp;quot;gcs_source&amp;quot;: {&amp;quot;input_uris&amp;quot;: [ &amp;quot;gs:&#x2F;&#x2F;automl-nlp-example&#x2F;invoice-%s.pdf&amp;quot; ]}}}}&amp;quot;&amp;quot;&amp;quot; % x)&amp;#39; &amp;gt; data.jsonl
&lt;&#x2F;span&gt;&lt;span&gt;gsutil cp data.jsonl gs:&#x2F;&#x2F;automl-nlp-example&#x2F;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Now we should have the following files in the GCS bucket:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;The &lt;code&gt;invoice&#x2F;&lt;&#x2F;code&gt; directory contains all invoices as PDF files&lt;&#x2F;li&gt;
&lt;li&gt;The &lt;code&gt;data.csv&lt;&#x2F;code&gt; file contains a link to the JSONL file&lt;&#x2F;li&gt;
&lt;li&gt;The &lt;code&gt;data.jsonl&lt;&#x2F;code&gt; file contains links to the PDF files&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;creating-the-automl-dataset&quot;&gt;Creating the AutoML Dataset&lt;&#x2F;h2&gt;
&lt;p&gt;We can start creating the dataset in the GCP console. Go to &lt;em&gt;Natual Language&lt;&#x2F;em&gt; and then &lt;em&gt;AutoML Entity Extraction&lt;&#x2F;em&gt; to create the dataset. The location has to be &lt;em&gt;Global&lt;&#x2F;em&gt; and the model objective has to be &lt;em&gt;Entity Extraction&lt;&#x2F;em&gt;:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;www.arthurkoziel.com&#x2F;automl-invoice-data-extraction&#x2F;create-new-dataset.png&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;The CSV file can be imported from the GCS bucket at the bottom of the screen:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;www.arthurkoziel.com&#x2F;automl-invoice-data-extraction&#x2F;import-csv.png&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;In my case the import process took &lt;em&gt;13 minutes&lt;&#x2F;em&gt; to finish.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;www.arthurkoziel.com&#x2F;automl-invoice-data-extraction&#x2F;import-done.png&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;I created a &lt;code&gt;totalPrice&lt;&#x2F;code&gt; label. We can do this in the bottom by clicking on &amp;quot;&lt;em&gt;Add New Label&lt;&#x2F;em&gt;&amp;quot;. We will use that label in the next step to annotate the entity we want to extract.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;annotating-the-documents&quot;&gt;Annotating the Documents&lt;&#x2F;h2&gt;
&lt;p&gt;Annotating the documents is the most time-consuming part. We need to go through the following number of invoice documents in each set and mark the total in them:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;100 documents in the Training set&lt;&#x2F;li&gt;
&lt;li&gt;10 documents in the Validation set&lt;&#x2F;li&gt;
&lt;li&gt;10 documents in the Test set&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;This is the minimum number of annotations to make the model train. Feel free to annotate more documents if there&#x27;s time.&lt;&#x2F;p&gt;
&lt;p&gt;Next we click on a document and navigate to the &lt;em&gt;Structured Text&lt;&#x2F;em&gt; view which. This will show the content of the PDF file and make it easy to annotate by simply selecting the text with the mouse and picking a label in the overlay popup. In the example below I would annotate the total: &lt;code&gt;5,032.50&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;www.arthurkoziel.com&#x2F;automl-invoice-data-extraction&#x2F;annotating.png&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;When using this view AutoML will use the PDFs annotation&#x27;s position during training and learn to distinguish between entities based on the position of the annotation.&lt;&#x2F;p&gt;
&lt;p&gt;After all the documents have been annotated we can switch to the &amp;quot;TRAIN&amp;quot; tab and start the training:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;www.arthurkoziel.com&#x2F;automl-invoice-data-extraction&#x2F;pre-start-training.png&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;In my case the training process took &lt;em&gt;2 hours and 18 minutes&lt;&#x2F;em&gt; to finish.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;manual-testing&quot;&gt;Manual Testing&lt;&#x2F;h2&gt;
&lt;p&gt;After we trained the model we can try it out by uploading an invoice to GCS:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#282a36;color:#f8f8f2;&quot;&gt;&lt;code&gt;&lt;span&gt;gsutil cp testing-invoice.pdf gs:&#x2F;&#x2F;automl-nlp-example&#x2F;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Then selecting it in the &amp;quot;TEST &amp;amp; USE&amp;quot; tab and clicking on the &amp;quot;PREDICT&amp;quot; button:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;www.arthurkoziel.com&#x2F;automl-invoice-data-extraction&#x2F;test-and-use.png&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;The prediction will only take a second and shows the result in a PDF view:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;www.arthurkoziel.com&#x2F;automl-invoice-data-extraction&#x2F;prediction-results.png&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;In the example above we can see that the &lt;code&gt;totalPrice&lt;&#x2F;code&gt; was successfully extracted. Feel free to try it out with other invoices. Multiple documents can be submitted by using the &lt;a href=&quot;https:&#x2F;&#x2F;cloud.google.com&#x2F;natural-language&#x2F;automl&#x2F;docs&#x2F;predict#batch_prediction&quot;&gt;Batch prediction REST API&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;&#x2F;h2&gt;
&lt;p&gt;I found Google AutoML Natural Language easy to use. Most of the tasks (except creating the CSV and JSONL files) can be done in the Web UI and the whole process doesn&#x27;t require any coding experience. I only had a very small training dataset available but the results are good enough. In my manual tests I was able to extract the total in around 80% of the cases. I&#x27;m sure this could be improved by making a higher quality training dataset. The downside is that the price for AutoML is high. It cost me around $25 to train, test and deploy this model.&lt;&#x2F;p&gt;
</content>
        
    </entry>
</feed>
